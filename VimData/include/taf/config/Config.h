// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.2.2.11 by WSRD Tencent.
// Generated from `Config.jce'
// **********************************************************************

#ifndef __CONFIG_H_
#define __CONFIG_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
#include "jce/wup.h"
#include "servant/BaseF.h"

using namespace wup;
using namespace std;

#include "servant/ServantProxy.h"
#include "servant/Servant.h"
#include "promise/promise.h"


namespace taf
{
    struct ConfigInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "taf.ConfigInfo";
        }
        static string MD5()
        {
            return "38fd3e21b52031a7cb1855d6c5cfed0f";
        }
        ConfigInfo()
        :appname(""),servername(""),filename(""),bAppOnly(false),host(""),setdivision(""),containername("")
        {
        }
        void resetDefautlt()
        {
            appname = "";
            servername = "";
            filename = "";
            bAppOnly = false;
            host = "";
            setdivision = "";
            containername = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(appname, 0);
            _os.write(servername, 1);
            _os.write(filename, 2);
            _os.write(bAppOnly, 3);
            _os.write(host, 4);
            _os.write(setdivision, 5);
            _os.write(containername, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(appname, 0, true);
            _is.read(servername, 1, true);
            _is.read(filename, 2, true);
            _is.read(bAppOnly, 3, true);
            _is.read(host, 4, false);
            _is.read(setdivision, 5, false);
            _is.read(containername, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(appname,"appname");
            _ds.display(servername,"servername");
            _ds.display(filename,"filename");
            _ds.display(bAppOnly,"bAppOnly");
            _ds.display(host,"host");
            _ds.display(setdivision,"setdivision");
            _ds.display(containername,"containername");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(appname, true);
            _ds.displaySimple(servername, true);
            _ds.displaySimple(filename, true);
            _ds.displaySimple(bAppOnly, true);
            _ds.displaySimple(host, true);
            _ds.displaySimple(setdivision, true);
            _ds.displaySimple(containername, false);
            return _os;
        }
    public:
        std::string appname;
        std::string servername;
        std::string filename;
        taf::Bool bAppOnly;
        std::string host;
        std::string setdivision;
        std::string containername;
    };
    inline bool operator==(const ConfigInfo&l, const ConfigInfo&r)
    {
        return l.appname == r.appname && l.servername == r.servername && l.filename == r.filename && l.bAppOnly == r.bAppOnly && l.host == r.host && l.setdivision == r.setdivision && l.containername == r.containername;
    }
    inline bool operator!=(const ConfigInfo&l, const ConfigInfo&r)
    {
        return !(l == r);
    }

    struct GetConfigListInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "taf.GetConfigListInfo";
        }
        static string MD5()
        {
            return "a1cbee69c6d89a7b7e6270356374ccfd";
        }
        GetConfigListInfo()
        :appname(""),servername(""),bAppOnly(false),host(""),setdivision(""),containername("")
        {
        }
        void resetDefautlt()
        {
            appname = "";
            servername = "";
            bAppOnly = false;
            host = "";
            setdivision = "";
            containername = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(appname, 0);
            _os.write(servername, 1);
            _os.write(bAppOnly, 2);
            _os.write(host, 3);
            _os.write(setdivision, 4);
            _os.write(containername, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(appname, 0, true);
            _is.read(servername, 1, false);
            _is.read(bAppOnly, 2, false);
            _is.read(host, 3, false);
            _is.read(setdivision, 4, false);
            _is.read(containername, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(appname,"appname");
            _ds.display(servername,"servername");
            _ds.display(bAppOnly,"bAppOnly");
            _ds.display(host,"host");
            _ds.display(setdivision,"setdivision");
            _ds.display(containername,"containername");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(appname, true);
            _ds.displaySimple(servername, true);
            _ds.displaySimple(bAppOnly, true);
            _ds.displaySimple(host, true);
            _ds.displaySimple(setdivision, true);
            _ds.displaySimple(containername, false);
            return _os;
        }
    public:
        std::string appname;
        std::string servername;
        taf::Bool bAppOnly;
        std::string host;
        std::string setdivision;
        std::string containername;
    };
    inline bool operator==(const GetConfigListInfo&l, const GetConfigListInfo&r)
    {
        return l.appname == r.appname && l.servername == r.servername && l.bAppOnly == r.bAppOnly && l.host == r.host && l.setdivision == r.setdivision && l.containername == r.containername;
    }
    inline bool operator!=(const GetConfigListInfo&l, const GetConfigListInfo&r)
    {
        return !(l == r);
    }

    /* callback of async proxy for client */
    class ConfigPrxCallback: public taf::ServantProxyCallback
    {
    public:
        virtual ~ConfigPrxCallback(){}
        virtual void callback_ListConfig(taf::Int32 ret,  const vector<std::string>& vf)
        { throw std::runtime_error("callback_ListConfig() override incorrect."); }
        virtual void callback_ListConfig_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_ListConfig_exception() override incorrect."); }

        virtual void callback_loadConfig(taf::Int32 ret,  const std::string& config)
        { throw std::runtime_error("callback_loadConfig() override incorrect."); }
        virtual void callback_loadConfig_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_loadConfig_exception() override incorrect."); }

        virtual void callback_loadConfigByHost(taf::Int32 ret,  const std::string& config)
        { throw std::runtime_error("callback_loadConfigByHost() override incorrect."); }
        virtual void callback_loadConfigByHost_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_loadConfigByHost_exception() override incorrect."); }

        virtual void callback_checkConfig(taf::Int32 ret,  const std::string& result)
        { throw std::runtime_error("callback_checkConfig() override incorrect."); }
        virtual void callback_checkConfig_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_checkConfig_exception() override incorrect."); }

        virtual void callback_ListConfigByInfo(taf::Int32 ret,  const vector<std::string>& vf)
        { throw std::runtime_error("callback_ListConfigByInfo() override incorrect."); }
        virtual void callback_ListConfigByInfo_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_ListConfigByInfo_exception() override incorrect."); }

        virtual void callback_loadConfigByInfo(taf::Int32 ret,  const std::string& config)
        { throw std::runtime_error("callback_loadConfigByInfo() override incorrect."); }
        virtual void callback_loadConfigByInfo_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_loadConfigByInfo_exception() override incorrect."); }

        virtual void callback_checkConfigByInfo(taf::Int32 ret,  const std::string& result)
        { throw std::runtime_error("callback_checkConfigByInfo() override incorrect."); }
        virtual void callback_checkConfigByInfo_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_checkConfigByInfo_exception() override incorrect."); }

        virtual void callback_ListAllConfigByInfo(taf::Int32 ret,  const vector<std::string>& vf)
        { throw std::runtime_error("callback_ListAllConfigByInfo() override incorrect."); }
        virtual void callback_ListAllConfigByInfo_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_ListAllConfigByInfo_exception() override incorrect."); }

    public:
        virtual const map<std::string, std::string> & getResponseContext() const;

    public:
        virtual int onDispatch(taf::ReqMessagePtr msg);
    };
    typedef taf::TC_AutoPtr<ConfigPrxCallback> ConfigPrxCallbackPtr;

    /* callback of promise async proxy for client */
    class ConfigPrxCallbackPromise: public taf::ServantProxyCallback
    {
    public:
        virtual ~ConfigPrxCallbackPromise(){}
    public:
        struct PromiseListConfig: virtual public TC_HandleBase
        {
        public:
            taf::Int32 _ret;
            vector<std::string> vf;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef taf::TC_AutoPtr< ConfigPrxCallbackPromise::PromiseListConfig > PromiseListConfigPtr;

        ConfigPrxCallbackPromise(const promise::Promise< ConfigPrxCallbackPromise::PromiseListConfigPtr > &promise)
        : _promise_ListConfig(promise)
        {}
        
        virtual void callback_ListConfig(const ConfigPrxCallbackPromise::PromiseListConfigPtr &ptr)
        {
            _promise_ListConfig.setValue(ptr);
        }
        virtual void callback_ListConfig_exception(taf::Int32 ret)
        {
            std::string str("");
            str += "Function:ListConfig_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_ListConfig.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< ConfigPrxCallbackPromise::PromiseListConfigPtr > _promise_ListConfig;

    public:
        struct PromiseloadConfig: virtual public TC_HandleBase
        {
        public:
            taf::Int32 _ret;
            std::string config;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef taf::TC_AutoPtr< ConfigPrxCallbackPromise::PromiseloadConfig > PromiseloadConfigPtr;

        ConfigPrxCallbackPromise(const promise::Promise< ConfigPrxCallbackPromise::PromiseloadConfigPtr > &promise)
        : _promise_loadConfig(promise)
        {}
        
        virtual void callback_loadConfig(const ConfigPrxCallbackPromise::PromiseloadConfigPtr &ptr)
        {
            _promise_loadConfig.setValue(ptr);
        }
        virtual void callback_loadConfig_exception(taf::Int32 ret)
        {
            std::string str("");
            str += "Function:loadConfig_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_loadConfig.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< ConfigPrxCallbackPromise::PromiseloadConfigPtr > _promise_loadConfig;

    public:
        struct PromiseloadConfigByHost: virtual public TC_HandleBase
        {
        public:
            taf::Int32 _ret;
            std::string config;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef taf::TC_AutoPtr< ConfigPrxCallbackPromise::PromiseloadConfigByHost > PromiseloadConfigByHostPtr;

        ConfigPrxCallbackPromise(const promise::Promise< ConfigPrxCallbackPromise::PromiseloadConfigByHostPtr > &promise)
        : _promise_loadConfigByHost(promise)
        {}
        
        virtual void callback_loadConfigByHost(const ConfigPrxCallbackPromise::PromiseloadConfigByHostPtr &ptr)
        {
            _promise_loadConfigByHost.setValue(ptr);
        }
        virtual void callback_loadConfigByHost_exception(taf::Int32 ret)
        {
            std::string str("");
            str += "Function:loadConfigByHost_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_loadConfigByHost.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< ConfigPrxCallbackPromise::PromiseloadConfigByHostPtr > _promise_loadConfigByHost;

    public:
        struct PromisecheckConfig: virtual public TC_HandleBase
        {
        public:
            taf::Int32 _ret;
            std::string result;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef taf::TC_AutoPtr< ConfigPrxCallbackPromise::PromisecheckConfig > PromisecheckConfigPtr;

        ConfigPrxCallbackPromise(const promise::Promise< ConfigPrxCallbackPromise::PromisecheckConfigPtr > &promise)
        : _promise_checkConfig(promise)
        {}
        
        virtual void callback_checkConfig(const ConfigPrxCallbackPromise::PromisecheckConfigPtr &ptr)
        {
            _promise_checkConfig.setValue(ptr);
        }
        virtual void callback_checkConfig_exception(taf::Int32 ret)
        {
            std::string str("");
            str += "Function:checkConfig_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_checkConfig.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< ConfigPrxCallbackPromise::PromisecheckConfigPtr > _promise_checkConfig;

    public:
        struct PromiseListConfigByInfo: virtual public TC_HandleBase
        {
        public:
            taf::Int32 _ret;
            vector<std::string> vf;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef taf::TC_AutoPtr< ConfigPrxCallbackPromise::PromiseListConfigByInfo > PromiseListConfigByInfoPtr;

        ConfigPrxCallbackPromise(const promise::Promise< ConfigPrxCallbackPromise::PromiseListConfigByInfoPtr > &promise)
        : _promise_ListConfigByInfo(promise)
        {}
        
        virtual void callback_ListConfigByInfo(const ConfigPrxCallbackPromise::PromiseListConfigByInfoPtr &ptr)
        {
            _promise_ListConfigByInfo.setValue(ptr);
        }
        virtual void callback_ListConfigByInfo_exception(taf::Int32 ret)
        {
            std::string str("");
            str += "Function:ListConfigByInfo_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_ListConfigByInfo.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< ConfigPrxCallbackPromise::PromiseListConfigByInfoPtr > _promise_ListConfigByInfo;

    public:
        struct PromiseloadConfigByInfo: virtual public TC_HandleBase
        {
        public:
            taf::Int32 _ret;
            std::string config;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef taf::TC_AutoPtr< ConfigPrxCallbackPromise::PromiseloadConfigByInfo > PromiseloadConfigByInfoPtr;

        ConfigPrxCallbackPromise(const promise::Promise< ConfigPrxCallbackPromise::PromiseloadConfigByInfoPtr > &promise)
        : _promise_loadConfigByInfo(promise)
        {}
        
        virtual void callback_loadConfigByInfo(const ConfigPrxCallbackPromise::PromiseloadConfigByInfoPtr &ptr)
        {
            _promise_loadConfigByInfo.setValue(ptr);
        }
        virtual void callback_loadConfigByInfo_exception(taf::Int32 ret)
        {
            std::string str("");
            str += "Function:loadConfigByInfo_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_loadConfigByInfo.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< ConfigPrxCallbackPromise::PromiseloadConfigByInfoPtr > _promise_loadConfigByInfo;

    public:
        struct PromisecheckConfigByInfo: virtual public TC_HandleBase
        {
        public:
            taf::Int32 _ret;
            std::string result;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef taf::TC_AutoPtr< ConfigPrxCallbackPromise::PromisecheckConfigByInfo > PromisecheckConfigByInfoPtr;

        ConfigPrxCallbackPromise(const promise::Promise< ConfigPrxCallbackPromise::PromisecheckConfigByInfoPtr > &promise)
        : _promise_checkConfigByInfo(promise)
        {}
        
        virtual void callback_checkConfigByInfo(const ConfigPrxCallbackPromise::PromisecheckConfigByInfoPtr &ptr)
        {
            _promise_checkConfigByInfo.setValue(ptr);
        }
        virtual void callback_checkConfigByInfo_exception(taf::Int32 ret)
        {
            std::string str("");
            str += "Function:checkConfigByInfo_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_checkConfigByInfo.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< ConfigPrxCallbackPromise::PromisecheckConfigByInfoPtr > _promise_checkConfigByInfo;

    public:
        struct PromiseListAllConfigByInfo: virtual public TC_HandleBase
        {
        public:
            taf::Int32 _ret;
            vector<std::string> vf;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef taf::TC_AutoPtr< ConfigPrxCallbackPromise::PromiseListAllConfigByInfo > PromiseListAllConfigByInfoPtr;

        ConfigPrxCallbackPromise(const promise::Promise< ConfigPrxCallbackPromise::PromiseListAllConfigByInfoPtr > &promise)
        : _promise_ListAllConfigByInfo(promise)
        {}
        
        virtual void callback_ListAllConfigByInfo(const ConfigPrxCallbackPromise::PromiseListAllConfigByInfoPtr &ptr)
        {
            _promise_ListAllConfigByInfo.setValue(ptr);
        }
        virtual void callback_ListAllConfigByInfo_exception(taf::Int32 ret)
        {
            std::string str("");
            str += "Function:ListAllConfigByInfo_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_ListAllConfigByInfo.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< ConfigPrxCallbackPromise::PromiseListAllConfigByInfoPtr > _promise_ListAllConfigByInfo;

    public:
        virtual int onDispatch(taf::ReqMessagePtr msg);
    };
    typedef taf::TC_AutoPtr<ConfigPrxCallbackPromise> ConfigPrxCallbackPromisePtr;

    /* callback of coroutine async proxy for client */
    class ConfigCoroPrxCallback: public ConfigPrxCallback
    {
    public:
        virtual ~ConfigCoroPrxCallback(){}
    public:
        virtual const map<std::string, std::string> & getResponseContext() const { return _mRspContext; }

        virtual void setResponseContext(const map<std::string, std::string> &mContext) { _mRspContext = mContext; }

    public:
        virtual int onDispatch(taf::ReqMessagePtr msg);
    protected:
        map<std::string, std::string> _mRspContext;
    };
    typedef taf::TC_AutoPtr<ConfigCoroPrxCallback> ConfigCoroPrxCallbackPtr;

    /* proxy for client */
    class ConfigProxy : public taf::ServantProxy
    {
    public:
        typedef map<string, string> TAF_CONTEXT;
        taf::Int32 ListConfig(const std::string & app,const std::string & server,vector<std::string> &vf,const map<string, string> &context = TAF_CONTEXT(),map<string, string> * pResponseContext = NULL);
        void async_ListConfig(ConfigPrxCallbackPtr callback,const std::string & app,const std::string & server,const map<string, string> &context = TAF_CONTEXT());

        promise::Future< ConfigPrxCallbackPromise::PromiseListConfigPtr > promise_async_ListConfig(const std::string & app,const std::string & server,const map<string, string> &context = TAF_CONTEXT());
        void coro_ListConfig(ConfigCoroPrxCallbackPtr callback,const std::string & app,const std::string & server,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 loadConfig(const std::string & app,const std::string & server,const std::string & filename,std::string &config,const map<string, string> &context = TAF_CONTEXT(),map<string, string> * pResponseContext = NULL);
        void async_loadConfig(ConfigPrxCallbackPtr callback,const std::string & app,const std::string & server,const std::string & filename,const map<string, string> &context = TAF_CONTEXT());

        promise::Future< ConfigPrxCallbackPromise::PromiseloadConfigPtr > promise_async_loadConfig(const std::string & app,const std::string & server,const std::string & filename,const map<string, string> &context = TAF_CONTEXT());
        void coro_loadConfig(ConfigCoroPrxCallbackPtr callback,const std::string & app,const std::string & server,const std::string & filename,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 loadConfigByHost(const std::string & appServerName,const std::string & filename,const std::string & host,std::string &config,const map<string, string> &context = TAF_CONTEXT(),map<string, string> * pResponseContext = NULL);
        void async_loadConfigByHost(ConfigPrxCallbackPtr callback,const std::string & appServerName,const std::string & filename,const std::string & host,const map<string, string> &context = TAF_CONTEXT());

        promise::Future< ConfigPrxCallbackPromise::PromiseloadConfigByHostPtr > promise_async_loadConfigByHost(const std::string & appServerName,const std::string & filename,const std::string & host,const map<string, string> &context = TAF_CONTEXT());
        void coro_loadConfigByHost(ConfigCoroPrxCallbackPtr callback,const std::string & appServerName,const std::string & filename,const std::string & host,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 checkConfig(const std::string & appServerName,const std::string & filename,const std::string & host,std::string &result,const map<string, string> &context = TAF_CONTEXT(),map<string, string> * pResponseContext = NULL);
        void async_checkConfig(ConfigPrxCallbackPtr callback,const std::string & appServerName,const std::string & filename,const std::string & host,const map<string, string> &context = TAF_CONTEXT());

        promise::Future< ConfigPrxCallbackPromise::PromisecheckConfigPtr > promise_async_checkConfig(const std::string & appServerName,const std::string & filename,const std::string & host,const map<string, string> &context = TAF_CONTEXT());
        void coro_checkConfig(ConfigCoroPrxCallbackPtr callback,const std::string & appServerName,const std::string & filename,const std::string & host,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 ListConfigByInfo(const taf::ConfigInfo & configInfo,vector<std::string> &vf,const map<string, string> &context = TAF_CONTEXT(),map<string, string> * pResponseContext = NULL);
        void async_ListConfigByInfo(ConfigPrxCallbackPtr callback,const taf::ConfigInfo & configInfo,const map<string, string> &context = TAF_CONTEXT());

        promise::Future< ConfigPrxCallbackPromise::PromiseListConfigByInfoPtr > promise_async_ListConfigByInfo(const taf::ConfigInfo & configInfo,const map<string, string> &context = TAF_CONTEXT());
        void coro_ListConfigByInfo(ConfigCoroPrxCallbackPtr callback,const taf::ConfigInfo & configInfo,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 loadConfigByInfo(const taf::ConfigInfo & configInfo,std::string &config,const map<string, string> &context = TAF_CONTEXT(),map<string, string> * pResponseContext = NULL);
        void async_loadConfigByInfo(ConfigPrxCallbackPtr callback,const taf::ConfigInfo & configInfo,const map<string, string> &context = TAF_CONTEXT());

        promise::Future< ConfigPrxCallbackPromise::PromiseloadConfigByInfoPtr > promise_async_loadConfigByInfo(const taf::ConfigInfo & configInfo,const map<string, string> &context = TAF_CONTEXT());
        void coro_loadConfigByInfo(ConfigCoroPrxCallbackPtr callback,const taf::ConfigInfo & configInfo,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 checkConfigByInfo(const taf::ConfigInfo & configInfo,std::string &result,const map<string, string> &context = TAF_CONTEXT(),map<string, string> * pResponseContext = NULL);
        void async_checkConfigByInfo(ConfigPrxCallbackPtr callback,const taf::ConfigInfo & configInfo,const map<string, string> &context = TAF_CONTEXT());

        promise::Future< ConfigPrxCallbackPromise::PromisecheckConfigByInfoPtr > promise_async_checkConfigByInfo(const taf::ConfigInfo & configInfo,const map<string, string> &context = TAF_CONTEXT());
        void coro_checkConfigByInfo(ConfigCoroPrxCallbackPtr callback,const taf::ConfigInfo & configInfo,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 ListAllConfigByInfo(const taf::GetConfigListInfo & configInfo,vector<std::string> &vf,const map<string, string> &context = TAF_CONTEXT(),map<string, string> * pResponseContext = NULL);
        void async_ListAllConfigByInfo(ConfigPrxCallbackPtr callback,const taf::GetConfigListInfo & configInfo,const map<string, string> &context = TAF_CONTEXT());

        promise::Future< ConfigPrxCallbackPromise::PromiseListAllConfigByInfoPtr > promise_async_ListAllConfigByInfo(const taf::GetConfigListInfo & configInfo,const map<string, string> &context = TAF_CONTEXT());
        void coro_ListAllConfigByInfo(ConfigCoroPrxCallbackPtr callback,const taf::GetConfigListInfo & configInfo,const map<string, string> &context = TAF_CONTEXT());

        ConfigProxy* taf_hash(int64_t key);
        ConfigProxy* taf_consistent_hash(int64_t key);
        ConfigProxy* taf_set_timeout(int msecond);
        ConfigProxy* taf_loaded();
    };
    typedef taf::TC_AutoPtr<ConfigProxy> ConfigPrx;

    /* servant for server */
    class Config : public taf::Servant
    {
    public:
        virtual ~Config(){}
        virtual taf::Int32 ListConfig(const std::string & app,const std::string & server,vector<std::string> &vf,taf::JceCurrentPtr current) = 0;
        static void async_response_ListConfig(taf::JceCurrentPtr current, taf::Int32 _ret, const vector<std::string> &vf);

        virtual taf::Int32 loadConfig(const std::string & app,const std::string & server,const std::string & filename,std::string &config,taf::JceCurrentPtr current) = 0;
        static void async_response_loadConfig(taf::JceCurrentPtr current, taf::Int32 _ret, const std::string &config);

        virtual taf::Int32 loadConfigByHost(const std::string & appServerName,const std::string & filename,const std::string & host,std::string &config,taf::JceCurrentPtr current) = 0;
        static void async_response_loadConfigByHost(taf::JceCurrentPtr current, taf::Int32 _ret, const std::string &config);

        virtual taf::Int32 checkConfig(const std::string & appServerName,const std::string & filename,const std::string & host,std::string &result,taf::JceCurrentPtr current) = 0;
        static void async_response_checkConfig(taf::JceCurrentPtr current, taf::Int32 _ret, const std::string &result);

        virtual taf::Int32 ListConfigByInfo(const taf::ConfigInfo & configInfo,vector<std::string> &vf,taf::JceCurrentPtr current) = 0;
        static void async_response_ListConfigByInfo(taf::JceCurrentPtr current, taf::Int32 _ret, const vector<std::string> &vf);

        virtual taf::Int32 loadConfigByInfo(const taf::ConfigInfo & configInfo,std::string &config,taf::JceCurrentPtr current) = 0;
        static void async_response_loadConfigByInfo(taf::JceCurrentPtr current, taf::Int32 _ret, const std::string &config);

        virtual taf::Int32 checkConfigByInfo(const taf::ConfigInfo & configInfo,std::string &result,taf::JceCurrentPtr current) = 0;
        static void async_response_checkConfigByInfo(taf::JceCurrentPtr current, taf::Int32 _ret, const std::string &result);

        virtual taf::Int32 ListAllConfigByInfo(const taf::GetConfigListInfo & configInfo,vector<std::string> &vf,taf::JceCurrentPtr current) = 0;
        static void async_response_ListAllConfigByInfo(taf::JceCurrentPtr current, taf::Int32 _ret, const vector<std::string> &vf);

    public:
        int onDispatch(taf::JceCurrentPtr _current, vector<char> &_sResponseBuffer);
    };

    inline taf::Int32 ConfigProxy::ListAllConfigByInfo(const taf::GetConfigListInfo &configInfo, vector<std::string> &vf, const map<string, string> &context,map<string, string> * pResponseContext)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(configInfo, 1);
        _os.write(vf, 2);
        taf::ResponsePacket rep;
        std::map<string, string> _mStatus;
        taf_invoke(taf::JCENORMAL,"ListAllConfigByInfo", _os.getByteBuffer(), context, _mStatus, rep);
        if(pResponseContext)
        {
            *pResponseContext = rep.context;
        }

        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(vf, 2, true);
        return _ret;
    }

    inline void Config::async_response_ListAllConfigByInfo(taf::JceCurrentPtr current, taf::Int32 _ret, const vector<std::string> &vf)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("vf", vf);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(vf, 2);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    inline void ConfigProxy::async_ListAllConfigByInfo(ConfigPrxCallbackPtr callback,const taf::GetConfigListInfo &configInfo,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(configInfo, 1);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"ListAllConfigByInfo", _os.getByteBuffer(), context, _mStatus, callback);
    }
    
    inline promise::Future< ConfigPrxCallbackPromise::PromiseListAllConfigByInfoPtr > ConfigProxy::promise_async_ListAllConfigByInfo(const taf::GetConfigListInfo &configInfo,const map<string, string>& context)
    {
        promise::Promise< ConfigPrxCallbackPromise::PromiseListAllConfigByInfoPtr > promise;
        ConfigPrxCallbackPromisePtr callback = new ConfigPrxCallbackPromise(promise);

        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(configInfo, 1);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"ListAllConfigByInfo", _os.getByteBuffer(), context, _mStatus, callback);

        return promise.getFuture();
    }

    inline void ConfigProxy::coro_ListAllConfigByInfo(ConfigCoroPrxCallbackPtr callback,const taf::GetConfigListInfo &configInfo,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(configInfo, 1);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"ListAllConfigByInfo", _os.getByteBuffer(), context, _mStatus, callback, true);
    }

    inline taf::Int32 ConfigProxy::ListConfig(const std::string &app, const std::string &server, vector<std::string> &vf, const map<string, string> &context,map<string, string> * pResponseContext)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(app, 1);
        _os.write(server, 2);
        _os.write(vf, 3);
        taf::ResponsePacket rep;
        std::map<string, string> _mStatus;
        taf_invoke(taf::JCENORMAL,"ListConfig", _os.getByteBuffer(), context, _mStatus, rep);
        if(pResponseContext)
        {
            *pResponseContext = rep.context;
        }

        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(vf, 3, true);
        return _ret;
    }

    inline void Config::async_response_ListConfig(taf::JceCurrentPtr current, taf::Int32 _ret, const vector<std::string> &vf)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("vf", vf);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(vf, 3);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    inline void ConfigProxy::async_ListConfig(ConfigPrxCallbackPtr callback,const std::string &app,const std::string &server,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(app, 1);
        _os.write(server, 2);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"ListConfig", _os.getByteBuffer(), context, _mStatus, callback);
    }
    
    inline promise::Future< ConfigPrxCallbackPromise::PromiseListConfigPtr > ConfigProxy::promise_async_ListConfig(const std::string &app,const std::string &server,const map<string, string>& context)
    {
        promise::Promise< ConfigPrxCallbackPromise::PromiseListConfigPtr > promise;
        ConfigPrxCallbackPromisePtr callback = new ConfigPrxCallbackPromise(promise);

        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(app, 1);
        _os.write(server, 2);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"ListConfig", _os.getByteBuffer(), context, _mStatus, callback);

        return promise.getFuture();
    }

    inline void ConfigProxy::coro_ListConfig(ConfigCoroPrxCallbackPtr callback,const std::string &app,const std::string &server,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(app, 1);
        _os.write(server, 2);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"ListConfig", _os.getByteBuffer(), context, _mStatus, callback, true);
    }

    inline taf::Int32 ConfigProxy::ListConfigByInfo(const taf::ConfigInfo &configInfo, vector<std::string> &vf, const map<string, string> &context,map<string, string> * pResponseContext)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(configInfo, 1);
        _os.write(vf, 2);
        taf::ResponsePacket rep;
        std::map<string, string> _mStatus;
        taf_invoke(taf::JCENORMAL,"ListConfigByInfo", _os.getByteBuffer(), context, _mStatus, rep);
        if(pResponseContext)
        {
            *pResponseContext = rep.context;
        }

        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(vf, 2, true);
        return _ret;
    }

    inline void Config::async_response_ListConfigByInfo(taf::JceCurrentPtr current, taf::Int32 _ret, const vector<std::string> &vf)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("vf", vf);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(vf, 2);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    inline void ConfigProxy::async_ListConfigByInfo(ConfigPrxCallbackPtr callback,const taf::ConfigInfo &configInfo,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(configInfo, 1);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"ListConfigByInfo", _os.getByteBuffer(), context, _mStatus, callback);
    }
    
    inline promise::Future< ConfigPrxCallbackPromise::PromiseListConfigByInfoPtr > ConfigProxy::promise_async_ListConfigByInfo(const taf::ConfigInfo &configInfo,const map<string, string>& context)
    {
        promise::Promise< ConfigPrxCallbackPromise::PromiseListConfigByInfoPtr > promise;
        ConfigPrxCallbackPromisePtr callback = new ConfigPrxCallbackPromise(promise);

        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(configInfo, 1);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"ListConfigByInfo", _os.getByteBuffer(), context, _mStatus, callback);

        return promise.getFuture();
    }

    inline void ConfigProxy::coro_ListConfigByInfo(ConfigCoroPrxCallbackPtr callback,const taf::ConfigInfo &configInfo,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(configInfo, 1);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"ListConfigByInfo", _os.getByteBuffer(), context, _mStatus, callback, true);
    }

    inline taf::Int32 ConfigProxy::checkConfig(const std::string &appServerName, const std::string &filename, const std::string &host, std::string &result, const map<string, string> &context,map<string, string> * pResponseContext)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(appServerName, 1);
        _os.write(filename, 2);
        _os.write(host, 3);
        _os.write(result, 4);
        taf::ResponsePacket rep;
        std::map<string, string> _mStatus;
        taf_invoke(taf::JCENORMAL,"checkConfig", _os.getByteBuffer(), context, _mStatus, rep);
        if(pResponseContext)
        {
            *pResponseContext = rep.context;
        }

        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(result, 4, true);
        return _ret;
    }

    inline void Config::async_response_checkConfig(taf::JceCurrentPtr current, taf::Int32 _ret, const std::string &result)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("result", result);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(result, 4);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    inline void ConfigProxy::async_checkConfig(ConfigPrxCallbackPtr callback,const std::string &appServerName,const std::string &filename,const std::string &host,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(appServerName, 1);
        _os.write(filename, 2);
        _os.write(host, 3);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"checkConfig", _os.getByteBuffer(), context, _mStatus, callback);
    }
    
    inline promise::Future< ConfigPrxCallbackPromise::PromisecheckConfigPtr > ConfigProxy::promise_async_checkConfig(const std::string &appServerName,const std::string &filename,const std::string &host,const map<string, string>& context)
    {
        promise::Promise< ConfigPrxCallbackPromise::PromisecheckConfigPtr > promise;
        ConfigPrxCallbackPromisePtr callback = new ConfigPrxCallbackPromise(promise);

        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(appServerName, 1);
        _os.write(filename, 2);
        _os.write(host, 3);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"checkConfig", _os.getByteBuffer(), context, _mStatus, callback);

        return promise.getFuture();
    }

    inline void ConfigProxy::coro_checkConfig(ConfigCoroPrxCallbackPtr callback,const std::string &appServerName,const std::string &filename,const std::string &host,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(appServerName, 1);
        _os.write(filename, 2);
        _os.write(host, 3);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"checkConfig", _os.getByteBuffer(), context, _mStatus, callback, true);
    }

    inline taf::Int32 ConfigProxy::checkConfigByInfo(const taf::ConfigInfo &configInfo, std::string &result, const map<string, string> &context,map<string, string> * pResponseContext)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(configInfo, 1);
        _os.write(result, 2);
        taf::ResponsePacket rep;
        std::map<string, string> _mStatus;
        taf_invoke(taf::JCENORMAL,"checkConfigByInfo", _os.getByteBuffer(), context, _mStatus, rep);
        if(pResponseContext)
        {
            *pResponseContext = rep.context;
        }

        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(result, 2, true);
        return _ret;
    }

    inline void Config::async_response_checkConfigByInfo(taf::JceCurrentPtr current, taf::Int32 _ret, const std::string &result)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("result", result);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(result, 2);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    inline void ConfigProxy::async_checkConfigByInfo(ConfigPrxCallbackPtr callback,const taf::ConfigInfo &configInfo,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(configInfo, 1);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"checkConfigByInfo", _os.getByteBuffer(), context, _mStatus, callback);
    }
    
    inline promise::Future< ConfigPrxCallbackPromise::PromisecheckConfigByInfoPtr > ConfigProxy::promise_async_checkConfigByInfo(const taf::ConfigInfo &configInfo,const map<string, string>& context)
    {
        promise::Promise< ConfigPrxCallbackPromise::PromisecheckConfigByInfoPtr > promise;
        ConfigPrxCallbackPromisePtr callback = new ConfigPrxCallbackPromise(promise);

        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(configInfo, 1);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"checkConfigByInfo", _os.getByteBuffer(), context, _mStatus, callback);

        return promise.getFuture();
    }

    inline void ConfigProxy::coro_checkConfigByInfo(ConfigCoroPrxCallbackPtr callback,const taf::ConfigInfo &configInfo,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(configInfo, 1);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"checkConfigByInfo", _os.getByteBuffer(), context, _mStatus, callback, true);
    }

    inline taf::Int32 ConfigProxy::loadConfig(const std::string &app, const std::string &server, const std::string &filename, std::string &config, const map<string, string> &context,map<string, string> * pResponseContext)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(app, 1);
        _os.write(server, 2);
        _os.write(filename, 3);
        _os.write(config, 4);
        taf::ResponsePacket rep;
        std::map<string, string> _mStatus;
        taf_invoke(taf::JCENORMAL,"loadConfig", _os.getByteBuffer(), context, _mStatus, rep);
        if(pResponseContext)
        {
            *pResponseContext = rep.context;
        }

        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(config, 4, true);
        return _ret;
    }

    inline void Config::async_response_loadConfig(taf::JceCurrentPtr current, taf::Int32 _ret, const std::string &config)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("config", config);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(config, 4);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    inline void ConfigProxy::async_loadConfig(ConfigPrxCallbackPtr callback,const std::string &app,const std::string &server,const std::string &filename,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(app, 1);
        _os.write(server, 2);
        _os.write(filename, 3);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"loadConfig", _os.getByteBuffer(), context, _mStatus, callback);
    }
    
    inline promise::Future< ConfigPrxCallbackPromise::PromiseloadConfigPtr > ConfigProxy::promise_async_loadConfig(const std::string &app,const std::string &server,const std::string &filename,const map<string, string>& context)
    {
        promise::Promise< ConfigPrxCallbackPromise::PromiseloadConfigPtr > promise;
        ConfigPrxCallbackPromisePtr callback = new ConfigPrxCallbackPromise(promise);

        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(app, 1);
        _os.write(server, 2);
        _os.write(filename, 3);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"loadConfig", _os.getByteBuffer(), context, _mStatus, callback);

        return promise.getFuture();
    }

    inline void ConfigProxy::coro_loadConfig(ConfigCoroPrxCallbackPtr callback,const std::string &app,const std::string &server,const std::string &filename,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(app, 1);
        _os.write(server, 2);
        _os.write(filename, 3);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"loadConfig", _os.getByteBuffer(), context, _mStatus, callback, true);
    }

    inline taf::Int32 ConfigProxy::loadConfigByHost(const std::string &appServerName, const std::string &filename, const std::string &host, std::string &config, const map<string, string> &context,map<string, string> * pResponseContext)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(appServerName, 1);
        _os.write(filename, 2);
        _os.write(host, 3);
        _os.write(config, 4);
        taf::ResponsePacket rep;
        std::map<string, string> _mStatus;
        taf_invoke(taf::JCENORMAL,"loadConfigByHost", _os.getByteBuffer(), context, _mStatus, rep);
        if(pResponseContext)
        {
            *pResponseContext = rep.context;
        }

        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(config, 4, true);
        return _ret;
    }

    inline void Config::async_response_loadConfigByHost(taf::JceCurrentPtr current, taf::Int32 _ret, const std::string &config)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("config", config);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(config, 4);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    inline void ConfigProxy::async_loadConfigByHost(ConfigPrxCallbackPtr callback,const std::string &appServerName,const std::string &filename,const std::string &host,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(appServerName, 1);
        _os.write(filename, 2);
        _os.write(host, 3);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"loadConfigByHost", _os.getByteBuffer(), context, _mStatus, callback);
    }
    
    inline promise::Future< ConfigPrxCallbackPromise::PromiseloadConfigByHostPtr > ConfigProxy::promise_async_loadConfigByHost(const std::string &appServerName,const std::string &filename,const std::string &host,const map<string, string>& context)
    {
        promise::Promise< ConfigPrxCallbackPromise::PromiseloadConfigByHostPtr > promise;
        ConfigPrxCallbackPromisePtr callback = new ConfigPrxCallbackPromise(promise);

        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(appServerName, 1);
        _os.write(filename, 2);
        _os.write(host, 3);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"loadConfigByHost", _os.getByteBuffer(), context, _mStatus, callback);

        return promise.getFuture();
    }

    inline void ConfigProxy::coro_loadConfigByHost(ConfigCoroPrxCallbackPtr callback,const std::string &appServerName,const std::string &filename,const std::string &host,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(appServerName, 1);
        _os.write(filename, 2);
        _os.write(host, 3);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"loadConfigByHost", _os.getByteBuffer(), context, _mStatus, callback, true);
    }

    inline taf::Int32 ConfigProxy::loadConfigByInfo(const taf::ConfigInfo &configInfo, std::string &config, const map<string, string> &context,map<string, string> * pResponseContext)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(configInfo, 1);
        _os.write(config, 2);
        taf::ResponsePacket rep;
        std::map<string, string> _mStatus;
        taf_invoke(taf::JCENORMAL,"loadConfigByInfo", _os.getByteBuffer(), context, _mStatus, rep);
        if(pResponseContext)
        {
            *pResponseContext = rep.context;
        }

        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(config, 2, true);
        return _ret;
    }

    inline void Config::async_response_loadConfigByInfo(taf::JceCurrentPtr current, taf::Int32 _ret, const std::string &config)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("config", config);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(config, 2);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    inline void ConfigProxy::async_loadConfigByInfo(ConfigPrxCallbackPtr callback,const taf::ConfigInfo &configInfo,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(configInfo, 1);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"loadConfigByInfo", _os.getByteBuffer(), context, _mStatus, callback);
    }
    
    inline promise::Future< ConfigPrxCallbackPromise::PromiseloadConfigByInfoPtr > ConfigProxy::promise_async_loadConfigByInfo(const taf::ConfigInfo &configInfo,const map<string, string>& context)
    {
        promise::Promise< ConfigPrxCallbackPromise::PromiseloadConfigByInfoPtr > promise;
        ConfigPrxCallbackPromisePtr callback = new ConfigPrxCallbackPromise(promise);

        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(configInfo, 1);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"loadConfigByInfo", _os.getByteBuffer(), context, _mStatus, callback);

        return promise.getFuture();
    }

    inline void ConfigProxy::coro_loadConfigByInfo(ConfigCoroPrxCallbackPtr callback,const taf::ConfigInfo &configInfo,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(configInfo, 1);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"loadConfigByInfo", _os.getByteBuffer(), context, _mStatus, callback, true);
    }

    inline ConfigProxy* ConfigProxy::taf_hash(int64_t key)
    {
        return (ConfigProxy*)ServantProxy::taf_hash(key);
    }

    inline ConfigProxy* ConfigProxy::taf_consistent_hash(int64_t key)
    {
        return (ConfigProxy*)ServantProxy::taf_consistent_hash(key);
    }

    inline ConfigProxy* ConfigProxy::taf_set_timeout(int msecond)
    {
        return (ConfigProxy*)ServantProxy::taf_set_timeout(msecond);
    }

    inline ConfigProxy* ConfigProxy::taf_loaded()
    {
        return (ConfigProxy*)ServantProxy::taf_loaded();
    }

    static ::std::string __taf__Config_all[]=
    {
        "ListAllConfigByInfo",
        "ListConfig",
        "ListConfigByInfo",
        "checkConfig",
        "checkConfigByInfo",
        "loadConfig",
        "loadConfigByHost",
        "loadConfigByInfo"
    };

    inline const map<std::string, std::string> & ConfigPrxCallback::getResponseContext() const
    {
        CallbackThreadData * pCbtd = CallbackThreadData::getData();
        assert(pCbtd != NULL);

        if(!pCbtd->getContextValid())
        {
            throw TC_Exception("cann't get response context");
        }
        return pCbtd->getResponseContext();
    }

    inline int ConfigPrxCallback::onDispatch(taf::ReqMessagePtr msg)
    {
        pair<string*, string*> r = equal_range(__taf__Config_all, __taf__Config_all+8, string(msg->request.sFuncName));
        if(r.first == r.second) return taf::JCESERVERNOFUNCERR;
        switch(r.first - __taf__Config_all)
        {
            case 0:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_ListAllConfigByInfo_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                vector<std::string> vf;
                _is.read(vf, 2, true);
                CallbackThreadData * pCbtd = CallbackThreadData::getData();
                assert(pCbtd != NULL);

                pCbtd->setResponseContext(msg->response.context);

                callback_ListAllConfigByInfo(_ret, vf);

                pCbtd->delResponseContext();

                return taf::JCESERVERSUCCESS;

            }
            case 1:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_ListConfig_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                vector<std::string> vf;
                _is.read(vf, 3, true);
                CallbackThreadData * pCbtd = CallbackThreadData::getData();
                assert(pCbtd != NULL);

                pCbtd->setResponseContext(msg->response.context);

                callback_ListConfig(_ret, vf);

                pCbtd->delResponseContext();

                return taf::JCESERVERSUCCESS;

            }
            case 2:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_ListConfigByInfo_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                vector<std::string> vf;
                _is.read(vf, 2, true);
                CallbackThreadData * pCbtd = CallbackThreadData::getData();
                assert(pCbtd != NULL);

                pCbtd->setResponseContext(msg->response.context);

                callback_ListConfigByInfo(_ret, vf);

                pCbtd->delResponseContext();

                return taf::JCESERVERSUCCESS;

            }
            case 3:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_checkConfig_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                std::string result;
                _is.read(result, 4, true);
                CallbackThreadData * pCbtd = CallbackThreadData::getData();
                assert(pCbtd != NULL);

                pCbtd->setResponseContext(msg->response.context);

                callback_checkConfig(_ret, result);

                pCbtd->delResponseContext();

                return taf::JCESERVERSUCCESS;

            }
            case 4:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_checkConfigByInfo_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                std::string result;
                _is.read(result, 2, true);
                CallbackThreadData * pCbtd = CallbackThreadData::getData();
                assert(pCbtd != NULL);

                pCbtd->setResponseContext(msg->response.context);

                callback_checkConfigByInfo(_ret, result);

                pCbtd->delResponseContext();

                return taf::JCESERVERSUCCESS;

            }
            case 5:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_loadConfig_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                std::string config;
                _is.read(config, 4, true);
                CallbackThreadData * pCbtd = CallbackThreadData::getData();
                assert(pCbtd != NULL);

                pCbtd->setResponseContext(msg->response.context);

                callback_loadConfig(_ret, config);

                pCbtd->delResponseContext();

                return taf::JCESERVERSUCCESS;

            }
            case 6:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_loadConfigByHost_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                std::string config;
                _is.read(config, 4, true);
                CallbackThreadData * pCbtd = CallbackThreadData::getData();
                assert(pCbtd != NULL);

                pCbtd->setResponseContext(msg->response.context);

                callback_loadConfigByHost(_ret, config);

                pCbtd->delResponseContext();

                return taf::JCESERVERSUCCESS;

            }
            case 7:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_loadConfigByInfo_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                std::string config;
                _is.read(config, 2, true);
                CallbackThreadData * pCbtd = CallbackThreadData::getData();
                assert(pCbtd != NULL);

                pCbtd->setResponseContext(msg->response.context);

                callback_loadConfigByInfo(_ret, config);

                pCbtd->delResponseContext();

                return taf::JCESERVERSUCCESS;

            }
        }
        return taf::JCESERVERNOFUNCERR;
    }

    inline int ConfigPrxCallbackPromise::onDispatch(taf::ReqMessagePtr msg)
    {
        pair<string*, string*> r = equal_range(__taf__Config_all, __taf__Config_all+8, string(msg->request.sFuncName));
        if(r.first == r.second) return taf::JCESERVERNOFUNCERR;
        switch(r.first - __taf__Config_all)
        {
            case 0:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_ListAllConfigByInfo_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);

                ConfigPrxCallbackPromise::PromiseListAllConfigByInfoPtr ptr = new ConfigPrxCallbackPromise::PromiseListAllConfigByInfo();

                _is.read(ptr->_ret, 0, true);

                _is.read(ptr->vf, 2, true);

                ptr->_mRspContext = msg->response.context;

                callback_ListAllConfigByInfo(ptr);

                return taf::JCESERVERSUCCESS;

            }
            case 1:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_ListConfig_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);

                ConfigPrxCallbackPromise::PromiseListConfigPtr ptr = new ConfigPrxCallbackPromise::PromiseListConfig();

                _is.read(ptr->_ret, 0, true);

                _is.read(ptr->vf, 3, true);

                ptr->_mRspContext = msg->response.context;

                callback_ListConfig(ptr);

                return taf::JCESERVERSUCCESS;

            }
            case 2:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_ListConfigByInfo_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);

                ConfigPrxCallbackPromise::PromiseListConfigByInfoPtr ptr = new ConfigPrxCallbackPromise::PromiseListConfigByInfo();

                _is.read(ptr->_ret, 0, true);

                _is.read(ptr->vf, 2, true);

                ptr->_mRspContext = msg->response.context;

                callback_ListConfigByInfo(ptr);

                return taf::JCESERVERSUCCESS;

            }
            case 3:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_checkConfig_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);

                ConfigPrxCallbackPromise::PromisecheckConfigPtr ptr = new ConfigPrxCallbackPromise::PromisecheckConfig();

                _is.read(ptr->_ret, 0, true);

                _is.read(ptr->result, 4, true);

                ptr->_mRspContext = msg->response.context;

                callback_checkConfig(ptr);

                return taf::JCESERVERSUCCESS;

            }
            case 4:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_checkConfigByInfo_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);

                ConfigPrxCallbackPromise::PromisecheckConfigByInfoPtr ptr = new ConfigPrxCallbackPromise::PromisecheckConfigByInfo();

                _is.read(ptr->_ret, 0, true);

                _is.read(ptr->result, 2, true);

                ptr->_mRspContext = msg->response.context;

                callback_checkConfigByInfo(ptr);

                return taf::JCESERVERSUCCESS;

            }
            case 5:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_loadConfig_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);

                ConfigPrxCallbackPromise::PromiseloadConfigPtr ptr = new ConfigPrxCallbackPromise::PromiseloadConfig();

                _is.read(ptr->_ret, 0, true);

                _is.read(ptr->config, 4, true);

                ptr->_mRspContext = msg->response.context;

                callback_loadConfig(ptr);

                return taf::JCESERVERSUCCESS;

            }
            case 6:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_loadConfigByHost_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);

                ConfigPrxCallbackPromise::PromiseloadConfigByHostPtr ptr = new ConfigPrxCallbackPromise::PromiseloadConfigByHost();

                _is.read(ptr->_ret, 0, true);

                _is.read(ptr->config, 4, true);

                ptr->_mRspContext = msg->response.context;

                callback_loadConfigByHost(ptr);

                return taf::JCESERVERSUCCESS;

            }
            case 7:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_loadConfigByInfo_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);

                ConfigPrxCallbackPromise::PromiseloadConfigByInfoPtr ptr = new ConfigPrxCallbackPromise::PromiseloadConfigByInfo();

                _is.read(ptr->_ret, 0, true);

                _is.read(ptr->config, 2, true);

                ptr->_mRspContext = msg->response.context;

                callback_loadConfigByInfo(ptr);

                return taf::JCESERVERSUCCESS;

            }
        }
        return taf::JCESERVERNOFUNCERR;
    }

    inline int ConfigCoroPrxCallback::onDispatch(taf::ReqMessagePtr msg)
    {
        pair<string*, string*> r = equal_range(__taf__Config_all, __taf__Config_all+8, string(msg->request.sFuncName));
        if(r.first == r.second) return taf::JCESERVERNOFUNCERR;
        switch(r.first - __taf__Config_all)
        {
            case 0:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_ListAllConfigByInfo_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                vector<std::string> vf;
                _is.read(vf, 2, true);
                setResponseContext(msg->response.context);

                callback_ListAllConfigByInfo(_ret, vf);

                return taf::JCESERVERSUCCESS;

            }
            case 1:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_ListConfig_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                vector<std::string> vf;
                _is.read(vf, 3, true);
                setResponseContext(msg->response.context);

                callback_ListConfig(_ret, vf);

                return taf::JCESERVERSUCCESS;

            }
            case 2:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_ListConfigByInfo_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                vector<std::string> vf;
                _is.read(vf, 2, true);
                setResponseContext(msg->response.context);

                callback_ListConfigByInfo(_ret, vf);

                return taf::JCESERVERSUCCESS;

            }
            case 3:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_checkConfig_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                std::string result;
                _is.read(result, 4, true);
                setResponseContext(msg->response.context);

                callback_checkConfig(_ret, result);

                return taf::JCESERVERSUCCESS;

            }
            case 4:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_checkConfigByInfo_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                std::string result;
                _is.read(result, 2, true);
                setResponseContext(msg->response.context);

                callback_checkConfigByInfo(_ret, result);

                return taf::JCESERVERSUCCESS;

            }
            case 5:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_loadConfig_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                std::string config;
                _is.read(config, 4, true);
                setResponseContext(msg->response.context);

                callback_loadConfig(_ret, config);

                return taf::JCESERVERSUCCESS;

            }
            case 6:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_loadConfigByHost_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                std::string config;
                _is.read(config, 4, true);
                setResponseContext(msg->response.context);

                callback_loadConfigByHost(_ret, config);

                return taf::JCESERVERSUCCESS;

            }
            case 7:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_loadConfigByInfo_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                std::string config;
                _is.read(config, 2, true);
                setResponseContext(msg->response.context);

                callback_loadConfigByInfo(_ret, config);

                return taf::JCESERVERSUCCESS;

            }
        }
        return taf::JCESERVERNOFUNCERR;
    }

    inline int Config::onDispatch(taf::JceCurrentPtr _current, vector<char> &_sResponseBuffer)
    {
        pair<string*, string*> r = equal_range(__taf__Config_all, __taf__Config_all+8, _current->getFuncName());
        if(r.first == r.second) return taf::JCESERVERNOFUNCERR;
        switch(r.first - __taf__Config_all)
        {
            case 0:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                taf::GetConfigListInfo configInfo;
                vector<std::string> vf;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("configInfo", configInfo);
                    tafAttr.getByDefault("vf", vf, vf);
                }
                else
                {
                    _is.read(configInfo, 1, true);
                    _is.read(vf, 2, false);
                }
                taf::Int32 _ret = ListAllConfigByInfo(configInfo,vf, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("vf", vf);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(vf, 2);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 1:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                std::string app;
                std::string server;
                vector<std::string> vf;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("app", app);
                    tafAttr.get("server", server);
                    tafAttr.getByDefault("vf", vf, vf);
                }
                else
                {
                    _is.read(app, 1, true);
                    _is.read(server, 2, true);
                    _is.read(vf, 3, false);
                }
                taf::Int32 _ret = ListConfig(app,server,vf, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("vf", vf);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(vf, 3);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 2:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                taf::ConfigInfo configInfo;
                vector<std::string> vf;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("configInfo", configInfo);
                    tafAttr.getByDefault("vf", vf, vf);
                }
                else
                {
                    _is.read(configInfo, 1, true);
                    _is.read(vf, 2, false);
                }
                taf::Int32 _ret = ListConfigByInfo(configInfo,vf, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("vf", vf);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(vf, 2);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 3:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                std::string appServerName;
                std::string filename;
                std::string host;
                std::string result;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("appServerName", appServerName);
                    tafAttr.get("filename", filename);
                    tafAttr.get("host", host);
                    tafAttr.getByDefault("result", result, result);
                }
                else
                {
                    _is.read(appServerName, 1, true);
                    _is.read(filename, 2, true);
                    _is.read(host, 3, true);
                    _is.read(result, 4, false);
                }
                taf::Int32 _ret = checkConfig(appServerName,filename,host,result, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("result", result);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(result, 4);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 4:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                taf::ConfigInfo configInfo;
                std::string result;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("configInfo", configInfo);
                    tafAttr.getByDefault("result", result, result);
                }
                else
                {
                    _is.read(configInfo, 1, true);
                    _is.read(result, 2, false);
                }
                taf::Int32 _ret = checkConfigByInfo(configInfo,result, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("result", result);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(result, 2);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 5:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                std::string app;
                std::string server;
                std::string filename;
                std::string config;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("app", app);
                    tafAttr.get("server", server);
                    tafAttr.get("filename", filename);
                    tafAttr.getByDefault("config", config, config);
                }
                else
                {
                    _is.read(app, 1, true);
                    _is.read(server, 2, true);
                    _is.read(filename, 3, true);
                    _is.read(config, 4, false);
                }
                taf::Int32 _ret = loadConfig(app,server,filename,config, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("config", config);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(config, 4);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 6:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                std::string appServerName;
                std::string filename;
                std::string host;
                std::string config;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("appServerName", appServerName);
                    tafAttr.get("filename", filename);
                    tafAttr.get("host", host);
                    tafAttr.getByDefault("config", config, config);
                }
                else
                {
                    _is.read(appServerName, 1, true);
                    _is.read(filename, 2, true);
                    _is.read(host, 3, true);
                    _is.read(config, 4, false);
                }
                taf::Int32 _ret = loadConfigByHost(appServerName,filename,host,config, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("config", config);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(config, 4);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 7:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                taf::ConfigInfo configInfo;
                std::string config;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("configInfo", configInfo);
                    tafAttr.getByDefault("config", config, config);
                }
                else
                {
                    _is.read(configInfo, 1, true);
                    _is.read(config, 2, false);
                }
                taf::Int32 _ret = loadConfigByInfo(configInfo,config, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("config", config);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(config, 2);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
        }
        return taf::JCESERVERNOFUNCERR;
    }

} // end namespace taf

#define taf_ConfigInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.appname,b.appname);jce_copy_struct(a.servername,b.servername);jce_copy_struct(a.filename,b.filename);jce_copy_struct(a.bAppOnly,b.bAppOnly);jce_copy_struct(a.host,b.host);jce_copy_struct(a.setdivision,b.setdivision);jce_copy_struct(a.containername,b.containername);

#define taf_GetConfigListInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.appname,b.appname);jce_copy_struct(a.servername,b.servername);jce_copy_struct(a.bAppOnly,b.bAppOnly);jce_copy_struct(a.host,b.host);jce_copy_struct(a.setdivision,b.setdivision);jce_copy_struct(a.containername,b.containername);


#endif

