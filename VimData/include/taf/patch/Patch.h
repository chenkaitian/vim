// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.2.2.11 by WSRD Tencent.
// Generated from `Patch.jce'
// **********************************************************************

#ifndef __PATCH_H_
#define __PATCH_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
#include "jce/wup.h"
#include "servant/BaseF.h"

using namespace wup;
using namespace std;

#include "servant/ServantProxy.h"
#include "servant/Servant.h"
#include "promise/promise.h"


namespace taf
{
    struct FileInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "taf.FileInfo";
        }
        static string MD5()
        {
            return "4ccffa49acefd48e29c01539db437fb0";
        }
        FileInfo()
        :path(""),size(0),canExec(true),md5("")
        {
        }
        void resetDefautlt()
        {
            path = "";
            size = 0;
            canExec = true;
            md5 = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(path, 0);
            _os.write(size, 1);
            _os.write(canExec, 2);
            _os.write(md5, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(path, 0, true);
            _is.read(size, 1, true);
            _is.read(canExec, 2, true);
            _is.read(md5, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(path,"path");
            _ds.display(size,"size");
            _ds.display(canExec,"canExec");
            _ds.display(md5,"md5");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(path, true);
            _ds.displaySimple(size, true);
            _ds.displaySimple(canExec, true);
            _ds.displaySimple(md5, false);
            return _os;
        }
    public:
        std::string path;
        taf::Int32 size;
        taf::Bool canExec;
        std::string md5;
    };
    inline bool operator==(const FileInfo&l, const FileInfo&r)
    {
        return l.path == r.path && l.size == r.size && l.canExec == r.canExec && l.md5 == r.md5;
    }
    inline bool operator!=(const FileInfo&l, const FileInfo&r)
    {
        return !(l == r);
    }

    /* callback of async proxy for client */
    class PatchPrxCallback: public taf::ServantProxyCallback
    {
    public:
        virtual ~PatchPrxCallback(){}
        virtual void callback_listFileInfo(taf::Int32 ret,  const vector<taf::FileInfo>& vf)
        { throw std::runtime_error("callback_listFileInfo() override incorrect."); }
        virtual void callback_listFileInfo_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_listFileInfo_exception() override incorrect."); }

        virtual void callback_download(taf::Int32 ret,  const vector<taf::Char>& vb)
        { throw std::runtime_error("callback_download() override incorrect."); }
        virtual void callback_download_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_download_exception() override incorrect."); }

        virtual void callback_listFileInfoSubborn(taf::Int32 ret,  const vector<taf::FileInfo>& vf)
        { throw std::runtime_error("callback_listFileInfoSubborn() override incorrect."); }
        virtual void callback_listFileInfoSubborn_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_listFileInfoSubborn_exception() override incorrect."); }

        virtual void callback_downloadSubborn(taf::Int32 ret,  const vector<taf::Char>& vb)
        { throw std::runtime_error("callback_downloadSubborn() override incorrect."); }
        virtual void callback_downloadSubborn_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_downloadSubborn_exception() override incorrect."); }

    public:
        virtual const map<std::string, std::string> & getResponseContext() const;

    public:
        virtual int onDispatch(taf::ReqMessagePtr msg);
    };
    typedef taf::TC_AutoPtr<PatchPrxCallback> PatchPrxCallbackPtr;

    /* callback of promise async proxy for client */
    class PatchPrxCallbackPromise: public taf::ServantProxyCallback
    {
    public:
        virtual ~PatchPrxCallbackPromise(){}
    public:
        struct PromiselistFileInfo: virtual public TC_HandleBase
        {
        public:
            taf::Int32 _ret;
            vector<taf::FileInfo> vf;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef taf::TC_AutoPtr< PatchPrxCallbackPromise::PromiselistFileInfo > PromiselistFileInfoPtr;

        PatchPrxCallbackPromise(const promise::Promise< PatchPrxCallbackPromise::PromiselistFileInfoPtr > &promise)
        : _promise_listFileInfo(promise)
        {}
        
        virtual void callback_listFileInfo(const PatchPrxCallbackPromise::PromiselistFileInfoPtr &ptr)
        {
            _promise_listFileInfo.setValue(ptr);
        }
        virtual void callback_listFileInfo_exception(taf::Int32 ret)
        {
            std::string str("");
            str += "Function:listFileInfo_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_listFileInfo.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< PatchPrxCallbackPromise::PromiselistFileInfoPtr > _promise_listFileInfo;

    public:
        struct Promisedownload: virtual public TC_HandleBase
        {
        public:
            taf::Int32 _ret;
            vector<taf::Char> vb;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef taf::TC_AutoPtr< PatchPrxCallbackPromise::Promisedownload > PromisedownloadPtr;

        PatchPrxCallbackPromise(const promise::Promise< PatchPrxCallbackPromise::PromisedownloadPtr > &promise)
        : _promise_download(promise)
        {}
        
        virtual void callback_download(const PatchPrxCallbackPromise::PromisedownloadPtr &ptr)
        {
            _promise_download.setValue(ptr);
        }
        virtual void callback_download_exception(taf::Int32 ret)
        {
            std::string str("");
            str += "Function:download_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_download.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< PatchPrxCallbackPromise::PromisedownloadPtr > _promise_download;

    public:
        struct PromiselistFileInfoSubborn: virtual public TC_HandleBase
        {
        public:
            taf::Int32 _ret;
            vector<taf::FileInfo> vf;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef taf::TC_AutoPtr< PatchPrxCallbackPromise::PromiselistFileInfoSubborn > PromiselistFileInfoSubbornPtr;

        PatchPrxCallbackPromise(const promise::Promise< PatchPrxCallbackPromise::PromiselistFileInfoSubbornPtr > &promise)
        : _promise_listFileInfoSubborn(promise)
        {}
        
        virtual void callback_listFileInfoSubborn(const PatchPrxCallbackPromise::PromiselistFileInfoSubbornPtr &ptr)
        {
            _promise_listFileInfoSubborn.setValue(ptr);
        }
        virtual void callback_listFileInfoSubborn_exception(taf::Int32 ret)
        {
            std::string str("");
            str += "Function:listFileInfoSubborn_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_listFileInfoSubborn.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< PatchPrxCallbackPromise::PromiselistFileInfoSubbornPtr > _promise_listFileInfoSubborn;

    public:
        struct PromisedownloadSubborn: virtual public TC_HandleBase
        {
        public:
            taf::Int32 _ret;
            vector<taf::Char> vb;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef taf::TC_AutoPtr< PatchPrxCallbackPromise::PromisedownloadSubborn > PromisedownloadSubbornPtr;

        PatchPrxCallbackPromise(const promise::Promise< PatchPrxCallbackPromise::PromisedownloadSubbornPtr > &promise)
        : _promise_downloadSubborn(promise)
        {}
        
        virtual void callback_downloadSubborn(const PatchPrxCallbackPromise::PromisedownloadSubbornPtr &ptr)
        {
            _promise_downloadSubborn.setValue(ptr);
        }
        virtual void callback_downloadSubborn_exception(taf::Int32 ret)
        {
            std::string str("");
            str += "Function:downloadSubborn_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_downloadSubborn.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< PatchPrxCallbackPromise::PromisedownloadSubbornPtr > _promise_downloadSubborn;

    public:
        virtual int onDispatch(taf::ReqMessagePtr msg);
    };
    typedef taf::TC_AutoPtr<PatchPrxCallbackPromise> PatchPrxCallbackPromisePtr;

    /* callback of coroutine async proxy for client */
    class PatchCoroPrxCallback: public PatchPrxCallback
    {
    public:
        virtual ~PatchCoroPrxCallback(){}
    public:
        virtual const map<std::string, std::string> & getResponseContext() const { return _mRspContext; }

        virtual void setResponseContext(const map<std::string, std::string> &mContext) { _mRspContext = mContext; }

    public:
        virtual int onDispatch(taf::ReqMessagePtr msg);
    protected:
        map<std::string, std::string> _mRspContext;
    };
    typedef taf::TC_AutoPtr<PatchCoroPrxCallback> PatchCoroPrxCallbackPtr;

    /* proxy for client */
    class PatchProxy : public taf::ServantProxy
    {
    public:
        typedef map<string, string> TAF_CONTEXT;
        taf::Int32 listFileInfo(const std::string & path,vector<taf::FileInfo> &vf,const map<string, string> &context = TAF_CONTEXT(),map<string, string> * pResponseContext = NULL);
        void async_listFileInfo(PatchPrxCallbackPtr callback,const std::string & path,const map<string, string> &context = TAF_CONTEXT());

        promise::Future< PatchPrxCallbackPromise::PromiselistFileInfoPtr > promise_async_listFileInfo(const std::string & path,const map<string, string> &context = TAF_CONTEXT());
        void coro_listFileInfo(PatchCoroPrxCallbackPtr callback,const std::string & path,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 download(const std::string & file,taf::Int32 pos,vector<taf::Char> &vb,const map<string, string> &context = TAF_CONTEXT(),map<string, string> * pResponseContext = NULL);
        void async_download(PatchPrxCallbackPtr callback,const std::string & file,taf::Int32 pos,const map<string, string> &context = TAF_CONTEXT());

        promise::Future< PatchPrxCallbackPromise::PromisedownloadPtr > promise_async_download(const std::string & file,taf::Int32 pos,const map<string, string> &context = TAF_CONTEXT());
        void coro_download(PatchCoroPrxCallbackPtr callback,const std::string & file,taf::Int32 pos,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 listFileInfoSubborn(const std::string & path,vector<taf::FileInfo> &vf,const map<string, string> &context = TAF_CONTEXT(),map<string, string> * pResponseContext = NULL);
        void async_listFileInfoSubborn(PatchPrxCallbackPtr callback,const std::string & path,const map<string, string> &context = TAF_CONTEXT());

        promise::Future< PatchPrxCallbackPromise::PromiselistFileInfoSubbornPtr > promise_async_listFileInfoSubborn(const std::string & path,const map<string, string> &context = TAF_CONTEXT());
        void coro_listFileInfoSubborn(PatchCoroPrxCallbackPtr callback,const std::string & path,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 downloadSubborn(const std::string & file,taf::Int32 pos,vector<taf::Char> &vb,const map<string, string> &context = TAF_CONTEXT(),map<string, string> * pResponseContext = NULL);
        void async_downloadSubborn(PatchPrxCallbackPtr callback,const std::string & file,taf::Int32 pos,const map<string, string> &context = TAF_CONTEXT());

        promise::Future< PatchPrxCallbackPromise::PromisedownloadSubbornPtr > promise_async_downloadSubborn(const std::string & file,taf::Int32 pos,const map<string, string> &context = TAF_CONTEXT());
        void coro_downloadSubborn(PatchCoroPrxCallbackPtr callback,const std::string & file,taf::Int32 pos,const map<string, string> &context = TAF_CONTEXT());

        PatchProxy* taf_hash(int64_t key);
        PatchProxy* taf_consistent_hash(int64_t key);
        PatchProxy* taf_set_timeout(int msecond);
        PatchProxy* taf_loaded();
    };
    typedef taf::TC_AutoPtr<PatchProxy> PatchPrx;

    /* servant for server */
    class Patch : public taf::Servant
    {
    public:
        virtual ~Patch(){}
        virtual taf::Int32 listFileInfo(const std::string & path,vector<taf::FileInfo> &vf,taf::JceCurrentPtr current) = 0;
        static void async_response_listFileInfo(taf::JceCurrentPtr current, taf::Int32 _ret, const vector<taf::FileInfo> &vf);

        virtual taf::Int32 download(const std::string & file,taf::Int32 pos,vector<taf::Char> &vb,taf::JceCurrentPtr current) = 0;
        static void async_response_download(taf::JceCurrentPtr current, taf::Int32 _ret, const vector<taf::Char> &vb);

        virtual taf::Int32 listFileInfoSubborn(const std::string & path,vector<taf::FileInfo> &vf,taf::JceCurrentPtr current) = 0;
        static void async_response_listFileInfoSubborn(taf::JceCurrentPtr current, taf::Int32 _ret, const vector<taf::FileInfo> &vf);

        virtual taf::Int32 downloadSubborn(const std::string & file,taf::Int32 pos,vector<taf::Char> &vb,taf::JceCurrentPtr current) = 0;
        static void async_response_downloadSubborn(taf::JceCurrentPtr current, taf::Int32 _ret, const vector<taf::Char> &vb);

    public:
        int onDispatch(taf::JceCurrentPtr _current, vector<char> &_sResponseBuffer);
    };

    inline taf::Int32 PatchProxy::download(const std::string &file, taf::Int32 pos, vector<taf::Char> &vb, const map<string, string> &context,map<string, string> * pResponseContext)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(file, 1);
        _os.write(pos, 2);
        _os.write(vb, 3);
        taf::ResponsePacket rep;
        std::map<string, string> _mStatus;
        taf_invoke(taf::JCENORMAL,"download", _os.getByteBuffer(), context, _mStatus, rep);
        if(pResponseContext)
        {
            *pResponseContext = rep.context;
        }

        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(vb, 3, true);
        return _ret;
    }

    inline void Patch::async_response_download(taf::JceCurrentPtr current, taf::Int32 _ret, const vector<taf::Char> &vb)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("vb", vb);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(vb, 3);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    inline void PatchProxy::async_download(PatchPrxCallbackPtr callback,const std::string &file,taf::Int32 pos,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(file, 1);
        _os.write(pos, 2);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"download", _os.getByteBuffer(), context, _mStatus, callback);
    }
    
    inline promise::Future< PatchPrxCallbackPromise::PromisedownloadPtr > PatchProxy::promise_async_download(const std::string &file,taf::Int32 pos,const map<string, string>& context)
    {
        promise::Promise< PatchPrxCallbackPromise::PromisedownloadPtr > promise;
        PatchPrxCallbackPromisePtr callback = new PatchPrxCallbackPromise(promise);

        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(file, 1);
        _os.write(pos, 2);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"download", _os.getByteBuffer(), context, _mStatus, callback);

        return promise.getFuture();
    }

    inline void PatchProxy::coro_download(PatchCoroPrxCallbackPtr callback,const std::string &file,taf::Int32 pos,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(file, 1);
        _os.write(pos, 2);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"download", _os.getByteBuffer(), context, _mStatus, callback, true);
    }

    inline taf::Int32 PatchProxy::downloadSubborn(const std::string &file, taf::Int32 pos, vector<taf::Char> &vb, const map<string, string> &context,map<string, string> * pResponseContext)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(file, 1);
        _os.write(pos, 2);
        _os.write(vb, 3);
        taf::ResponsePacket rep;
        std::map<string, string> _mStatus;
        taf_invoke(taf::JCENORMAL,"downloadSubborn", _os.getByteBuffer(), context, _mStatus, rep);
        if(pResponseContext)
        {
            *pResponseContext = rep.context;
        }

        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(vb, 3, true);
        return _ret;
    }

    inline void Patch::async_response_downloadSubborn(taf::JceCurrentPtr current, taf::Int32 _ret, const vector<taf::Char> &vb)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("vb", vb);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(vb, 3);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    inline void PatchProxy::async_downloadSubborn(PatchPrxCallbackPtr callback,const std::string &file,taf::Int32 pos,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(file, 1);
        _os.write(pos, 2);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"downloadSubborn", _os.getByteBuffer(), context, _mStatus, callback);
    }
    
    inline promise::Future< PatchPrxCallbackPromise::PromisedownloadSubbornPtr > PatchProxy::promise_async_downloadSubborn(const std::string &file,taf::Int32 pos,const map<string, string>& context)
    {
        promise::Promise< PatchPrxCallbackPromise::PromisedownloadSubbornPtr > promise;
        PatchPrxCallbackPromisePtr callback = new PatchPrxCallbackPromise(promise);

        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(file, 1);
        _os.write(pos, 2);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"downloadSubborn", _os.getByteBuffer(), context, _mStatus, callback);

        return promise.getFuture();
    }

    inline void PatchProxy::coro_downloadSubborn(PatchCoroPrxCallbackPtr callback,const std::string &file,taf::Int32 pos,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(file, 1);
        _os.write(pos, 2);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"downloadSubborn", _os.getByteBuffer(), context, _mStatus, callback, true);
    }

    inline taf::Int32 PatchProxy::listFileInfo(const std::string &path, vector<taf::FileInfo> &vf, const map<string, string> &context,map<string, string> * pResponseContext)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(path, 1);
        _os.write(vf, 2);
        taf::ResponsePacket rep;
        std::map<string, string> _mStatus;
        taf_invoke(taf::JCENORMAL,"listFileInfo", _os.getByteBuffer(), context, _mStatus, rep);
        if(pResponseContext)
        {
            *pResponseContext = rep.context;
        }

        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(vf, 2, true);
        return _ret;
    }

    inline void Patch::async_response_listFileInfo(taf::JceCurrentPtr current, taf::Int32 _ret, const vector<taf::FileInfo> &vf)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("vf", vf);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(vf, 2);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    inline void PatchProxy::async_listFileInfo(PatchPrxCallbackPtr callback,const std::string &path,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(path, 1);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"listFileInfo", _os.getByteBuffer(), context, _mStatus, callback);
    }
    
    inline promise::Future< PatchPrxCallbackPromise::PromiselistFileInfoPtr > PatchProxy::promise_async_listFileInfo(const std::string &path,const map<string, string>& context)
    {
        promise::Promise< PatchPrxCallbackPromise::PromiselistFileInfoPtr > promise;
        PatchPrxCallbackPromisePtr callback = new PatchPrxCallbackPromise(promise);

        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(path, 1);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"listFileInfo", _os.getByteBuffer(), context, _mStatus, callback);

        return promise.getFuture();
    }

    inline void PatchProxy::coro_listFileInfo(PatchCoroPrxCallbackPtr callback,const std::string &path,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(path, 1);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"listFileInfo", _os.getByteBuffer(), context, _mStatus, callback, true);
    }

    inline taf::Int32 PatchProxy::listFileInfoSubborn(const std::string &path, vector<taf::FileInfo> &vf, const map<string, string> &context,map<string, string> * pResponseContext)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(path, 1);
        _os.write(vf, 2);
        taf::ResponsePacket rep;
        std::map<string, string> _mStatus;
        taf_invoke(taf::JCENORMAL,"listFileInfoSubborn", _os.getByteBuffer(), context, _mStatus, rep);
        if(pResponseContext)
        {
            *pResponseContext = rep.context;
        }

        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(vf, 2, true);
        return _ret;
    }

    inline void Patch::async_response_listFileInfoSubborn(taf::JceCurrentPtr current, taf::Int32 _ret, const vector<taf::FileInfo> &vf)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("vf", vf);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(vf, 2);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    inline void PatchProxy::async_listFileInfoSubborn(PatchPrxCallbackPtr callback,const std::string &path,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(path, 1);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"listFileInfoSubborn", _os.getByteBuffer(), context, _mStatus, callback);
    }
    
    inline promise::Future< PatchPrxCallbackPromise::PromiselistFileInfoSubbornPtr > PatchProxy::promise_async_listFileInfoSubborn(const std::string &path,const map<string, string>& context)
    {
        promise::Promise< PatchPrxCallbackPromise::PromiselistFileInfoSubbornPtr > promise;
        PatchPrxCallbackPromisePtr callback = new PatchPrxCallbackPromise(promise);

        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(path, 1);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"listFileInfoSubborn", _os.getByteBuffer(), context, _mStatus, callback);

        return promise.getFuture();
    }

    inline void PatchProxy::coro_listFileInfoSubborn(PatchCoroPrxCallbackPtr callback,const std::string &path,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(path, 1);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"listFileInfoSubborn", _os.getByteBuffer(), context, _mStatus, callback, true);
    }

    inline PatchProxy* PatchProxy::taf_hash(int64_t key)
    {
        return (PatchProxy*)ServantProxy::taf_hash(key);
    }

    inline PatchProxy* PatchProxy::taf_consistent_hash(int64_t key)
    {
        return (PatchProxy*)ServantProxy::taf_consistent_hash(key);
    }

    inline PatchProxy* PatchProxy::taf_set_timeout(int msecond)
    {
        return (PatchProxy*)ServantProxy::taf_set_timeout(msecond);
    }

    inline PatchProxy* PatchProxy::taf_loaded()
    {
        return (PatchProxy*)ServantProxy::taf_loaded();
    }

    static ::std::string __taf__Patch_all[]=
    {
        "download",
        "downloadSubborn",
        "listFileInfo",
        "listFileInfoSubborn"
    };

    inline const map<std::string, std::string> & PatchPrxCallback::getResponseContext() const
    {
        CallbackThreadData * pCbtd = CallbackThreadData::getData();
        assert(pCbtd != NULL);

        if(!pCbtd->getContextValid())
        {
            throw TC_Exception("cann't get response context");
        }
        return pCbtd->getResponseContext();
    }

    inline int PatchPrxCallback::onDispatch(taf::ReqMessagePtr msg)
    {
        pair<string*, string*> r = equal_range(__taf__Patch_all, __taf__Patch_all+4, string(msg->request.sFuncName));
        if(r.first == r.second) return taf::JCESERVERNOFUNCERR;
        switch(r.first - __taf__Patch_all)
        {
            case 0:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_download_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                vector<taf::Char> vb;
                _is.read(vb, 3, true);
                CallbackThreadData * pCbtd = CallbackThreadData::getData();
                assert(pCbtd != NULL);

                pCbtd->setResponseContext(msg->response.context);

                callback_download(_ret, vb);

                pCbtd->delResponseContext();

                return taf::JCESERVERSUCCESS;

            }
            case 1:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_downloadSubborn_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                vector<taf::Char> vb;
                _is.read(vb, 3, true);
                CallbackThreadData * pCbtd = CallbackThreadData::getData();
                assert(pCbtd != NULL);

                pCbtd->setResponseContext(msg->response.context);

                callback_downloadSubborn(_ret, vb);

                pCbtd->delResponseContext();

                return taf::JCESERVERSUCCESS;

            }
            case 2:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_listFileInfo_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                vector<taf::FileInfo> vf;
                _is.read(vf, 2, true);
                CallbackThreadData * pCbtd = CallbackThreadData::getData();
                assert(pCbtd != NULL);

                pCbtd->setResponseContext(msg->response.context);

                callback_listFileInfo(_ret, vf);

                pCbtd->delResponseContext();

                return taf::JCESERVERSUCCESS;

            }
            case 3:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_listFileInfoSubborn_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                vector<taf::FileInfo> vf;
                _is.read(vf, 2, true);
                CallbackThreadData * pCbtd = CallbackThreadData::getData();
                assert(pCbtd != NULL);

                pCbtd->setResponseContext(msg->response.context);

                callback_listFileInfoSubborn(_ret, vf);

                pCbtd->delResponseContext();

                return taf::JCESERVERSUCCESS;

            }
        }
        return taf::JCESERVERNOFUNCERR;
    }

    inline int PatchPrxCallbackPromise::onDispatch(taf::ReqMessagePtr msg)
    {
        pair<string*, string*> r = equal_range(__taf__Patch_all, __taf__Patch_all+4, string(msg->request.sFuncName));
        if(r.first == r.second) return taf::JCESERVERNOFUNCERR;
        switch(r.first - __taf__Patch_all)
        {
            case 0:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_download_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);

                PatchPrxCallbackPromise::PromisedownloadPtr ptr = new PatchPrxCallbackPromise::Promisedownload();

                _is.read(ptr->_ret, 0, true);

                _is.read(ptr->vb, 3, true);

                ptr->_mRspContext = msg->response.context;

                callback_download(ptr);

                return taf::JCESERVERSUCCESS;

            }
            case 1:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_downloadSubborn_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);

                PatchPrxCallbackPromise::PromisedownloadSubbornPtr ptr = new PatchPrxCallbackPromise::PromisedownloadSubborn();

                _is.read(ptr->_ret, 0, true);

                _is.read(ptr->vb, 3, true);

                ptr->_mRspContext = msg->response.context;

                callback_downloadSubborn(ptr);

                return taf::JCESERVERSUCCESS;

            }
            case 2:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_listFileInfo_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);

                PatchPrxCallbackPromise::PromiselistFileInfoPtr ptr = new PatchPrxCallbackPromise::PromiselistFileInfo();

                _is.read(ptr->_ret, 0, true);

                _is.read(ptr->vf, 2, true);

                ptr->_mRspContext = msg->response.context;

                callback_listFileInfo(ptr);

                return taf::JCESERVERSUCCESS;

            }
            case 3:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_listFileInfoSubborn_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);

                PatchPrxCallbackPromise::PromiselistFileInfoSubbornPtr ptr = new PatchPrxCallbackPromise::PromiselistFileInfoSubborn();

                _is.read(ptr->_ret, 0, true);

                _is.read(ptr->vf, 2, true);

                ptr->_mRspContext = msg->response.context;

                callback_listFileInfoSubborn(ptr);

                return taf::JCESERVERSUCCESS;

            }
        }
        return taf::JCESERVERNOFUNCERR;
    }

    inline int PatchCoroPrxCallback::onDispatch(taf::ReqMessagePtr msg)
    {
        pair<string*, string*> r = equal_range(__taf__Patch_all, __taf__Patch_all+4, string(msg->request.sFuncName));
        if(r.first == r.second) return taf::JCESERVERNOFUNCERR;
        switch(r.first - __taf__Patch_all)
        {
            case 0:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_download_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                vector<taf::Char> vb;
                _is.read(vb, 3, true);
                setResponseContext(msg->response.context);

                callback_download(_ret, vb);

                return taf::JCESERVERSUCCESS;

            }
            case 1:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_downloadSubborn_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                vector<taf::Char> vb;
                _is.read(vb, 3, true);
                setResponseContext(msg->response.context);

                callback_downloadSubborn(_ret, vb);

                return taf::JCESERVERSUCCESS;

            }
            case 2:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_listFileInfo_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                vector<taf::FileInfo> vf;
                _is.read(vf, 2, true);
                setResponseContext(msg->response.context);

                callback_listFileInfo(_ret, vf);

                return taf::JCESERVERSUCCESS;

            }
            case 3:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_listFileInfoSubborn_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                vector<taf::FileInfo> vf;
                _is.read(vf, 2, true);
                setResponseContext(msg->response.context);

                callback_listFileInfoSubborn(_ret, vf);

                return taf::JCESERVERSUCCESS;

            }
        }
        return taf::JCESERVERNOFUNCERR;
    }

    inline int Patch::onDispatch(taf::JceCurrentPtr _current, vector<char> &_sResponseBuffer)
    {
        pair<string*, string*> r = equal_range(__taf__Patch_all, __taf__Patch_all+4, _current->getFuncName());
        if(r.first == r.second) return taf::JCESERVERNOFUNCERR;
        switch(r.first - __taf__Patch_all)
        {
            case 0:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                std::string file;
                taf::Int32 pos;
                vector<taf::Char> vb;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("file", file);
                    tafAttr.get("pos", pos);
                    tafAttr.getByDefault("vb", vb, vb);
                }
                else
                {
                    _is.read(file, 1, true);
                    _is.read(pos, 2, true);
                    _is.read(vb, 3, false);
                }
                taf::Int32 _ret = download(file,pos,vb, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("vb", vb);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(vb, 3);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 1:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                std::string file;
                taf::Int32 pos;
                vector<taf::Char> vb;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("file", file);
                    tafAttr.get("pos", pos);
                    tafAttr.getByDefault("vb", vb, vb);
                }
                else
                {
                    _is.read(file, 1, true);
                    _is.read(pos, 2, true);
                    _is.read(vb, 3, false);
                }
                taf::Int32 _ret = downloadSubborn(file,pos,vb, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("vb", vb);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(vb, 3);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 2:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                std::string path;
                vector<taf::FileInfo> vf;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("path", path);
                    tafAttr.getByDefault("vf", vf, vf);
                }
                else
                {
                    _is.read(path, 1, true);
                    _is.read(vf, 2, false);
                }
                taf::Int32 _ret = listFileInfo(path,vf, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("vf", vf);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(vf, 2);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 3:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                std::string path;
                vector<taf::FileInfo> vf;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("path", path);
                    tafAttr.getByDefault("vf", vf, vf);
                }
                else
                {
                    _is.read(path, 1, true);
                    _is.read(vf, 2, false);
                }
                taf::Int32 _ret = listFileInfoSubborn(path,vf, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("vf", vf);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(vf, 2);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
        }
        return taf::JCESERVERNOFUNCERR;
    }

} // end namespace taf

#define taf_FileInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.path,b.path);jce_copy_struct(a.size,b.size);jce_copy_struct(a.canExec,b.canExec);jce_copy_struct(a.md5,b.md5);


#endif

