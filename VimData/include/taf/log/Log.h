// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.2.2.11 by WSRD Tencent.
// Generated from `Log.jce'
// **********************************************************************

#ifndef __LOG_H_
#define __LOG_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
#include "jce/wup.h"
#include "servant/BaseF.h"

using namespace wup;
using namespace std;

#include "servant/ServantProxy.h"
#include "servant/Servant.h"
#include "promise/promise.h"


namespace taf
{
    struct LogInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "taf.LogInfo";
        }
        static string MD5()
        {
            return "ba09e8605835a4295210919e6b1badc0";
        }
        LogInfo()
        :appname(""),servername(""),sFilename(""),sFormat(""),setdivision(""),bHasSufix(true),bHasAppNamePrefix(true),bHasSquareBracket(false),sConcatStr("_"),sSepar("|"),sLogType("")
        {
        }
        void resetDefautlt()
        {
            appname = "";
            servername = "";
            sFilename = "";
            sFormat = "";
            setdivision = "";
            bHasSufix = true;
            bHasAppNamePrefix = true;
            bHasSquareBracket = false;
            sConcatStr = "_";
            sSepar = "|";
            sLogType = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(appname, 0);
            _os.write(servername, 1);
            _os.write(sFilename, 2);
            _os.write(sFormat, 3);
            _os.write(setdivision, 4);
            _os.write(bHasSufix, 5);
            _os.write(bHasAppNamePrefix, 6);
            _os.write(bHasSquareBracket, 7);
            _os.write(sConcatStr, 8);
            _os.write(sSepar, 9);
            _os.write(sLogType, 10);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(appname, 0, true);
            _is.read(servername, 1, true);
            _is.read(sFilename, 2, true);
            _is.read(sFormat, 3, true);
            _is.read(setdivision, 4, false);
            _is.read(bHasSufix, 5, false);
            _is.read(bHasAppNamePrefix, 6, false);
            _is.read(bHasSquareBracket, 7, false);
            _is.read(sConcatStr, 8, false);
            _is.read(sSepar, 9, false);
            _is.read(sLogType, 10, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(appname,"appname");
            _ds.display(servername,"servername");
            _ds.display(sFilename,"sFilename");
            _ds.display(sFormat,"sFormat");
            _ds.display(setdivision,"setdivision");
            _ds.display(bHasSufix,"bHasSufix");
            _ds.display(bHasAppNamePrefix,"bHasAppNamePrefix");
            _ds.display(bHasSquareBracket,"bHasSquareBracket");
            _ds.display(sConcatStr,"sConcatStr");
            _ds.display(sSepar,"sSepar");
            _ds.display(sLogType,"sLogType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(appname, true);
            _ds.displaySimple(servername, true);
            _ds.displaySimple(sFilename, true);
            _ds.displaySimple(sFormat, true);
            _ds.displaySimple(setdivision, true);
            _ds.displaySimple(bHasSufix, true);
            _ds.displaySimple(bHasAppNamePrefix, true);
            _ds.displaySimple(bHasSquareBracket, true);
            _ds.displaySimple(sConcatStr, true);
            _ds.displaySimple(sSepar, true);
            _ds.displaySimple(sLogType, false);
            return _os;
        }
    public:
        std::string appname;
        std::string servername;
        std::string sFilename;
        std::string sFormat;
        std::string setdivision;
        taf::Bool bHasSufix;
        taf::Bool bHasAppNamePrefix;
        taf::Bool bHasSquareBracket;
        std::string sConcatStr;
        std::string sSepar;
        std::string sLogType;
    };
    inline bool operator==(const LogInfo&l, const LogInfo&r)
    {
        return l.appname == r.appname && l.servername == r.servername && l.sFilename == r.sFilename && l.sFormat == r.sFormat && l.setdivision == r.setdivision && l.bHasSufix == r.bHasSufix && l.bHasAppNamePrefix == r.bHasAppNamePrefix && l.bHasSquareBracket == r.bHasSquareBracket && l.sConcatStr == r.sConcatStr && l.sSepar == r.sSepar && l.sLogType == r.sLogType;
    }
    inline bool operator!=(const LogInfo&l, const LogInfo&r)
    {
        return !(l == r);
    }

    /* callback of async proxy for client */
    class LogPrxCallback: public taf::ServantProxyCallback
    {
    public:
        virtual ~LogPrxCallback(){}
        virtual void callback_logger()
        { throw std::runtime_error("callback_logger() override incorrect."); }
        virtual void callback_logger_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_logger_exception() override incorrect."); }

        virtual void callback_loggerbyInfo()
        { throw std::runtime_error("callback_loggerbyInfo() override incorrect."); }
        virtual void callback_loggerbyInfo_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_loggerbyInfo_exception() override incorrect."); }

    public:
        virtual const map<std::string, std::string> & getResponseContext() const;

    public:
        virtual int onDispatch(taf::ReqMessagePtr msg);
    };
    typedef taf::TC_AutoPtr<LogPrxCallback> LogPrxCallbackPtr;

    /* callback of promise async proxy for client */
    class LogPrxCallbackPromise: public taf::ServantProxyCallback
    {
    public:
        virtual ~LogPrxCallbackPromise(){}
    public:
        struct Promiselogger: virtual public TC_HandleBase
        {
        public:
            map<std::string, std::string> _mRspContext;
        };
        
        typedef taf::TC_AutoPtr< LogPrxCallbackPromise::Promiselogger > PromiseloggerPtr;

        LogPrxCallbackPromise(const promise::Promise< LogPrxCallbackPromise::PromiseloggerPtr > &promise)
        : _promise_logger(promise)
        {}
        
        virtual void callback_logger(const LogPrxCallbackPromise::PromiseloggerPtr &ptr)
        {
            _promise_logger.setValue(ptr);
        }
        virtual void callback_logger_exception(taf::Int32 ret)
        {
            std::string str("");
            str += "Function:logger_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_logger.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< LogPrxCallbackPromise::PromiseloggerPtr > _promise_logger;

    public:
        struct PromiseloggerbyInfo: virtual public TC_HandleBase
        {
        public:
            map<std::string, std::string> _mRspContext;
        };
        
        typedef taf::TC_AutoPtr< LogPrxCallbackPromise::PromiseloggerbyInfo > PromiseloggerbyInfoPtr;

        LogPrxCallbackPromise(const promise::Promise< LogPrxCallbackPromise::PromiseloggerbyInfoPtr > &promise)
        : _promise_loggerbyInfo(promise)
        {}
        
        virtual void callback_loggerbyInfo(const LogPrxCallbackPromise::PromiseloggerbyInfoPtr &ptr)
        {
            _promise_loggerbyInfo.setValue(ptr);
        }
        virtual void callback_loggerbyInfo_exception(taf::Int32 ret)
        {
            std::string str("");
            str += "Function:loggerbyInfo_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_loggerbyInfo.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< LogPrxCallbackPromise::PromiseloggerbyInfoPtr > _promise_loggerbyInfo;

    public:
        virtual int onDispatch(taf::ReqMessagePtr msg);
    };
    typedef taf::TC_AutoPtr<LogPrxCallbackPromise> LogPrxCallbackPromisePtr;

    /* callback of coroutine async proxy for client */
    class LogCoroPrxCallback: public LogPrxCallback
    {
    public:
        virtual ~LogCoroPrxCallback(){}
    public:
        virtual const map<std::string, std::string> & getResponseContext() const { return _mRspContext; }

        virtual void setResponseContext(const map<std::string, std::string> &mContext) { _mRspContext = mContext; }

    public:
        virtual int onDispatch(taf::ReqMessagePtr msg);
    protected:
        map<std::string, std::string> _mRspContext;
    };
    typedef taf::TC_AutoPtr<LogCoroPrxCallback> LogCoroPrxCallbackPtr;

    /* proxy for client */
    class LogProxy : public taf::ServantProxy
    {
    public:
        typedef map<string, string> TAF_CONTEXT;
        void logger(const std::string & app,const std::string & server,const std::string & file,const std::string & format,const vector<std::string> & buffer,const map<string, string> &context = TAF_CONTEXT(),map<string, string> * pResponseContext = NULL);
        void async_logger(LogPrxCallbackPtr callback,const std::string & app,const std::string & server,const std::string & file,const std::string & format,const vector<std::string> & buffer,const map<string, string> &context = TAF_CONTEXT());

        promise::Future< LogPrxCallbackPromise::PromiseloggerPtr > promise_async_logger(const std::string & app,const std::string & server,const std::string & file,const std::string & format,const vector<std::string> & buffer,const map<string, string> &context = TAF_CONTEXT());
        void coro_logger(LogCoroPrxCallbackPtr callback,const std::string & app,const std::string & server,const std::string & file,const std::string & format,const vector<std::string> & buffer,const map<string, string> &context = TAF_CONTEXT());

        void loggerbyInfo(const taf::LogInfo & info,const vector<std::string> & buffer,const map<string, string> &context = TAF_CONTEXT(),map<string, string> * pResponseContext = NULL);
        void async_loggerbyInfo(LogPrxCallbackPtr callback,const taf::LogInfo & info,const vector<std::string> & buffer,const map<string, string> &context = TAF_CONTEXT());

        promise::Future< LogPrxCallbackPromise::PromiseloggerbyInfoPtr > promise_async_loggerbyInfo(const taf::LogInfo & info,const vector<std::string> & buffer,const map<string, string> &context = TAF_CONTEXT());
        void coro_loggerbyInfo(LogCoroPrxCallbackPtr callback,const taf::LogInfo & info,const vector<std::string> & buffer,const map<string, string> &context = TAF_CONTEXT());

        LogProxy* taf_hash(int64_t key);
        LogProxy* taf_consistent_hash(int64_t key);
        LogProxy* taf_set_timeout(int msecond);
        LogProxy* taf_loaded();
    };
    typedef taf::TC_AutoPtr<LogProxy> LogPrx;

    /* servant for server */
    class Log : public taf::Servant
    {
    public:
        virtual ~Log(){}
        virtual void logger(const std::string & app,const std::string & server,const std::string & file,const std::string & format,const vector<std::string> & buffer,taf::JceCurrentPtr current) = 0;
        static void async_response_logger(taf::JceCurrentPtr current);

        virtual void loggerbyInfo(const taf::LogInfo & info,const vector<std::string> & buffer,taf::JceCurrentPtr current) = 0;
        static void async_response_loggerbyInfo(taf::JceCurrentPtr current);

    public:
        int onDispatch(taf::JceCurrentPtr _current, vector<char> &_sResponseBuffer);
    };

    inline void LogProxy::logger(const std::string &app, const std::string &server, const std::string &file, const std::string &format, const vector<std::string> &buffer, const map<string, string> &context,map<string, string> * pResponseContext)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(app, 1);
        _os.write(server, 2);
        _os.write(file, 3);
        _os.write(format, 4);
        _os.write(buffer, 5);
        taf::ResponsePacket rep;
        std::map<string, string> _mStatus;
        taf_invoke(taf::JCENORMAL,"logger", _os.getByteBuffer(), context, _mStatus, rep);
        if(pResponseContext)
        {
            *pResponseContext = rep.context;
        }

        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
    }

    inline void Log::async_response_logger(taf::JceCurrentPtr current)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    inline void LogProxy::async_logger(LogPrxCallbackPtr callback,const std::string &app,const std::string &server,const std::string &file,const std::string &format,const vector<std::string> &buffer,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(app, 1);
        _os.write(server, 2);
        _os.write(file, 3);
        _os.write(format, 4);
        _os.write(buffer, 5);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"logger", _os.getByteBuffer(), context, _mStatus, callback);
    }
    
    inline promise::Future< LogPrxCallbackPromise::PromiseloggerPtr > LogProxy::promise_async_logger(const std::string &app,const std::string &server,const std::string &file,const std::string &format,const vector<std::string> &buffer,const map<string, string>& context)
    {
        promise::Promise< LogPrxCallbackPromise::PromiseloggerPtr > promise;
        LogPrxCallbackPromisePtr callback = new LogPrxCallbackPromise(promise);

        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(app, 1);
        _os.write(server, 2);
        _os.write(file, 3);
        _os.write(format, 4);
        _os.write(buffer, 5);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"logger", _os.getByteBuffer(), context, _mStatus, callback);

        return promise.getFuture();
    }

    inline void LogProxy::coro_logger(LogCoroPrxCallbackPtr callback,const std::string &app,const std::string &server,const std::string &file,const std::string &format,const vector<std::string> &buffer,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(app, 1);
        _os.write(server, 2);
        _os.write(file, 3);
        _os.write(format, 4);
        _os.write(buffer, 5);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"logger", _os.getByteBuffer(), context, _mStatus, callback, true);
    }

    inline void LogProxy::loggerbyInfo(const taf::LogInfo &info, const vector<std::string> &buffer, const map<string, string> &context,map<string, string> * pResponseContext)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(info, 1);
        _os.write(buffer, 2);
        taf::ResponsePacket rep;
        std::map<string, string> _mStatus;
        taf_invoke(taf::JCENORMAL,"loggerbyInfo", _os.getByteBuffer(), context, _mStatus, rep);
        if(pResponseContext)
        {
            *pResponseContext = rep.context;
        }

        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
    }

    inline void Log::async_response_loggerbyInfo(taf::JceCurrentPtr current)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    inline void LogProxy::async_loggerbyInfo(LogPrxCallbackPtr callback,const taf::LogInfo &info,const vector<std::string> &buffer,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(info, 1);
        _os.write(buffer, 2);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"loggerbyInfo", _os.getByteBuffer(), context, _mStatus, callback);
    }
    
    inline promise::Future< LogPrxCallbackPromise::PromiseloggerbyInfoPtr > LogProxy::promise_async_loggerbyInfo(const taf::LogInfo &info,const vector<std::string> &buffer,const map<string, string>& context)
    {
        promise::Promise< LogPrxCallbackPromise::PromiseloggerbyInfoPtr > promise;
        LogPrxCallbackPromisePtr callback = new LogPrxCallbackPromise(promise);

        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(info, 1);
        _os.write(buffer, 2);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"loggerbyInfo", _os.getByteBuffer(), context, _mStatus, callback);

        return promise.getFuture();
    }

    inline void LogProxy::coro_loggerbyInfo(LogCoroPrxCallbackPtr callback,const taf::LogInfo &info,const vector<std::string> &buffer,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(info, 1);
        _os.write(buffer, 2);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"loggerbyInfo", _os.getByteBuffer(), context, _mStatus, callback, true);
    }

    inline LogProxy* LogProxy::taf_hash(int64_t key)
    {
        return (LogProxy*)ServantProxy::taf_hash(key);
    }

    inline LogProxy* LogProxy::taf_consistent_hash(int64_t key)
    {
        return (LogProxy*)ServantProxy::taf_consistent_hash(key);
    }

    inline LogProxy* LogProxy::taf_set_timeout(int msecond)
    {
        return (LogProxy*)ServantProxy::taf_set_timeout(msecond);
    }

    inline LogProxy* LogProxy::taf_loaded()
    {
        return (LogProxy*)ServantProxy::taf_loaded();
    }

    static ::std::string __taf__Log_all[]=
    {
        "logger",
        "loggerbyInfo"
    };

    inline const map<std::string, std::string> & LogPrxCallback::getResponseContext() const
    {
        CallbackThreadData * pCbtd = CallbackThreadData::getData();
        assert(pCbtd != NULL);

        if(!pCbtd->getContextValid())
        {
            throw TC_Exception("cann't get response context");
        }
        return pCbtd->getResponseContext();
    }

    inline int LogPrxCallback::onDispatch(taf::ReqMessagePtr msg)
    {
        pair<string*, string*> r = equal_range(__taf__Log_all, __taf__Log_all+2, string(msg->request.sFuncName));
        if(r.first == r.second) return taf::JCESERVERNOFUNCERR;
        switch(r.first - __taf__Log_all)
        {
            case 0:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_logger_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                CallbackThreadData * pCbtd = CallbackThreadData::getData();
                assert(pCbtd != NULL);

                pCbtd->setResponseContext(msg->response.context);

                callback_logger();

                pCbtd->delResponseContext();

                return taf::JCESERVERSUCCESS;

            }
            case 1:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_loggerbyInfo_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                CallbackThreadData * pCbtd = CallbackThreadData::getData();
                assert(pCbtd != NULL);

                pCbtd->setResponseContext(msg->response.context);

                callback_loggerbyInfo();

                pCbtd->delResponseContext();

                return taf::JCESERVERSUCCESS;

            }
        }
        return taf::JCESERVERNOFUNCERR;
    }

    inline int LogPrxCallbackPromise::onDispatch(taf::ReqMessagePtr msg)
    {
        pair<string*, string*> r = equal_range(__taf__Log_all, __taf__Log_all+2, string(msg->request.sFuncName));
        if(r.first == r.second) return taf::JCESERVERNOFUNCERR;
        switch(r.first - __taf__Log_all)
        {
            case 0:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_logger_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);

                LogPrxCallbackPromise::PromiseloggerPtr ptr = new LogPrxCallbackPromise::Promiselogger();


                ptr->_mRspContext = msg->response.context;

                callback_logger(ptr);

                return taf::JCESERVERSUCCESS;

            }
            case 1:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_loggerbyInfo_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);

                LogPrxCallbackPromise::PromiseloggerbyInfoPtr ptr = new LogPrxCallbackPromise::PromiseloggerbyInfo();


                ptr->_mRspContext = msg->response.context;

                callback_loggerbyInfo(ptr);

                return taf::JCESERVERSUCCESS;

            }
        }
        return taf::JCESERVERNOFUNCERR;
    }

    inline int LogCoroPrxCallback::onDispatch(taf::ReqMessagePtr msg)
    {
        pair<string*, string*> r = equal_range(__taf__Log_all, __taf__Log_all+2, string(msg->request.sFuncName));
        if(r.first == r.second) return taf::JCESERVERNOFUNCERR;
        switch(r.first - __taf__Log_all)
        {
            case 0:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_logger_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                setResponseContext(msg->response.context);

                callback_logger();

                return taf::JCESERVERSUCCESS;

            }
            case 1:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_loggerbyInfo_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                setResponseContext(msg->response.context);

                callback_loggerbyInfo();

                return taf::JCESERVERSUCCESS;

            }
        }
        return taf::JCESERVERNOFUNCERR;
    }

    inline int Log::onDispatch(taf::JceCurrentPtr _current, vector<char> &_sResponseBuffer)
    {
        pair<string*, string*> r = equal_range(__taf__Log_all, __taf__Log_all+2, _current->getFuncName());
        if(r.first == r.second) return taf::JCESERVERNOFUNCERR;
        switch(r.first - __taf__Log_all)
        {
            case 0:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                std::string app;
                std::string server;
                std::string file;
                std::string format;
                vector<std::string> buffer;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("app", app);
                    tafAttr.get("server", server);
                    tafAttr.get("file", file);
                    tafAttr.get("format", format);
                    tafAttr.get("buffer", buffer);
                }
                else
                {
                    _is.read(app, 1, true);
                    _is.read(server, 2, true);
                    _is.read(file, 3, true);
                    _is.read(format, 4, true);
                    _is.read(buffer, 5, true);
                }
                logger(app,server,file,format,buffer, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 1:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                taf::LogInfo info;
                vector<std::string> buffer;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("info", info);
                    tafAttr.get("buffer", buffer);
                }
                else
                {
                    _is.read(info, 1, true);
                    _is.read(buffer, 2, true);
                }
                loggerbyInfo(info,buffer, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
        }
        return taf::JCESERVERNOFUNCERR;
    }

} // end namespace taf

#define taf_LogInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.appname,b.appname);jce_copy_struct(a.servername,b.servername);jce_copy_struct(a.sFilename,b.sFilename);jce_copy_struct(a.sFormat,b.sFormat);jce_copy_struct(a.setdivision,b.setdivision);jce_copy_struct(a.bHasSufix,b.bHasSufix);jce_copy_struct(a.bHasAppNamePrefix,b.bHasAppNamePrefix);jce_copy_struct(a.bHasSquareBracket,b.bHasSquareBracket);jce_copy_struct(a.sConcatStr,b.sConcatStr);jce_copy_struct(a.sSepar,b.sSepar);jce_copy_struct(a.sLogType,b.sLogType);


#endif

