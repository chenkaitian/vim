// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.2.2.11 by WSRD Tencent.
// Generated from `NodeF.jce'
// **********************************************************************

#ifndef __NODEF_H_
#define __NODEF_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
#include "jce/wup.h"
#include "servant/BaseF.h"

using namespace wup;
using namespace std;

#include "judg.h"
#include "servant/ServantProxy.h"
#include "servant/Servant.h"
#include "promise/promise.h"


namespace taf
{
    struct ServerInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "taf.ServerInfo";
        }
        static string MD5()
        {
            return "76d54bea80731d58aa96cf1bc08352d0";
        }
        ServerInfo()
        :application(""),serverName(""),pid(0),adapter(""),moduleType("taf"),container("")
        {
        }
        void resetDefautlt()
        {
            application = "";
            serverName = "";
            pid = 0;
            adapter = "";
            moduleType = "taf";
            container = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(application, 0);
            _os.write(serverName, 1);
            _os.write(pid, 2);
            _os.write(adapter, 3);
            _os.write(moduleType, 4);
            _os.write(container, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(application, 0, true);
            _is.read(serverName, 1, true);
            _is.read(pid, 2, true);
            _is.read(adapter, 3, false);
            _is.read(moduleType, 4, false);
            _is.read(container, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(application,"application");
            _ds.display(serverName,"serverName");
            _ds.display(pid,"pid");
            _ds.display(adapter,"adapter");
            _ds.display(moduleType,"moduleType");
            _ds.display(container,"container");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(application, true);
            _ds.displaySimple(serverName, true);
            _ds.displaySimple(pid, true);
            _ds.displaySimple(adapter, true);
            _ds.displaySimple(moduleType, true);
            _ds.displaySimple(container, false);
            return _os;
        }
    public:
        std::string application;
        std::string serverName;
        taf::Int32 pid;
        std::string adapter;
        std::string moduleType;
        std::string container;
    };
    inline bool operator==(const ServerInfo&l, const ServerInfo&r)
    {
        return l.application == r.application && l.serverName == r.serverName && l.pid == r.pid && l.adapter == r.adapter && l.moduleType == r.moduleType && l.container == r.container;
    }
    inline bool operator!=(const ServerInfo&l, const ServerInfo&r)
    {
        return !(l == r);
    }

    /* callback of async proxy for client */
    class ServerFPrxCallback: public taf::ServantProxyCallback
    {
    public:
        virtual ~ServerFPrxCallback(){}
        virtual void callback_keepAlive(taf::Int32 ret)
        { throw std::runtime_error("callback_keepAlive() override incorrect."); }
        virtual void callback_keepAlive_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_keepAlive_exception() override incorrect."); }

        virtual void callback_reportVersion(taf::Int32 ret)
        { throw std::runtime_error("callback_reportVersion() override incorrect."); }
        virtual void callback_reportVersion_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_reportVersion_exception() override incorrect."); }

        virtual void callback_getNodeLoadInfo(taf::Int32 ret,  const TafAuto::HighNodeInfo& highNodeInfo)
        { throw std::runtime_error("callback_getNodeLoadInfo() override incorrect."); }
        virtual void callback_getNodeLoadInfo_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_getNodeLoadInfo_exception() override incorrect."); }

    public:
        virtual const map<std::string, std::string> & getResponseContext() const;

    public:
        virtual int onDispatch(taf::ReqMessagePtr msg);
    };
    typedef taf::TC_AutoPtr<ServerFPrxCallback> ServerFPrxCallbackPtr;

    /* callback of promise async proxy for client */
    class ServerFPrxCallbackPromise: public taf::ServantProxyCallback
    {
    public:
        virtual ~ServerFPrxCallbackPromise(){}
    public:
        struct PromisekeepAlive: virtual public TC_HandleBase
        {
        public:
            taf::Int32 _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef taf::TC_AutoPtr< ServerFPrxCallbackPromise::PromisekeepAlive > PromisekeepAlivePtr;

        ServerFPrxCallbackPromise(const promise::Promise< ServerFPrxCallbackPromise::PromisekeepAlivePtr > &promise)
        : _promise_keepAlive(promise)
        {}
        
        virtual void callback_keepAlive(const ServerFPrxCallbackPromise::PromisekeepAlivePtr &ptr)
        {
            _promise_keepAlive.setValue(ptr);
        }
        virtual void callback_keepAlive_exception(taf::Int32 ret)
        {
            std::string str("");
            str += "Function:keepAlive_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_keepAlive.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< ServerFPrxCallbackPromise::PromisekeepAlivePtr > _promise_keepAlive;

    public:
        struct PromisereportVersion: virtual public TC_HandleBase
        {
        public:
            taf::Int32 _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef taf::TC_AutoPtr< ServerFPrxCallbackPromise::PromisereportVersion > PromisereportVersionPtr;

        ServerFPrxCallbackPromise(const promise::Promise< ServerFPrxCallbackPromise::PromisereportVersionPtr > &promise)
        : _promise_reportVersion(promise)
        {}
        
        virtual void callback_reportVersion(const ServerFPrxCallbackPromise::PromisereportVersionPtr &ptr)
        {
            _promise_reportVersion.setValue(ptr);
        }
        virtual void callback_reportVersion_exception(taf::Int32 ret)
        {
            std::string str("");
            str += "Function:reportVersion_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_reportVersion.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< ServerFPrxCallbackPromise::PromisereportVersionPtr > _promise_reportVersion;

    public:
        struct PromisegetNodeLoadInfo: virtual public TC_HandleBase
        {
        public:
            taf::Int32 _ret;
            TafAuto::HighNodeInfo highNodeInfo;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef taf::TC_AutoPtr< ServerFPrxCallbackPromise::PromisegetNodeLoadInfo > PromisegetNodeLoadInfoPtr;

        ServerFPrxCallbackPromise(const promise::Promise< ServerFPrxCallbackPromise::PromisegetNodeLoadInfoPtr > &promise)
        : _promise_getNodeLoadInfo(promise)
        {}
        
        virtual void callback_getNodeLoadInfo(const ServerFPrxCallbackPromise::PromisegetNodeLoadInfoPtr &ptr)
        {
            _promise_getNodeLoadInfo.setValue(ptr);
        }
        virtual void callback_getNodeLoadInfo_exception(taf::Int32 ret)
        {
            std::string str("");
            str += "Function:getNodeLoadInfo_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_getNodeLoadInfo.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< ServerFPrxCallbackPromise::PromisegetNodeLoadInfoPtr > _promise_getNodeLoadInfo;

    public:
        virtual int onDispatch(taf::ReqMessagePtr msg);
    };
    typedef taf::TC_AutoPtr<ServerFPrxCallbackPromise> ServerFPrxCallbackPromisePtr;

    /* callback of coroutine async proxy for client */
    class ServerFCoroPrxCallback: public ServerFPrxCallback
    {
    public:
        virtual ~ServerFCoroPrxCallback(){}
    public:
        virtual const map<std::string, std::string> & getResponseContext() const { return _mRspContext; }

        virtual void setResponseContext(const map<std::string, std::string> &mContext) { _mRspContext = mContext; }

    public:
        virtual int onDispatch(taf::ReqMessagePtr msg);
    protected:
        map<std::string, std::string> _mRspContext;
    };
    typedef taf::TC_AutoPtr<ServerFCoroPrxCallback> ServerFCoroPrxCallbackPtr;

    /* proxy for client */
    class ServerFProxy : public taf::ServantProxy
    {
    public:
        typedef map<string, string> TAF_CONTEXT;
        taf::Int32 keepAlive(const taf::ServerInfo & serverInfo,const map<string, string> &context = TAF_CONTEXT(),map<string, string> * pResponseContext = NULL);
        void async_keepAlive(ServerFPrxCallbackPtr callback,const taf::ServerInfo & serverInfo,const map<string, string> &context = TAF_CONTEXT());

        promise::Future< ServerFPrxCallbackPromise::PromisekeepAlivePtr > promise_async_keepAlive(const taf::ServerInfo & serverInfo,const map<string, string> &context = TAF_CONTEXT());
        void coro_keepAlive(ServerFCoroPrxCallbackPtr callback,const taf::ServerInfo & serverInfo,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 reportVersion(const std::string & app,const std::string & serverName,const std::string & version,const map<string, string> &context = TAF_CONTEXT(),map<string, string> * pResponseContext = NULL);
        void async_reportVersion(ServerFPrxCallbackPtr callback,const std::string & app,const std::string & serverName,const std::string & version,const map<string, string> &context = TAF_CONTEXT());

        promise::Future< ServerFPrxCallbackPromise::PromisereportVersionPtr > promise_async_reportVersion(const std::string & app,const std::string & serverName,const std::string & version,const map<string, string> &context = TAF_CONTEXT());
        void coro_reportVersion(ServerFCoroPrxCallbackPtr callback,const std::string & app,const std::string & serverName,const std::string & version,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 getNodeLoadInfo(TafAuto::HighNodeInfo &highNodeInfo,const map<string, string> &context = TAF_CONTEXT(),map<string, string> * pResponseContext = NULL);
        void async_getNodeLoadInfo(ServerFPrxCallbackPtr callback,const map<string, string> &context = TAF_CONTEXT());

        promise::Future< ServerFPrxCallbackPromise::PromisegetNodeLoadInfoPtr > promise_async_getNodeLoadInfo(const map<string, string> &context = TAF_CONTEXT());
        void coro_getNodeLoadInfo(ServerFCoroPrxCallbackPtr callback,const map<string, string> &context = TAF_CONTEXT());

        ServerFProxy* taf_hash(int64_t key);
        ServerFProxy* taf_consistent_hash(int64_t key);
        ServerFProxy* taf_set_timeout(int msecond);
        ServerFProxy* taf_loaded();
    };
    typedef taf::TC_AutoPtr<ServerFProxy> ServerFPrx;

    /* servant for server */
    class ServerF : public taf::Servant
    {
    public:
        virtual ~ServerF(){}
        virtual taf::Int32 keepAlive(const taf::ServerInfo & serverInfo,taf::JceCurrentPtr current) = 0;
        static void async_response_keepAlive(taf::JceCurrentPtr current, taf::Int32 _ret);

        virtual taf::Int32 reportVersion(const std::string & app,const std::string & serverName,const std::string & version,taf::JceCurrentPtr current) = 0;
        static void async_response_reportVersion(taf::JceCurrentPtr current, taf::Int32 _ret);

        virtual taf::Int32 getNodeLoadInfo(TafAuto::HighNodeInfo &highNodeInfo,taf::JceCurrentPtr current) = 0;
        static void async_response_getNodeLoadInfo(taf::JceCurrentPtr current, taf::Int32 _ret, const TafAuto::HighNodeInfo &highNodeInfo);

    public:
        int onDispatch(taf::JceCurrentPtr _current, vector<char> &_sResponseBuffer);
    };

    inline taf::Int32 ServerFProxy::getNodeLoadInfo(TafAuto::HighNodeInfo &highNodeInfo, const map<string, string> &context,map<string, string> * pResponseContext)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(highNodeInfo, 1);
        taf::ResponsePacket rep;
        std::map<string, string> _mStatus;
        taf_invoke(taf::JCENORMAL,"getNodeLoadInfo", _os.getByteBuffer(), context, _mStatus, rep);
        if(pResponseContext)
        {
            *pResponseContext = rep.context;
        }

        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(highNodeInfo, 1, true);
        return _ret;
    }

    inline void ServerF::async_response_getNodeLoadInfo(taf::JceCurrentPtr current, taf::Int32 _ret, const TafAuto::HighNodeInfo &highNodeInfo)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("highNodeInfo", highNodeInfo);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(highNodeInfo, 1);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    inline void ServerFProxy::async_getNodeLoadInfo(ServerFPrxCallbackPtr callback,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"getNodeLoadInfo", _os.getByteBuffer(), context, _mStatus, callback);
    }
    
    inline promise::Future< ServerFPrxCallbackPromise::PromisegetNodeLoadInfoPtr > ServerFProxy::promise_async_getNodeLoadInfo(const map<string, string>& context)
    {
        promise::Promise< ServerFPrxCallbackPromise::PromisegetNodeLoadInfoPtr > promise;
        ServerFPrxCallbackPromisePtr callback = new ServerFPrxCallbackPromise(promise);

        taf::JceOutputStream<taf::BufferWriter> _os;
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"getNodeLoadInfo", _os.getByteBuffer(), context, _mStatus, callback);

        return promise.getFuture();
    }

    inline void ServerFProxy::coro_getNodeLoadInfo(ServerFCoroPrxCallbackPtr callback,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"getNodeLoadInfo", _os.getByteBuffer(), context, _mStatus, callback, true);
    }

    inline taf::Int32 ServerFProxy::keepAlive(const taf::ServerInfo &serverInfo, const map<string, string> &context,map<string, string> * pResponseContext)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(serverInfo, 1);
        taf::ResponsePacket rep;
        std::map<string, string> _mStatus;
        taf_invoke(taf::JCENORMAL,"keepAlive", _os.getByteBuffer(), context, _mStatus, rep);
        if(pResponseContext)
        {
            *pResponseContext = rep.context;
        }

        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        return _ret;
    }

    inline void ServerF::async_response_keepAlive(taf::JceCurrentPtr current, taf::Int32 _ret)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    inline void ServerFProxy::async_keepAlive(ServerFPrxCallbackPtr callback,const taf::ServerInfo &serverInfo,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(serverInfo, 1);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"keepAlive", _os.getByteBuffer(), context, _mStatus, callback);
    }
    
    inline promise::Future< ServerFPrxCallbackPromise::PromisekeepAlivePtr > ServerFProxy::promise_async_keepAlive(const taf::ServerInfo &serverInfo,const map<string, string>& context)
    {
        promise::Promise< ServerFPrxCallbackPromise::PromisekeepAlivePtr > promise;
        ServerFPrxCallbackPromisePtr callback = new ServerFPrxCallbackPromise(promise);

        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(serverInfo, 1);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"keepAlive", _os.getByteBuffer(), context, _mStatus, callback);

        return promise.getFuture();
    }

    inline void ServerFProxy::coro_keepAlive(ServerFCoroPrxCallbackPtr callback,const taf::ServerInfo &serverInfo,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(serverInfo, 1);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"keepAlive", _os.getByteBuffer(), context, _mStatus, callback, true);
    }

    inline taf::Int32 ServerFProxy::reportVersion(const std::string &app, const std::string &serverName, const std::string &version, const map<string, string> &context,map<string, string> * pResponseContext)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(app, 1);
        _os.write(serverName, 2);
        _os.write(version, 3);
        taf::ResponsePacket rep;
        std::map<string, string> _mStatus;
        taf_invoke(taf::JCENORMAL,"reportVersion", _os.getByteBuffer(), context, _mStatus, rep);
        if(pResponseContext)
        {
            *pResponseContext = rep.context;
        }

        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        return _ret;
    }

    inline void ServerF::async_response_reportVersion(taf::JceCurrentPtr current, taf::Int32 _ret)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    inline void ServerFProxy::async_reportVersion(ServerFPrxCallbackPtr callback,const std::string &app,const std::string &serverName,const std::string &version,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(app, 1);
        _os.write(serverName, 2);
        _os.write(version, 3);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"reportVersion", _os.getByteBuffer(), context, _mStatus, callback);
    }
    
    inline promise::Future< ServerFPrxCallbackPromise::PromisereportVersionPtr > ServerFProxy::promise_async_reportVersion(const std::string &app,const std::string &serverName,const std::string &version,const map<string, string>& context)
    {
        promise::Promise< ServerFPrxCallbackPromise::PromisereportVersionPtr > promise;
        ServerFPrxCallbackPromisePtr callback = new ServerFPrxCallbackPromise(promise);

        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(app, 1);
        _os.write(serverName, 2);
        _os.write(version, 3);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"reportVersion", _os.getByteBuffer(), context, _mStatus, callback);

        return promise.getFuture();
    }

    inline void ServerFProxy::coro_reportVersion(ServerFCoroPrxCallbackPtr callback,const std::string &app,const std::string &serverName,const std::string &version,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(app, 1);
        _os.write(serverName, 2);
        _os.write(version, 3);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"reportVersion", _os.getByteBuffer(), context, _mStatus, callback, true);
    }

    inline ServerFProxy* ServerFProxy::taf_hash(int64_t key)
    {
        return (ServerFProxy*)ServantProxy::taf_hash(key);
    }

    inline ServerFProxy* ServerFProxy::taf_consistent_hash(int64_t key)
    {
        return (ServerFProxy*)ServantProxy::taf_consistent_hash(key);
    }

    inline ServerFProxy* ServerFProxy::taf_set_timeout(int msecond)
    {
        return (ServerFProxy*)ServantProxy::taf_set_timeout(msecond);
    }

    inline ServerFProxy* ServerFProxy::taf_loaded()
    {
        return (ServerFProxy*)ServantProxy::taf_loaded();
    }

    static ::std::string __taf__ServerF_all[]=
    {
        "getNodeLoadInfo",
        "keepAlive",
        "reportVersion"
    };

    inline const map<std::string, std::string> & ServerFPrxCallback::getResponseContext() const
    {
        CallbackThreadData * pCbtd = CallbackThreadData::getData();
        assert(pCbtd != NULL);

        if(!pCbtd->getContextValid())
        {
            throw TC_Exception("cann't get response context");
        }
        return pCbtd->getResponseContext();
    }

    inline int ServerFPrxCallback::onDispatch(taf::ReqMessagePtr msg)
    {
        pair<string*, string*> r = equal_range(__taf__ServerF_all, __taf__ServerF_all+3, string(msg->request.sFuncName));
        if(r.first == r.second) return taf::JCESERVERNOFUNCERR;
        switch(r.first - __taf__ServerF_all)
        {
            case 0:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_getNodeLoadInfo_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                TafAuto::HighNodeInfo highNodeInfo;
                _is.read(highNodeInfo, 1, true);
                CallbackThreadData * pCbtd = CallbackThreadData::getData();
                assert(pCbtd != NULL);

                pCbtd->setResponseContext(msg->response.context);

                callback_getNodeLoadInfo(_ret, highNodeInfo);

                pCbtd->delResponseContext();

                return taf::JCESERVERSUCCESS;

            }
            case 1:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_keepAlive_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                CallbackThreadData * pCbtd = CallbackThreadData::getData();
                assert(pCbtd != NULL);

                pCbtd->setResponseContext(msg->response.context);

                callback_keepAlive(_ret);

                pCbtd->delResponseContext();

                return taf::JCESERVERSUCCESS;

            }
            case 2:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_reportVersion_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                CallbackThreadData * pCbtd = CallbackThreadData::getData();
                assert(pCbtd != NULL);

                pCbtd->setResponseContext(msg->response.context);

                callback_reportVersion(_ret);

                pCbtd->delResponseContext();

                return taf::JCESERVERSUCCESS;

            }
        }
        return taf::JCESERVERNOFUNCERR;
    }

    inline int ServerFPrxCallbackPromise::onDispatch(taf::ReqMessagePtr msg)
    {
        pair<string*, string*> r = equal_range(__taf__ServerF_all, __taf__ServerF_all+3, string(msg->request.sFuncName));
        if(r.first == r.second) return taf::JCESERVERNOFUNCERR;
        switch(r.first - __taf__ServerF_all)
        {
            case 0:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_getNodeLoadInfo_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);

                ServerFPrxCallbackPromise::PromisegetNodeLoadInfoPtr ptr = new ServerFPrxCallbackPromise::PromisegetNodeLoadInfo();

                _is.read(ptr->_ret, 0, true);

                _is.read(ptr->highNodeInfo, 1, true);

                ptr->_mRspContext = msg->response.context;

                callback_getNodeLoadInfo(ptr);

                return taf::JCESERVERSUCCESS;

            }
            case 1:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_keepAlive_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);

                ServerFPrxCallbackPromise::PromisekeepAlivePtr ptr = new ServerFPrxCallbackPromise::PromisekeepAlive();

                _is.read(ptr->_ret, 0, true);


                ptr->_mRspContext = msg->response.context;

                callback_keepAlive(ptr);

                return taf::JCESERVERSUCCESS;

            }
            case 2:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_reportVersion_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);

                ServerFPrxCallbackPromise::PromisereportVersionPtr ptr = new ServerFPrxCallbackPromise::PromisereportVersion();

                _is.read(ptr->_ret, 0, true);


                ptr->_mRspContext = msg->response.context;

                callback_reportVersion(ptr);

                return taf::JCESERVERSUCCESS;

            }
        }
        return taf::JCESERVERNOFUNCERR;
    }

    inline int ServerFCoroPrxCallback::onDispatch(taf::ReqMessagePtr msg)
    {
        pair<string*, string*> r = equal_range(__taf__ServerF_all, __taf__ServerF_all+3, string(msg->request.sFuncName));
        if(r.first == r.second) return taf::JCESERVERNOFUNCERR;
        switch(r.first - __taf__ServerF_all)
        {
            case 0:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_getNodeLoadInfo_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                TafAuto::HighNodeInfo highNodeInfo;
                _is.read(highNodeInfo, 1, true);
                setResponseContext(msg->response.context);

                callback_getNodeLoadInfo(_ret, highNodeInfo);

                return taf::JCESERVERSUCCESS;

            }
            case 1:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_keepAlive_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                setResponseContext(msg->response.context);

                callback_keepAlive(_ret);

                return taf::JCESERVERSUCCESS;

            }
            case 2:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_reportVersion_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                setResponseContext(msg->response.context);

                callback_reportVersion(_ret);

                return taf::JCESERVERSUCCESS;

            }
        }
        return taf::JCESERVERNOFUNCERR;
    }

    inline int ServerF::onDispatch(taf::JceCurrentPtr _current, vector<char> &_sResponseBuffer)
    {
        pair<string*, string*> r = equal_range(__taf__ServerF_all, __taf__ServerF_all+3, _current->getFuncName());
        if(r.first == r.second) return taf::JCESERVERNOFUNCERR;
        switch(r.first - __taf__ServerF_all)
        {
            case 0:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                TafAuto::HighNodeInfo highNodeInfo;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.getByDefault("highNodeInfo", highNodeInfo, highNodeInfo);
                }
                else
                {
                    _is.read(highNodeInfo, 1, false);
                }
                taf::Int32 _ret = getNodeLoadInfo(highNodeInfo, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("highNodeInfo", highNodeInfo);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(highNodeInfo, 1);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 1:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                taf::ServerInfo serverInfo;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("serverInfo", serverInfo);
                }
                else
                {
                    _is.read(serverInfo, 1, true);
                }
                taf::Int32 _ret = keepAlive(serverInfo, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 2:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                std::string app;
                std::string serverName;
                std::string version;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("app", app);
                    tafAttr.get("serverName", serverName);
                    tafAttr.get("version", version);
                }
                else
                {
                    _is.read(app, 1, true);
                    _is.read(serverName, 2, true);
                    _is.read(version, 3, true);
                }
                taf::Int32 _ret = reportVersion(app,serverName,version, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
        }
        return taf::JCESERVERNOFUNCERR;
    }

} // end namespace taf

#define taf_ServerInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.application,b.application);jce_copy_struct(a.serverName,b.serverName);jce_copy_struct(a.pid,b.pid);jce_copy_struct(a.adapter,b.adapter);jce_copy_struct(a.moduleType,b.moduleType);jce_copy_struct(a.container,b.container);


#endif

