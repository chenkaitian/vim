// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.2.2.11 by WSRD Tencent.
// Generated from `QueryF.jce'
// **********************************************************************

#ifndef __QUERYF_H_
#define __QUERYF_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
#include "jce/wup.h"
#include "servant/BaseF.h"

using namespace wup;
using namespace std;

#include "servant/EndpointF.h"
#include "servant/ServantProxy.h"
#include "servant/Servant.h"
#include "promise/promise.h"


namespace taf
{
    /* callback of async proxy for client */
    class QueryFPrxCallback: public taf::ServantProxyCallback
    {
    public:
        virtual ~QueryFPrxCallback(){}
        virtual void callback_findObjectById(const vector<taf::EndpointF>& ret)
        { throw std::runtime_error("callback_findObjectById() override incorrect."); }
        virtual void callback_findObjectById_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_findObjectById_exception() override incorrect."); }

        virtual void callback_findObjectById4Any(taf::Int32 ret,  const vector<taf::EndpointF>& activeEp,  const vector<taf::EndpointF>& inactiveEp)
        { throw std::runtime_error("callback_findObjectById4Any() override incorrect."); }
        virtual void callback_findObjectById4Any_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_findObjectById4Any_exception() override incorrect."); }

        virtual void callback_findObjectById4All(taf::Int32 ret,  const vector<taf::EndpointF>& activeEp,  const vector<taf::EndpointF>& inactiveEp)
        { throw std::runtime_error("callback_findObjectById4All() override incorrect."); }
        virtual void callback_findObjectById4All_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_findObjectById4All_exception() override incorrect."); }

        virtual void callback_findObjectByIdInSameGroup(taf::Int32 ret,  const vector<taf::EndpointF>& activeEp,  const vector<taf::EndpointF>& inactiveEp)
        { throw std::runtime_error("callback_findObjectByIdInSameGroup() override incorrect."); }
        virtual void callback_findObjectByIdInSameGroup_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_findObjectByIdInSameGroup_exception() override incorrect."); }

        virtual void callback_findObjectByIdInSameStation(taf::Int32 ret,  const vector<taf::EndpointF>& activeEp,  const vector<taf::EndpointF>& inactiveEp)
        { throw std::runtime_error("callback_findObjectByIdInSameStation() override incorrect."); }
        virtual void callback_findObjectByIdInSameStation_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_findObjectByIdInSameStation_exception() override incorrect."); }

        virtual void callback_findObjectByIdInSameSet(taf::Int32 ret,  const vector<taf::EndpointF>& activeEp,  const vector<taf::EndpointF>& inactiveEp)
        { throw std::runtime_error("callback_findObjectByIdInSameSet() override incorrect."); }
        virtual void callback_findObjectByIdInSameSet_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_findObjectByIdInSameSet_exception() override incorrect."); }

    public:
        virtual const map<std::string, std::string> & getResponseContext() const;

    public:
        virtual int onDispatch(taf::ReqMessagePtr msg);
    };
    typedef taf::TC_AutoPtr<QueryFPrxCallback> QueryFPrxCallbackPtr;

    /* callback of promise async proxy for client */
    class QueryFPrxCallbackPromise: public taf::ServantProxyCallback
    {
    public:
        virtual ~QueryFPrxCallbackPromise(){}
    public:
        struct PromisefindObjectById: virtual public TC_HandleBase
        {
        public:
            vector<taf::EndpointF> _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef taf::TC_AutoPtr< QueryFPrxCallbackPromise::PromisefindObjectById > PromisefindObjectByIdPtr;

        QueryFPrxCallbackPromise(const promise::Promise< QueryFPrxCallbackPromise::PromisefindObjectByIdPtr > &promise)
        : _promise_findObjectById(promise)
        {}
        
        virtual void callback_findObjectById(const QueryFPrxCallbackPromise::PromisefindObjectByIdPtr &ptr)
        {
            _promise_findObjectById.setValue(ptr);
        }
        virtual void callback_findObjectById_exception(taf::Int32 ret)
        {
            std::string str("");
            str += "Function:findObjectById_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_findObjectById.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< QueryFPrxCallbackPromise::PromisefindObjectByIdPtr > _promise_findObjectById;

    public:
        struct PromisefindObjectById4Any: virtual public TC_HandleBase
        {
        public:
            taf::Int32 _ret;
            vector<taf::EndpointF> activeEp;
            vector<taf::EndpointF> inactiveEp;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef taf::TC_AutoPtr< QueryFPrxCallbackPromise::PromisefindObjectById4Any > PromisefindObjectById4AnyPtr;

        QueryFPrxCallbackPromise(const promise::Promise< QueryFPrxCallbackPromise::PromisefindObjectById4AnyPtr > &promise)
        : _promise_findObjectById4Any(promise)
        {}
        
        virtual void callback_findObjectById4Any(const QueryFPrxCallbackPromise::PromisefindObjectById4AnyPtr &ptr)
        {
            _promise_findObjectById4Any.setValue(ptr);
        }
        virtual void callback_findObjectById4Any_exception(taf::Int32 ret)
        {
            std::string str("");
            str += "Function:findObjectById4Any_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_findObjectById4Any.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< QueryFPrxCallbackPromise::PromisefindObjectById4AnyPtr > _promise_findObjectById4Any;

    public:
        struct PromisefindObjectById4All: virtual public TC_HandleBase
        {
        public:
            taf::Int32 _ret;
            vector<taf::EndpointF> activeEp;
            vector<taf::EndpointF> inactiveEp;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef taf::TC_AutoPtr< QueryFPrxCallbackPromise::PromisefindObjectById4All > PromisefindObjectById4AllPtr;

        QueryFPrxCallbackPromise(const promise::Promise< QueryFPrxCallbackPromise::PromisefindObjectById4AllPtr > &promise)
        : _promise_findObjectById4All(promise)
        {}
        
        virtual void callback_findObjectById4All(const QueryFPrxCallbackPromise::PromisefindObjectById4AllPtr &ptr)
        {
            _promise_findObjectById4All.setValue(ptr);
        }
        virtual void callback_findObjectById4All_exception(taf::Int32 ret)
        {
            std::string str("");
            str += "Function:findObjectById4All_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_findObjectById4All.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< QueryFPrxCallbackPromise::PromisefindObjectById4AllPtr > _promise_findObjectById4All;

    public:
        struct PromisefindObjectByIdInSameGroup: virtual public TC_HandleBase
        {
        public:
            taf::Int32 _ret;
            vector<taf::EndpointF> activeEp;
            vector<taf::EndpointF> inactiveEp;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef taf::TC_AutoPtr< QueryFPrxCallbackPromise::PromisefindObjectByIdInSameGroup > PromisefindObjectByIdInSameGroupPtr;

        QueryFPrxCallbackPromise(const promise::Promise< QueryFPrxCallbackPromise::PromisefindObjectByIdInSameGroupPtr > &promise)
        : _promise_findObjectByIdInSameGroup(promise)
        {}
        
        virtual void callback_findObjectByIdInSameGroup(const QueryFPrxCallbackPromise::PromisefindObjectByIdInSameGroupPtr &ptr)
        {
            _promise_findObjectByIdInSameGroup.setValue(ptr);
        }
        virtual void callback_findObjectByIdInSameGroup_exception(taf::Int32 ret)
        {
            std::string str("");
            str += "Function:findObjectByIdInSameGroup_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_findObjectByIdInSameGroup.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< QueryFPrxCallbackPromise::PromisefindObjectByIdInSameGroupPtr > _promise_findObjectByIdInSameGroup;

    public:
        struct PromisefindObjectByIdInSameStation: virtual public TC_HandleBase
        {
        public:
            taf::Int32 _ret;
            vector<taf::EndpointF> activeEp;
            vector<taf::EndpointF> inactiveEp;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef taf::TC_AutoPtr< QueryFPrxCallbackPromise::PromisefindObjectByIdInSameStation > PromisefindObjectByIdInSameStationPtr;

        QueryFPrxCallbackPromise(const promise::Promise< QueryFPrxCallbackPromise::PromisefindObjectByIdInSameStationPtr > &promise)
        : _promise_findObjectByIdInSameStation(promise)
        {}
        
        virtual void callback_findObjectByIdInSameStation(const QueryFPrxCallbackPromise::PromisefindObjectByIdInSameStationPtr &ptr)
        {
            _promise_findObjectByIdInSameStation.setValue(ptr);
        }
        virtual void callback_findObjectByIdInSameStation_exception(taf::Int32 ret)
        {
            std::string str("");
            str += "Function:findObjectByIdInSameStation_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_findObjectByIdInSameStation.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< QueryFPrxCallbackPromise::PromisefindObjectByIdInSameStationPtr > _promise_findObjectByIdInSameStation;

    public:
        struct PromisefindObjectByIdInSameSet: virtual public TC_HandleBase
        {
        public:
            taf::Int32 _ret;
            vector<taf::EndpointF> activeEp;
            vector<taf::EndpointF> inactiveEp;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef taf::TC_AutoPtr< QueryFPrxCallbackPromise::PromisefindObjectByIdInSameSet > PromisefindObjectByIdInSameSetPtr;

        QueryFPrxCallbackPromise(const promise::Promise< QueryFPrxCallbackPromise::PromisefindObjectByIdInSameSetPtr > &promise)
        : _promise_findObjectByIdInSameSet(promise)
        {}
        
        virtual void callback_findObjectByIdInSameSet(const QueryFPrxCallbackPromise::PromisefindObjectByIdInSameSetPtr &ptr)
        {
            _promise_findObjectByIdInSameSet.setValue(ptr);
        }
        virtual void callback_findObjectByIdInSameSet_exception(taf::Int32 ret)
        {
            std::string str("");
            str += "Function:findObjectByIdInSameSet_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_findObjectByIdInSameSet.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< QueryFPrxCallbackPromise::PromisefindObjectByIdInSameSetPtr > _promise_findObjectByIdInSameSet;

    public:
        virtual int onDispatch(taf::ReqMessagePtr msg);
    };
    typedef taf::TC_AutoPtr<QueryFPrxCallbackPromise> QueryFPrxCallbackPromisePtr;

    /* callback of coroutine async proxy for client */
    class QueryFCoroPrxCallback: public QueryFPrxCallback
    {
    public:
        virtual ~QueryFCoroPrxCallback(){}
    public:
        virtual const map<std::string, std::string> & getResponseContext() const { return _mRspContext; }

        virtual void setResponseContext(const map<std::string, std::string> &mContext) { _mRspContext = mContext; }

    public:
        virtual int onDispatch(taf::ReqMessagePtr msg);
    protected:
        map<std::string, std::string> _mRspContext;
    };
    typedef taf::TC_AutoPtr<QueryFCoroPrxCallback> QueryFCoroPrxCallbackPtr;

    /* proxy for client */
    class QueryFProxy : public taf::ServantProxy
    {
    public:
        typedef map<string, string> TAF_CONTEXT;
        vector<taf::EndpointF> findObjectById(const std::string & id,const map<string, string> &context = TAF_CONTEXT(),map<string, string> * pResponseContext = NULL);
        void async_findObjectById(QueryFPrxCallbackPtr callback,const std::string & id,const map<string, string> &context = TAF_CONTEXT());

        promise::Future< QueryFPrxCallbackPromise::PromisefindObjectByIdPtr > promise_async_findObjectById(const std::string & id,const map<string, string> &context = TAF_CONTEXT());
        void coro_findObjectById(QueryFCoroPrxCallbackPtr callback,const std::string & id,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 findObjectById4Any(const std::string & id,vector<taf::EndpointF> &activeEp,vector<taf::EndpointF> &inactiveEp,const map<string, string> &context = TAF_CONTEXT(),map<string, string> * pResponseContext = NULL);
        void async_findObjectById4Any(QueryFPrxCallbackPtr callback,const std::string & id,const map<string, string> &context = TAF_CONTEXT());

        promise::Future< QueryFPrxCallbackPromise::PromisefindObjectById4AnyPtr > promise_async_findObjectById4Any(const std::string & id,const map<string, string> &context = TAF_CONTEXT());
        void coro_findObjectById4Any(QueryFCoroPrxCallbackPtr callback,const std::string & id,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 findObjectById4All(const std::string & id,vector<taf::EndpointF> &activeEp,vector<taf::EndpointF> &inactiveEp,const map<string, string> &context = TAF_CONTEXT(),map<string, string> * pResponseContext = NULL);
        void async_findObjectById4All(QueryFPrxCallbackPtr callback,const std::string & id,const map<string, string> &context = TAF_CONTEXT());

        promise::Future< QueryFPrxCallbackPromise::PromisefindObjectById4AllPtr > promise_async_findObjectById4All(const std::string & id,const map<string, string> &context = TAF_CONTEXT());
        void coro_findObjectById4All(QueryFCoroPrxCallbackPtr callback,const std::string & id,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 findObjectByIdInSameGroup(const std::string & id,vector<taf::EndpointF> &activeEp,vector<taf::EndpointF> &inactiveEp,const map<string, string> &context = TAF_CONTEXT(),map<string, string> * pResponseContext = NULL);
        void async_findObjectByIdInSameGroup(QueryFPrxCallbackPtr callback,const std::string & id,const map<string, string> &context = TAF_CONTEXT());

        promise::Future< QueryFPrxCallbackPromise::PromisefindObjectByIdInSameGroupPtr > promise_async_findObjectByIdInSameGroup(const std::string & id,const map<string, string> &context = TAF_CONTEXT());
        void coro_findObjectByIdInSameGroup(QueryFCoroPrxCallbackPtr callback,const std::string & id,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 findObjectByIdInSameStation(const std::string & id,const std::string & sStation,vector<taf::EndpointF> &activeEp,vector<taf::EndpointF> &inactiveEp,const map<string, string> &context = TAF_CONTEXT(),map<string, string> * pResponseContext = NULL);
        void async_findObjectByIdInSameStation(QueryFPrxCallbackPtr callback,const std::string & id,const std::string & sStation,const map<string, string> &context = TAF_CONTEXT());

        promise::Future< QueryFPrxCallbackPromise::PromisefindObjectByIdInSameStationPtr > promise_async_findObjectByIdInSameStation(const std::string & id,const std::string & sStation,const map<string, string> &context = TAF_CONTEXT());
        void coro_findObjectByIdInSameStation(QueryFCoroPrxCallbackPtr callback,const std::string & id,const std::string & sStation,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 findObjectByIdInSameSet(const std::string & id,const std::string & setId,vector<taf::EndpointF> &activeEp,vector<taf::EndpointF> &inactiveEp,const map<string, string> &context = TAF_CONTEXT(),map<string, string> * pResponseContext = NULL);
        void async_findObjectByIdInSameSet(QueryFPrxCallbackPtr callback,const std::string & id,const std::string & setId,const map<string, string> &context = TAF_CONTEXT());

        promise::Future< QueryFPrxCallbackPromise::PromisefindObjectByIdInSameSetPtr > promise_async_findObjectByIdInSameSet(const std::string & id,const std::string & setId,const map<string, string> &context = TAF_CONTEXT());
        void coro_findObjectByIdInSameSet(QueryFCoroPrxCallbackPtr callback,const std::string & id,const std::string & setId,const map<string, string> &context = TAF_CONTEXT());

        QueryFProxy* taf_hash(int64_t key);
        QueryFProxy* taf_consistent_hash(int64_t key);
        QueryFProxy* taf_set_timeout(int msecond);
        QueryFProxy* taf_loaded();
    };
    typedef taf::TC_AutoPtr<QueryFProxy> QueryFPrx;

    /* servant for server */
    class QueryF : public taf::Servant
    {
    public:
        virtual ~QueryF(){}
        virtual vector<taf::EndpointF> findObjectById(const std::string & id,taf::JceCurrentPtr current) = 0;
        static void async_response_findObjectById(taf::JceCurrentPtr current, const vector<taf::EndpointF> &_ret);

        virtual taf::Int32 findObjectById4Any(const std::string & id,vector<taf::EndpointF> &activeEp,vector<taf::EndpointF> &inactiveEp,taf::JceCurrentPtr current) = 0;
        static void async_response_findObjectById4Any(taf::JceCurrentPtr current, taf::Int32 _ret, const vector<taf::EndpointF> &activeEp, const vector<taf::EndpointF> &inactiveEp);

        virtual taf::Int32 findObjectById4All(const std::string & id,vector<taf::EndpointF> &activeEp,vector<taf::EndpointF> &inactiveEp,taf::JceCurrentPtr current) = 0;
        static void async_response_findObjectById4All(taf::JceCurrentPtr current, taf::Int32 _ret, const vector<taf::EndpointF> &activeEp, const vector<taf::EndpointF> &inactiveEp);

        virtual taf::Int32 findObjectByIdInSameGroup(const std::string & id,vector<taf::EndpointF> &activeEp,vector<taf::EndpointF> &inactiveEp,taf::JceCurrentPtr current) = 0;
        static void async_response_findObjectByIdInSameGroup(taf::JceCurrentPtr current, taf::Int32 _ret, const vector<taf::EndpointF> &activeEp, const vector<taf::EndpointF> &inactiveEp);

        virtual taf::Int32 findObjectByIdInSameStation(const std::string & id,const std::string & sStation,vector<taf::EndpointF> &activeEp,vector<taf::EndpointF> &inactiveEp,taf::JceCurrentPtr current) = 0;
        static void async_response_findObjectByIdInSameStation(taf::JceCurrentPtr current, taf::Int32 _ret, const vector<taf::EndpointF> &activeEp, const vector<taf::EndpointF> &inactiveEp);

        virtual taf::Int32 findObjectByIdInSameSet(const std::string & id,const std::string & setId,vector<taf::EndpointF> &activeEp,vector<taf::EndpointF> &inactiveEp,taf::JceCurrentPtr current) = 0;
        static void async_response_findObjectByIdInSameSet(taf::JceCurrentPtr current, taf::Int32 _ret, const vector<taf::EndpointF> &activeEp, const vector<taf::EndpointF> &inactiveEp);

    public:
        int onDispatch(taf::JceCurrentPtr _current, vector<char> &_sResponseBuffer);
    };

    inline vector<taf::EndpointF> QueryFProxy::findObjectById(const std::string &id, const map<string, string> &context,map<string, string> * pResponseContext)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(id, 1);
        taf::ResponsePacket rep;
        std::map<string, string> _mStatus;
        taf_invoke(taf::JCENORMAL,"findObjectById", _os.getByteBuffer(), context, _mStatus, rep);
        if(pResponseContext)
        {
            *pResponseContext = rep.context;
        }

        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        vector<taf::EndpointF> _ret;
        _is.read(_ret, 0, true);
        return _ret;
    }

    inline void QueryF::async_response_findObjectById(taf::JceCurrentPtr current, const vector<taf::EndpointF> &_ret)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    inline void QueryFProxy::async_findObjectById(QueryFPrxCallbackPtr callback,const std::string &id,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(id, 1);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"findObjectById", _os.getByteBuffer(), context, _mStatus, callback);
    }
    
    inline promise::Future< QueryFPrxCallbackPromise::PromisefindObjectByIdPtr > QueryFProxy::promise_async_findObjectById(const std::string &id,const map<string, string>& context)
    {
        promise::Promise< QueryFPrxCallbackPromise::PromisefindObjectByIdPtr > promise;
        QueryFPrxCallbackPromisePtr callback = new QueryFPrxCallbackPromise(promise);

        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(id, 1);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"findObjectById", _os.getByteBuffer(), context, _mStatus, callback);

        return promise.getFuture();
    }

    inline void QueryFProxy::coro_findObjectById(QueryFCoroPrxCallbackPtr callback,const std::string &id,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(id, 1);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"findObjectById", _os.getByteBuffer(), context, _mStatus, callback, true);
    }

    inline taf::Int32 QueryFProxy::findObjectById4All(const std::string &id, vector<taf::EndpointF> &activeEp, vector<taf::EndpointF> &inactiveEp, const map<string, string> &context,map<string, string> * pResponseContext)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(id, 1);
        _os.write(activeEp, 2);
        _os.write(inactiveEp, 3);
        taf::ResponsePacket rep;
        std::map<string, string> _mStatus;
        taf_invoke(taf::JCENORMAL,"findObjectById4All", _os.getByteBuffer(), context, _mStatus, rep);
        if(pResponseContext)
        {
            *pResponseContext = rep.context;
        }

        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(activeEp, 2, true);
        _is.read(inactiveEp, 3, true);
        return _ret;
    }

    inline void QueryF::async_response_findObjectById4All(taf::JceCurrentPtr current, taf::Int32 _ret, const vector<taf::EndpointF> &activeEp, const vector<taf::EndpointF> &inactiveEp)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("activeEp", activeEp);
            tafAttr.put("inactiveEp", inactiveEp);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(activeEp, 2);

            _os.write(inactiveEp, 3);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    inline void QueryFProxy::async_findObjectById4All(QueryFPrxCallbackPtr callback,const std::string &id,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(id, 1);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"findObjectById4All", _os.getByteBuffer(), context, _mStatus, callback);
    }
    
    inline promise::Future< QueryFPrxCallbackPromise::PromisefindObjectById4AllPtr > QueryFProxy::promise_async_findObjectById4All(const std::string &id,const map<string, string>& context)
    {
        promise::Promise< QueryFPrxCallbackPromise::PromisefindObjectById4AllPtr > promise;
        QueryFPrxCallbackPromisePtr callback = new QueryFPrxCallbackPromise(promise);

        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(id, 1);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"findObjectById4All", _os.getByteBuffer(), context, _mStatus, callback);

        return promise.getFuture();
    }

    inline void QueryFProxy::coro_findObjectById4All(QueryFCoroPrxCallbackPtr callback,const std::string &id,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(id, 1);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"findObjectById4All", _os.getByteBuffer(), context, _mStatus, callback, true);
    }

    inline taf::Int32 QueryFProxy::findObjectById4Any(const std::string &id, vector<taf::EndpointF> &activeEp, vector<taf::EndpointF> &inactiveEp, const map<string, string> &context,map<string, string> * pResponseContext)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(id, 1);
        _os.write(activeEp, 2);
        _os.write(inactiveEp, 3);
        taf::ResponsePacket rep;
        std::map<string, string> _mStatus;
        taf_invoke(taf::JCENORMAL,"findObjectById4Any", _os.getByteBuffer(), context, _mStatus, rep);
        if(pResponseContext)
        {
            *pResponseContext = rep.context;
        }

        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(activeEp, 2, true);
        _is.read(inactiveEp, 3, true);
        return _ret;
    }

    inline void QueryF::async_response_findObjectById4Any(taf::JceCurrentPtr current, taf::Int32 _ret, const vector<taf::EndpointF> &activeEp, const vector<taf::EndpointF> &inactiveEp)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("activeEp", activeEp);
            tafAttr.put("inactiveEp", inactiveEp);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(activeEp, 2);

            _os.write(inactiveEp, 3);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    inline void QueryFProxy::async_findObjectById4Any(QueryFPrxCallbackPtr callback,const std::string &id,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(id, 1);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"findObjectById4Any", _os.getByteBuffer(), context, _mStatus, callback);
    }
    
    inline promise::Future< QueryFPrxCallbackPromise::PromisefindObjectById4AnyPtr > QueryFProxy::promise_async_findObjectById4Any(const std::string &id,const map<string, string>& context)
    {
        promise::Promise< QueryFPrxCallbackPromise::PromisefindObjectById4AnyPtr > promise;
        QueryFPrxCallbackPromisePtr callback = new QueryFPrxCallbackPromise(promise);

        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(id, 1);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"findObjectById4Any", _os.getByteBuffer(), context, _mStatus, callback);

        return promise.getFuture();
    }

    inline void QueryFProxy::coro_findObjectById4Any(QueryFCoroPrxCallbackPtr callback,const std::string &id,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(id, 1);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"findObjectById4Any", _os.getByteBuffer(), context, _mStatus, callback, true);
    }

    inline taf::Int32 QueryFProxy::findObjectByIdInSameGroup(const std::string &id, vector<taf::EndpointF> &activeEp, vector<taf::EndpointF> &inactiveEp, const map<string, string> &context,map<string, string> * pResponseContext)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(id, 1);
        _os.write(activeEp, 2);
        _os.write(inactiveEp, 3);
        taf::ResponsePacket rep;
        std::map<string, string> _mStatus;
        taf_invoke(taf::JCENORMAL,"findObjectByIdInSameGroup", _os.getByteBuffer(), context, _mStatus, rep);
        if(pResponseContext)
        {
            *pResponseContext = rep.context;
        }

        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(activeEp, 2, true);
        _is.read(inactiveEp, 3, true);
        return _ret;
    }

    inline void QueryF::async_response_findObjectByIdInSameGroup(taf::JceCurrentPtr current, taf::Int32 _ret, const vector<taf::EndpointF> &activeEp, const vector<taf::EndpointF> &inactiveEp)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("activeEp", activeEp);
            tafAttr.put("inactiveEp", inactiveEp);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(activeEp, 2);

            _os.write(inactiveEp, 3);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    inline void QueryFProxy::async_findObjectByIdInSameGroup(QueryFPrxCallbackPtr callback,const std::string &id,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(id, 1);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"findObjectByIdInSameGroup", _os.getByteBuffer(), context, _mStatus, callback);
    }
    
    inline promise::Future< QueryFPrxCallbackPromise::PromisefindObjectByIdInSameGroupPtr > QueryFProxy::promise_async_findObjectByIdInSameGroup(const std::string &id,const map<string, string>& context)
    {
        promise::Promise< QueryFPrxCallbackPromise::PromisefindObjectByIdInSameGroupPtr > promise;
        QueryFPrxCallbackPromisePtr callback = new QueryFPrxCallbackPromise(promise);

        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(id, 1);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"findObjectByIdInSameGroup", _os.getByteBuffer(), context, _mStatus, callback);

        return promise.getFuture();
    }

    inline void QueryFProxy::coro_findObjectByIdInSameGroup(QueryFCoroPrxCallbackPtr callback,const std::string &id,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(id, 1);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"findObjectByIdInSameGroup", _os.getByteBuffer(), context, _mStatus, callback, true);
    }

    inline taf::Int32 QueryFProxy::findObjectByIdInSameSet(const std::string &id, const std::string &setId, vector<taf::EndpointF> &activeEp, vector<taf::EndpointF> &inactiveEp, const map<string, string> &context,map<string, string> * pResponseContext)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(id, 1);
        _os.write(setId, 2);
        _os.write(activeEp, 3);
        _os.write(inactiveEp, 4);
        taf::ResponsePacket rep;
        std::map<string, string> _mStatus;
        taf_invoke(taf::JCENORMAL,"findObjectByIdInSameSet", _os.getByteBuffer(), context, _mStatus, rep);
        if(pResponseContext)
        {
            *pResponseContext = rep.context;
        }

        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(activeEp, 3, true);
        _is.read(inactiveEp, 4, true);
        return _ret;
    }

    inline void QueryF::async_response_findObjectByIdInSameSet(taf::JceCurrentPtr current, taf::Int32 _ret, const vector<taf::EndpointF> &activeEp, const vector<taf::EndpointF> &inactiveEp)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("activeEp", activeEp);
            tafAttr.put("inactiveEp", inactiveEp);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(activeEp, 3);

            _os.write(inactiveEp, 4);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    inline void QueryFProxy::async_findObjectByIdInSameSet(QueryFPrxCallbackPtr callback,const std::string &id,const std::string &setId,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(id, 1);
        _os.write(setId, 2);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"findObjectByIdInSameSet", _os.getByteBuffer(), context, _mStatus, callback);
    }
    
    inline promise::Future< QueryFPrxCallbackPromise::PromisefindObjectByIdInSameSetPtr > QueryFProxy::promise_async_findObjectByIdInSameSet(const std::string &id,const std::string &setId,const map<string, string>& context)
    {
        promise::Promise< QueryFPrxCallbackPromise::PromisefindObjectByIdInSameSetPtr > promise;
        QueryFPrxCallbackPromisePtr callback = new QueryFPrxCallbackPromise(promise);

        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(id, 1);
        _os.write(setId, 2);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"findObjectByIdInSameSet", _os.getByteBuffer(), context, _mStatus, callback);

        return promise.getFuture();
    }

    inline void QueryFProxy::coro_findObjectByIdInSameSet(QueryFCoroPrxCallbackPtr callback,const std::string &id,const std::string &setId,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(id, 1);
        _os.write(setId, 2);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"findObjectByIdInSameSet", _os.getByteBuffer(), context, _mStatus, callback, true);
    }

    inline taf::Int32 QueryFProxy::findObjectByIdInSameStation(const std::string &id, const std::string &sStation, vector<taf::EndpointF> &activeEp, vector<taf::EndpointF> &inactiveEp, const map<string, string> &context,map<string, string> * pResponseContext)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(id, 1);
        _os.write(sStation, 2);
        _os.write(activeEp, 3);
        _os.write(inactiveEp, 4);
        taf::ResponsePacket rep;
        std::map<string, string> _mStatus;
        taf_invoke(taf::JCENORMAL,"findObjectByIdInSameStation", _os.getByteBuffer(), context, _mStatus, rep);
        if(pResponseContext)
        {
            *pResponseContext = rep.context;
        }

        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(activeEp, 3, true);
        _is.read(inactiveEp, 4, true);
        return _ret;
    }

    inline void QueryF::async_response_findObjectByIdInSameStation(taf::JceCurrentPtr current, taf::Int32 _ret, const vector<taf::EndpointF> &activeEp, const vector<taf::EndpointF> &inactiveEp)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("activeEp", activeEp);
            tafAttr.put("inactiveEp", inactiveEp);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(activeEp, 3);

            _os.write(inactiveEp, 4);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    inline void QueryFProxy::async_findObjectByIdInSameStation(QueryFPrxCallbackPtr callback,const std::string &id,const std::string &sStation,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(id, 1);
        _os.write(sStation, 2);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"findObjectByIdInSameStation", _os.getByteBuffer(), context, _mStatus, callback);
    }
    
    inline promise::Future< QueryFPrxCallbackPromise::PromisefindObjectByIdInSameStationPtr > QueryFProxy::promise_async_findObjectByIdInSameStation(const std::string &id,const std::string &sStation,const map<string, string>& context)
    {
        promise::Promise< QueryFPrxCallbackPromise::PromisefindObjectByIdInSameStationPtr > promise;
        QueryFPrxCallbackPromisePtr callback = new QueryFPrxCallbackPromise(promise);

        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(id, 1);
        _os.write(sStation, 2);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"findObjectByIdInSameStation", _os.getByteBuffer(), context, _mStatus, callback);

        return promise.getFuture();
    }

    inline void QueryFProxy::coro_findObjectByIdInSameStation(QueryFCoroPrxCallbackPtr callback,const std::string &id,const std::string &sStation,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(id, 1);
        _os.write(sStation, 2);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"findObjectByIdInSameStation", _os.getByteBuffer(), context, _mStatus, callback, true);
    }

    inline QueryFProxy* QueryFProxy::taf_hash(int64_t key)
    {
        return (QueryFProxy*)ServantProxy::taf_hash(key);
    }

    inline QueryFProxy* QueryFProxy::taf_consistent_hash(int64_t key)
    {
        return (QueryFProxy*)ServantProxy::taf_consistent_hash(key);
    }

    inline QueryFProxy* QueryFProxy::taf_set_timeout(int msecond)
    {
        return (QueryFProxy*)ServantProxy::taf_set_timeout(msecond);
    }

    inline QueryFProxy* QueryFProxy::taf_loaded()
    {
        return (QueryFProxy*)ServantProxy::taf_loaded();
    }

    static ::std::string __taf__QueryF_all[]=
    {
        "findObjectById",
        "findObjectById4All",
        "findObjectById4Any",
        "findObjectByIdInSameGroup",
        "findObjectByIdInSameSet",
        "findObjectByIdInSameStation"
    };

    inline const map<std::string, std::string> & QueryFPrxCallback::getResponseContext() const
    {
        CallbackThreadData * pCbtd = CallbackThreadData::getData();
        assert(pCbtd != NULL);

        if(!pCbtd->getContextValid())
        {
            throw TC_Exception("cann't get response context");
        }
        return pCbtd->getResponseContext();
    }

    inline int QueryFPrxCallback::onDispatch(taf::ReqMessagePtr msg)
    {
        pair<string*, string*> r = equal_range(__taf__QueryF_all, __taf__QueryF_all+6, string(msg->request.sFuncName));
        if(r.first == r.second) return taf::JCESERVERNOFUNCERR;
        switch(r.first - __taf__QueryF_all)
        {
            case 0:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_findObjectById_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                vector<taf::EndpointF> _ret;
                _is.read(_ret, 0, true);

                CallbackThreadData * pCbtd = CallbackThreadData::getData();
                assert(pCbtd != NULL);

                pCbtd->setResponseContext(msg->response.context);

                callback_findObjectById(_ret);

                pCbtd->delResponseContext();

                return taf::JCESERVERSUCCESS;

            }
            case 1:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_findObjectById4All_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                vector<taf::EndpointF> activeEp;
                _is.read(activeEp, 2, true);
                vector<taf::EndpointF> inactiveEp;
                _is.read(inactiveEp, 3, true);
                CallbackThreadData * pCbtd = CallbackThreadData::getData();
                assert(pCbtd != NULL);

                pCbtd->setResponseContext(msg->response.context);

                callback_findObjectById4All(_ret, activeEp, inactiveEp);

                pCbtd->delResponseContext();

                return taf::JCESERVERSUCCESS;

            }
            case 2:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_findObjectById4Any_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                vector<taf::EndpointF> activeEp;
                _is.read(activeEp, 2, true);
                vector<taf::EndpointF> inactiveEp;
                _is.read(inactiveEp, 3, true);
                CallbackThreadData * pCbtd = CallbackThreadData::getData();
                assert(pCbtd != NULL);

                pCbtd->setResponseContext(msg->response.context);

                callback_findObjectById4Any(_ret, activeEp, inactiveEp);

                pCbtd->delResponseContext();

                return taf::JCESERVERSUCCESS;

            }
            case 3:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_findObjectByIdInSameGroup_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                vector<taf::EndpointF> activeEp;
                _is.read(activeEp, 2, true);
                vector<taf::EndpointF> inactiveEp;
                _is.read(inactiveEp, 3, true);
                CallbackThreadData * pCbtd = CallbackThreadData::getData();
                assert(pCbtd != NULL);

                pCbtd->setResponseContext(msg->response.context);

                callback_findObjectByIdInSameGroup(_ret, activeEp, inactiveEp);

                pCbtd->delResponseContext();

                return taf::JCESERVERSUCCESS;

            }
            case 4:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_findObjectByIdInSameSet_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                vector<taf::EndpointF> activeEp;
                _is.read(activeEp, 3, true);
                vector<taf::EndpointF> inactiveEp;
                _is.read(inactiveEp, 4, true);
                CallbackThreadData * pCbtd = CallbackThreadData::getData();
                assert(pCbtd != NULL);

                pCbtd->setResponseContext(msg->response.context);

                callback_findObjectByIdInSameSet(_ret, activeEp, inactiveEp);

                pCbtd->delResponseContext();

                return taf::JCESERVERSUCCESS;

            }
            case 5:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_findObjectByIdInSameStation_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                vector<taf::EndpointF> activeEp;
                _is.read(activeEp, 3, true);
                vector<taf::EndpointF> inactiveEp;
                _is.read(inactiveEp, 4, true);
                CallbackThreadData * pCbtd = CallbackThreadData::getData();
                assert(pCbtd != NULL);

                pCbtd->setResponseContext(msg->response.context);

                callback_findObjectByIdInSameStation(_ret, activeEp, inactiveEp);

                pCbtd->delResponseContext();

                return taf::JCESERVERSUCCESS;

            }
        }
        return taf::JCESERVERNOFUNCERR;
    }

    inline int QueryFPrxCallbackPromise::onDispatch(taf::ReqMessagePtr msg)
    {
        pair<string*, string*> r = equal_range(__taf__QueryF_all, __taf__QueryF_all+6, string(msg->request.sFuncName));
        if(r.first == r.second) return taf::JCESERVERNOFUNCERR;
        switch(r.first - __taf__QueryF_all)
        {
            case 0:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_findObjectById_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);

                QueryFPrxCallbackPromise::PromisefindObjectByIdPtr ptr = new QueryFPrxCallbackPromise::PromisefindObjectById();

                _is.read(ptr->_ret, 0, true);


                ptr->_mRspContext = msg->response.context;

                callback_findObjectById(ptr);

                return taf::JCESERVERSUCCESS;

            }
            case 1:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_findObjectById4All_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);

                QueryFPrxCallbackPromise::PromisefindObjectById4AllPtr ptr = new QueryFPrxCallbackPromise::PromisefindObjectById4All();

                _is.read(ptr->_ret, 0, true);

                _is.read(ptr->activeEp, 2, true);
                _is.read(ptr->inactiveEp, 3, true);

                ptr->_mRspContext = msg->response.context;

                callback_findObjectById4All(ptr);

                return taf::JCESERVERSUCCESS;

            }
            case 2:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_findObjectById4Any_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);

                QueryFPrxCallbackPromise::PromisefindObjectById4AnyPtr ptr = new QueryFPrxCallbackPromise::PromisefindObjectById4Any();

                _is.read(ptr->_ret, 0, true);

                _is.read(ptr->activeEp, 2, true);
                _is.read(ptr->inactiveEp, 3, true);

                ptr->_mRspContext = msg->response.context;

                callback_findObjectById4Any(ptr);

                return taf::JCESERVERSUCCESS;

            }
            case 3:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_findObjectByIdInSameGroup_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);

                QueryFPrxCallbackPromise::PromisefindObjectByIdInSameGroupPtr ptr = new QueryFPrxCallbackPromise::PromisefindObjectByIdInSameGroup();

                _is.read(ptr->_ret, 0, true);

                _is.read(ptr->activeEp, 2, true);
                _is.read(ptr->inactiveEp, 3, true);

                ptr->_mRspContext = msg->response.context;

                callback_findObjectByIdInSameGroup(ptr);

                return taf::JCESERVERSUCCESS;

            }
            case 4:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_findObjectByIdInSameSet_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);

                QueryFPrxCallbackPromise::PromisefindObjectByIdInSameSetPtr ptr = new QueryFPrxCallbackPromise::PromisefindObjectByIdInSameSet();

                _is.read(ptr->_ret, 0, true);

                _is.read(ptr->activeEp, 3, true);
                _is.read(ptr->inactiveEp, 4, true);

                ptr->_mRspContext = msg->response.context;

                callback_findObjectByIdInSameSet(ptr);

                return taf::JCESERVERSUCCESS;

            }
            case 5:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_findObjectByIdInSameStation_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);

                QueryFPrxCallbackPromise::PromisefindObjectByIdInSameStationPtr ptr = new QueryFPrxCallbackPromise::PromisefindObjectByIdInSameStation();

                _is.read(ptr->_ret, 0, true);

                _is.read(ptr->activeEp, 3, true);
                _is.read(ptr->inactiveEp, 4, true);

                ptr->_mRspContext = msg->response.context;

                callback_findObjectByIdInSameStation(ptr);

                return taf::JCESERVERSUCCESS;

            }
        }
        return taf::JCESERVERNOFUNCERR;
    }

    inline int QueryFCoroPrxCallback::onDispatch(taf::ReqMessagePtr msg)
    {
        pair<string*, string*> r = equal_range(__taf__QueryF_all, __taf__QueryF_all+6, string(msg->request.sFuncName));
        if(r.first == r.second) return taf::JCESERVERNOFUNCERR;
        switch(r.first - __taf__QueryF_all)
        {
            case 0:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_findObjectById_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                vector<taf::EndpointF> _ret;
                _is.read(_ret, 0, true);

                setResponseContext(msg->response.context);

                callback_findObjectById(_ret);

                return taf::JCESERVERSUCCESS;

            }
            case 1:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_findObjectById4All_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                vector<taf::EndpointF> activeEp;
                _is.read(activeEp, 2, true);
                vector<taf::EndpointF> inactiveEp;
                _is.read(inactiveEp, 3, true);
                setResponseContext(msg->response.context);

                callback_findObjectById4All(_ret, activeEp, inactiveEp);

                return taf::JCESERVERSUCCESS;

            }
            case 2:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_findObjectById4Any_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                vector<taf::EndpointF> activeEp;
                _is.read(activeEp, 2, true);
                vector<taf::EndpointF> inactiveEp;
                _is.read(inactiveEp, 3, true);
                setResponseContext(msg->response.context);

                callback_findObjectById4Any(_ret, activeEp, inactiveEp);

                return taf::JCESERVERSUCCESS;

            }
            case 3:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_findObjectByIdInSameGroup_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                vector<taf::EndpointF> activeEp;
                _is.read(activeEp, 2, true);
                vector<taf::EndpointF> inactiveEp;
                _is.read(inactiveEp, 3, true);
                setResponseContext(msg->response.context);

                callback_findObjectByIdInSameGroup(_ret, activeEp, inactiveEp);

                return taf::JCESERVERSUCCESS;

            }
            case 4:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_findObjectByIdInSameSet_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                vector<taf::EndpointF> activeEp;
                _is.read(activeEp, 3, true);
                vector<taf::EndpointF> inactiveEp;
                _is.read(inactiveEp, 4, true);
                setResponseContext(msg->response.context);

                callback_findObjectByIdInSameSet(_ret, activeEp, inactiveEp);

                return taf::JCESERVERSUCCESS;

            }
            case 5:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_findObjectByIdInSameStation_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                vector<taf::EndpointF> activeEp;
                _is.read(activeEp, 3, true);
                vector<taf::EndpointF> inactiveEp;
                _is.read(inactiveEp, 4, true);
                setResponseContext(msg->response.context);

                callback_findObjectByIdInSameStation(_ret, activeEp, inactiveEp);

                return taf::JCESERVERSUCCESS;

            }
        }
        return taf::JCESERVERNOFUNCERR;
    }

    inline int QueryF::onDispatch(taf::JceCurrentPtr _current, vector<char> &_sResponseBuffer)
    {
        pair<string*, string*> r = equal_range(__taf__QueryF_all, __taf__QueryF_all+6, _current->getFuncName());
        if(r.first == r.second) return taf::JCESERVERNOFUNCERR;
        switch(r.first - __taf__QueryF_all)
        {
            case 0:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                std::string id;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("id", id);
                }
                else
                {
                    _is.read(id, 1, true);
                }
                vector<taf::EndpointF> _ret = findObjectById(id, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 1:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                std::string id;
                vector<taf::EndpointF> activeEp;
                vector<taf::EndpointF> inactiveEp;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("id", id);
                    tafAttr.getByDefault("activeEp", activeEp, activeEp);
                    tafAttr.getByDefault("inactiveEp", inactiveEp, inactiveEp);
                }
                else
                {
                    _is.read(id, 1, true);
                    _is.read(activeEp, 2, false);
                    _is.read(inactiveEp, 3, false);
                }
                taf::Int32 _ret = findObjectById4All(id,activeEp,inactiveEp, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("activeEp", activeEp);
                        tafAttr.put("inactiveEp", inactiveEp);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(activeEp, 2);
                        _os.write(inactiveEp, 3);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 2:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                std::string id;
                vector<taf::EndpointF> activeEp;
                vector<taf::EndpointF> inactiveEp;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("id", id);
                    tafAttr.getByDefault("activeEp", activeEp, activeEp);
                    tafAttr.getByDefault("inactiveEp", inactiveEp, inactiveEp);
                }
                else
                {
                    _is.read(id, 1, true);
                    _is.read(activeEp, 2, false);
                    _is.read(inactiveEp, 3, false);
                }
                taf::Int32 _ret = findObjectById4Any(id,activeEp,inactiveEp, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("activeEp", activeEp);
                        tafAttr.put("inactiveEp", inactiveEp);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(activeEp, 2);
                        _os.write(inactiveEp, 3);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 3:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                std::string id;
                vector<taf::EndpointF> activeEp;
                vector<taf::EndpointF> inactiveEp;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("id", id);
                    tafAttr.getByDefault("activeEp", activeEp, activeEp);
                    tafAttr.getByDefault("inactiveEp", inactiveEp, inactiveEp);
                }
                else
                {
                    _is.read(id, 1, true);
                    _is.read(activeEp, 2, false);
                    _is.read(inactiveEp, 3, false);
                }
                taf::Int32 _ret = findObjectByIdInSameGroup(id,activeEp,inactiveEp, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("activeEp", activeEp);
                        tafAttr.put("inactiveEp", inactiveEp);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(activeEp, 2);
                        _os.write(inactiveEp, 3);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 4:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                std::string id;
                std::string setId;
                vector<taf::EndpointF> activeEp;
                vector<taf::EndpointF> inactiveEp;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("id", id);
                    tafAttr.get("setId", setId);
                    tafAttr.getByDefault("activeEp", activeEp, activeEp);
                    tafAttr.getByDefault("inactiveEp", inactiveEp, inactiveEp);
                }
                else
                {
                    _is.read(id, 1, true);
                    _is.read(setId, 2, true);
                    _is.read(activeEp, 3, false);
                    _is.read(inactiveEp, 4, false);
                }
                taf::Int32 _ret = findObjectByIdInSameSet(id,setId,activeEp,inactiveEp, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("activeEp", activeEp);
                        tafAttr.put("inactiveEp", inactiveEp);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(activeEp, 3);
                        _os.write(inactiveEp, 4);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 5:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                std::string id;
                std::string sStation;
                vector<taf::EndpointF> activeEp;
                vector<taf::EndpointF> inactiveEp;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("id", id);
                    tafAttr.get("sStation", sStation);
                    tafAttr.getByDefault("activeEp", activeEp, activeEp);
                    tafAttr.getByDefault("inactiveEp", inactiveEp, inactiveEp);
                }
                else
                {
                    _is.read(id, 1, true);
                    _is.read(sStation, 2, true);
                    _is.read(activeEp, 3, false);
                    _is.read(inactiveEp, 4, false);
                }
                taf::Int32 _ret = findObjectByIdInSameStation(id,sStation,activeEp,inactiveEp, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("activeEp", activeEp);
                        tafAttr.put("inactiveEp", inactiveEp);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(activeEp, 3);
                        _os.write(inactiveEp, 4);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
        }
        return taf::JCESERVERNOFUNCERR;
    }

} // end namespace taf


#endif

