// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.2.2.11 by WSRD Tencent.
// Generated from `StatF.jce'
// **********************************************************************

#ifndef __STATF_H_
#define __STATF_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
#include "jce/wup.h"
#include "servant/BaseF.h"

using namespace wup;
using namespace std;

#include "servant/ServantProxy.h"
#include "servant/Servant.h"
#include "promise/promise.h"


namespace taf
{
    struct StatMicMsgHead : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "taf.StatMicMsgHead";
        }
        static string MD5()
        {
            return "82469c9496b8aa2d416fd861a3c753e6";
        }
        StatMicMsgHead()
        :masterName(""),slaveName(""),interfaceName(""),masterIp(""),slaveIp(""),slavePort(0),returnValue(0),slaveSetName(""),slaveSetArea(""),slaveSetID(""),tafVersion(""),sMasterSetInfo(""),sSlaveContainer(""),sMasterContainer(""),iStatVer(1)
        {
        }
        void resetDefautlt()
        {
            masterName = "";
            slaveName = "";
            interfaceName = "";
            masterIp = "";
            slaveIp = "";
            slavePort = 0;
            returnValue = 0;
            slaveSetName = "";
            slaveSetArea = "";
            slaveSetID = "";
            tafVersion = "";
            sMasterSetInfo = "";
            sSlaveContainer = "";
            sMasterContainer = "";
            iStatVer = 1;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(masterName, 0);
            _os.write(slaveName, 1);
            _os.write(interfaceName, 2);
            _os.write(masterIp, 3);
            _os.write(slaveIp, 4);
            _os.write(slavePort, 5);
            _os.write(returnValue, 6);
            _os.write(slaveSetName, 7);
            _os.write(slaveSetArea, 8);
            _os.write(slaveSetID, 9);
            _os.write(tafVersion, 10);
            _os.write(sMasterSetInfo, 11);
            _os.write(sSlaveContainer, 12);
            _os.write(sMasterContainer, 13);
            _os.write(iStatVer, 14);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(masterName, 0, true);
            _is.read(slaveName, 1, true);
            _is.read(interfaceName, 2, true);
            _is.read(masterIp, 3, true);
            _is.read(slaveIp, 4, true);
            _is.read(slavePort, 5, true);
            _is.read(returnValue, 6, true);
            _is.read(slaveSetName, 7, false);
            _is.read(slaveSetArea, 8, false);
            _is.read(slaveSetID, 9, false);
            _is.read(tafVersion, 10, false);
            _is.read(sMasterSetInfo, 11, false);
            _is.read(sSlaveContainer, 12, false);
            _is.read(sMasterContainer, 13, false);
            _is.read(iStatVer, 14, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(masterName,"masterName");
            _ds.display(slaveName,"slaveName");
            _ds.display(interfaceName,"interfaceName");
            _ds.display(masterIp,"masterIp");
            _ds.display(slaveIp,"slaveIp");
            _ds.display(slavePort,"slavePort");
            _ds.display(returnValue,"returnValue");
            _ds.display(slaveSetName,"slaveSetName");
            _ds.display(slaveSetArea,"slaveSetArea");
            _ds.display(slaveSetID,"slaveSetID");
            _ds.display(tafVersion,"tafVersion");
            _ds.display(sMasterSetInfo,"sMasterSetInfo");
            _ds.display(sSlaveContainer,"sSlaveContainer");
            _ds.display(sMasterContainer,"sMasterContainer");
            _ds.display(iStatVer,"iStatVer");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(masterName, true);
            _ds.displaySimple(slaveName, true);
            _ds.displaySimple(interfaceName, true);
            _ds.displaySimple(masterIp, true);
            _ds.displaySimple(slaveIp, true);
            _ds.displaySimple(slavePort, true);
            _ds.displaySimple(returnValue, true);
            _ds.displaySimple(slaveSetName, true);
            _ds.displaySimple(slaveSetArea, true);
            _ds.displaySimple(slaveSetID, true);
            _ds.displaySimple(tafVersion, true);
            _ds.displaySimple(sMasterSetInfo, true);
            _ds.displaySimple(sSlaveContainer, true);
            _ds.displaySimple(sMasterContainer, true);
            _ds.displaySimple(iStatVer, false);
            return _os;
        }
    public:
        std::string masterName;
        std::string slaveName;
        std::string interfaceName;
        std::string masterIp;
        std::string slaveIp;
        taf::Int32 slavePort;
        taf::Int32 returnValue;
        std::string slaveSetName;
        std::string slaveSetArea;
        std::string slaveSetID;
        std::string tafVersion;
        std::string sMasterSetInfo;
        std::string sSlaveContainer;
        std::string sMasterContainer;
        taf::Int32 iStatVer;
    };
    inline bool operator==(const StatMicMsgHead&l, const StatMicMsgHead&r)
    {
        return l.masterName == r.masterName && l.slaveName == r.slaveName && l.interfaceName == r.interfaceName && l.masterIp == r.masterIp && l.slaveIp == r.slaveIp && l.slavePort == r.slavePort && l.returnValue == r.returnValue && l.slaveSetName == r.slaveSetName && l.slaveSetArea == r.slaveSetArea && l.slaveSetID == r.slaveSetID && l.tafVersion == r.tafVersion && l.sMasterSetInfo == r.sMasterSetInfo && l.sSlaveContainer == r.sSlaveContainer && l.sMasterContainer == r.sMasterContainer && l.iStatVer == r.iStatVer;
    }
    inline bool operator!=(const StatMicMsgHead&l, const StatMicMsgHead&r)
    {
        return !(l == r);
    }
    inline bool operator<(const StatMicMsgHead&l, const StatMicMsgHead&r)
    {
        if(l.masterName != r.masterName)  return (l.masterName < r.masterName);
        if(l.slaveName != r.slaveName)  return (l.slaveName < r.slaveName);
        if(l.interfaceName != r.interfaceName)  return (l.interfaceName < r.interfaceName);
        if(l.masterIp != r.masterIp)  return (l.masterIp < r.masterIp);
        if(l.slaveIp != r.slaveIp)  return (l.slaveIp < r.slaveIp);
        if(l.slavePort != r.slavePort)  return (l.slavePort < r.slavePort);
        if(l.returnValue != r.returnValue)  return (l.returnValue < r.returnValue);
        if(l.slaveSetName != r.slaveSetName)  return (l.slaveSetName < r.slaveSetName);
        if(l.slaveSetArea != r.slaveSetArea)  return (l.slaveSetArea < r.slaveSetArea);
        if(l.slaveSetID != r.slaveSetID)  return (l.slaveSetID < r.slaveSetID);
        if(l.tafVersion != r.tafVersion)  return (l.tafVersion < r.tafVersion);
        if(l.sMasterSetInfo != r.sMasterSetInfo)  return (l.sMasterSetInfo < r.sMasterSetInfo);
        if(l.sSlaveContainer != r.sSlaveContainer)  return (l.sSlaveContainer < r.sSlaveContainer);
        if(l.sMasterContainer != r.sMasterContainer)  return (l.sMasterContainer < r.sMasterContainer);
        if(l.iStatVer != r.iStatVer)  return (l.iStatVer < r.iStatVer);
        return false;
    }
    inline bool operator<=(const StatMicMsgHead&l, const StatMicMsgHead&r)
    {
        return !(r < l);
    }
    inline bool operator>(const StatMicMsgHead&l, const StatMicMsgHead&r)
    {
        return r < l;
    }
    inline bool operator>=(const StatMicMsgHead&l, const StatMicMsgHead&r)
    {
        return !(l < r);
    }

    struct StatMicMsgBody : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "taf.StatMicMsgBody";
        }
        static string MD5()
        {
            return "5be1d7cb771a2e64ee5013d4f743ff7d";
        }
        StatMicMsgBody()
        :count(0),timeoutCount(0),execCount(0),totalRspTime(0),maxRspTime(0),minRspTime(0),weightValue(0),weightCount(0)
        {
        }
        void resetDefautlt()
        {
            count = 0;
            timeoutCount = 0;
            execCount = 0;
            totalRspTime = 0;
            maxRspTime = 0;
            minRspTime = 0;
            weightValue = 0;
            weightCount = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(count, 0);
            _os.write(timeoutCount, 1);
            _os.write(execCount, 2);
            _os.write(intervalCount, 3);
            _os.write(totalRspTime, 4);
            _os.write(maxRspTime, 5);
            _os.write(minRspTime, 6);
            _os.write(retValue, 7);
            _os.write(weightValue, 8);
            _os.write(weightCount, 9);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(count, 0, true);
            _is.read(timeoutCount, 1, true);
            _is.read(execCount, 2, true);
            _is.read(intervalCount, 3, true);
            _is.read(totalRspTime, 4, true);
            _is.read(maxRspTime, 5, true);
            _is.read(minRspTime, 6, true);
            _is.read(retValue, 7, false);
            _is.read(weightValue, 8, false);
            _is.read(weightCount, 9, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(count,"count");
            _ds.display(timeoutCount,"timeoutCount");
            _ds.display(execCount,"execCount");
            _ds.display(intervalCount,"intervalCount");
            _ds.display(totalRspTime,"totalRspTime");
            _ds.display(maxRspTime,"maxRspTime");
            _ds.display(minRspTime,"minRspTime");
            _ds.display(retValue,"retValue");
            _ds.display(weightValue,"weightValue");
            _ds.display(weightCount,"weightCount");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(count, true);
            _ds.displaySimple(timeoutCount, true);
            _ds.displaySimple(execCount, true);
            _ds.displaySimple(intervalCount, true);
            _ds.displaySimple(totalRspTime, true);
            _ds.displaySimple(maxRspTime, true);
            _ds.displaySimple(minRspTime, true);
            _ds.displaySimple(retValue, true);
            _ds.displaySimple(weightValue, true);
            _ds.displaySimple(weightCount, false);
            return _os;
        }
    public:
        taf::Int32 count;
        taf::Int32 timeoutCount;
        taf::Int32 execCount;
        map<taf::Int32, taf::Int32> intervalCount;
        taf::Int64 totalRspTime;
        taf::Int32 maxRspTime;
        taf::Int32 minRspTime;
        map<taf::Int64, taf::Int32> retValue;
        taf::Int32 weightValue;
        taf::Int32 weightCount;
    };
    inline bool operator==(const StatMicMsgBody&l, const StatMicMsgBody&r)
    {
        return l.count == r.count && l.timeoutCount == r.timeoutCount && l.execCount == r.execCount && l.intervalCount == r.intervalCount && l.totalRspTime == r.totalRspTime && l.maxRspTime == r.maxRspTime && l.minRspTime == r.minRspTime && l.retValue == r.retValue && l.weightValue == r.weightValue && l.weightCount == r.weightCount;
    }
    inline bool operator!=(const StatMicMsgBody&l, const StatMicMsgBody&r)
    {
        return !(l == r);
    }

    struct StatSampleMsg : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "taf.StatSampleMsg";
        }
        static string MD5()
        {
            return "6efbf75cbea7aaef8f94c2f902f62e47";
        }
        StatSampleMsg()
        :unid(""),masterName(""),slaveName(""),interfaceName(""),masterIp(""),slaveIp(""),depth(0),width(0),parentWidth(0)
        {
        }
        void resetDefautlt()
        {
            unid = "";
            masterName = "";
            slaveName = "";
            interfaceName = "";
            masterIp = "";
            slaveIp = "";
            depth = 0;
            width = 0;
            parentWidth = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(unid, 0);
            _os.write(masterName, 1);
            _os.write(slaveName, 2);
            _os.write(interfaceName, 3);
            _os.write(masterIp, 4);
            _os.write(slaveIp, 5);
            _os.write(depth, 6);
            _os.write(width, 7);
            _os.write(parentWidth, 8);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(unid, 0, true);
            _is.read(masterName, 1, true);
            _is.read(slaveName, 2, true);
            _is.read(interfaceName, 3, true);
            _is.read(masterIp, 4, true);
            _is.read(slaveIp, 5, true);
            _is.read(depth, 6, true);
            _is.read(width, 7, true);
            _is.read(parentWidth, 8, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(unid,"unid");
            _ds.display(masterName,"masterName");
            _ds.display(slaveName,"slaveName");
            _ds.display(interfaceName,"interfaceName");
            _ds.display(masterIp,"masterIp");
            _ds.display(slaveIp,"slaveIp");
            _ds.display(depth,"depth");
            _ds.display(width,"width");
            _ds.display(parentWidth,"parentWidth");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(unid, true);
            _ds.displaySimple(masterName, true);
            _ds.displaySimple(slaveName, true);
            _ds.displaySimple(interfaceName, true);
            _ds.displaySimple(masterIp, true);
            _ds.displaySimple(slaveIp, true);
            _ds.displaySimple(depth, true);
            _ds.displaySimple(width, true);
            _ds.displaySimple(parentWidth, false);
            return _os;
        }
    public:
        std::string unid;
        std::string masterName;
        std::string slaveName;
        std::string interfaceName;
        std::string masterIp;
        std::string slaveIp;
        taf::Int32 depth;
        taf::Int32 width;
        taf::Int32 parentWidth;
    };
    inline bool operator==(const StatSampleMsg&l, const StatSampleMsg&r)
    {
        return l.unid == r.unid && l.masterName == r.masterName && l.slaveName == r.slaveName && l.interfaceName == r.interfaceName && l.masterIp == r.masterIp && l.slaveIp == r.slaveIp && l.depth == r.depth && l.width == r.width && l.parentWidth == r.parentWidth;
    }
    inline bool operator!=(const StatSampleMsg&l, const StatSampleMsg&r)
    {
        return !(l == r);
    }

    struct ProxyInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "taf.ProxyInfo";
        }
        static string MD5()
        {
            return "959e5f645613d6d7c2f3708766a01b87";
        }
        ProxyInfo()
        :bFromClient(true)
        {
        }
        void resetDefautlt()
        {
            bFromClient = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(bFromClient, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(bFromClient, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(bFromClient,"bFromClient");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(bFromClient, false);
            return _os;
        }
    public:
        taf::Bool bFromClient;
    };
    inline bool operator==(const ProxyInfo&l, const ProxyInfo&r)
    {
        return l.bFromClient == r.bFromClient;
    }
    inline bool operator!=(const ProxyInfo&l, const ProxyInfo&r)
    {
        return !(l == r);
    }

    /* callback of async proxy for client */
    class StatFPrxCallback: public taf::ServantProxyCallback
    {
    public:
        virtual ~StatFPrxCallback(){}
        virtual void callback_reportMicMsg(taf::Int32 ret)
        { throw std::runtime_error("callback_reportMicMsg() override incorrect."); }
        virtual void callback_reportMicMsg_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_reportMicMsg_exception() override incorrect."); }

        virtual void callback_reportSampleMsg(taf::Int32 ret)
        { throw std::runtime_error("callback_reportSampleMsg() override incorrect."); }
        virtual void callback_reportSampleMsg_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_reportSampleMsg_exception() override incorrect."); }

        virtual void callback_reportProxyMicMsg(taf::Int32 ret)
        { throw std::runtime_error("callback_reportProxyMicMsg() override incorrect."); }
        virtual void callback_reportProxyMicMsg_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_reportProxyMicMsg_exception() override incorrect."); }

    public:
        virtual const map<std::string, std::string> & getResponseContext() const;

    public:
        virtual int onDispatch(taf::ReqMessagePtr msg);
    };
    typedef taf::TC_AutoPtr<StatFPrxCallback> StatFPrxCallbackPtr;

    /* callback of promise async proxy for client */
    class StatFPrxCallbackPromise: public taf::ServantProxyCallback
    {
    public:
        virtual ~StatFPrxCallbackPromise(){}
    public:
        struct PromisereportMicMsg: virtual public TC_HandleBase
        {
        public:
            taf::Int32 _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef taf::TC_AutoPtr< StatFPrxCallbackPromise::PromisereportMicMsg > PromisereportMicMsgPtr;

        StatFPrxCallbackPromise(const promise::Promise< StatFPrxCallbackPromise::PromisereportMicMsgPtr > &promise)
        : _promise_reportMicMsg(promise)
        {}
        
        virtual void callback_reportMicMsg(const StatFPrxCallbackPromise::PromisereportMicMsgPtr &ptr)
        {
            _promise_reportMicMsg.setValue(ptr);
        }
        virtual void callback_reportMicMsg_exception(taf::Int32 ret)
        {
            std::string str("");
            str += "Function:reportMicMsg_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_reportMicMsg.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< StatFPrxCallbackPromise::PromisereportMicMsgPtr > _promise_reportMicMsg;

    public:
        struct PromisereportSampleMsg: virtual public TC_HandleBase
        {
        public:
            taf::Int32 _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef taf::TC_AutoPtr< StatFPrxCallbackPromise::PromisereportSampleMsg > PromisereportSampleMsgPtr;

        StatFPrxCallbackPromise(const promise::Promise< StatFPrxCallbackPromise::PromisereportSampleMsgPtr > &promise)
        : _promise_reportSampleMsg(promise)
        {}
        
        virtual void callback_reportSampleMsg(const StatFPrxCallbackPromise::PromisereportSampleMsgPtr &ptr)
        {
            _promise_reportSampleMsg.setValue(ptr);
        }
        virtual void callback_reportSampleMsg_exception(taf::Int32 ret)
        {
            std::string str("");
            str += "Function:reportSampleMsg_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_reportSampleMsg.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< StatFPrxCallbackPromise::PromisereportSampleMsgPtr > _promise_reportSampleMsg;

    public:
        struct PromisereportProxyMicMsg: virtual public TC_HandleBase
        {
        public:
            taf::Int32 _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef taf::TC_AutoPtr< StatFPrxCallbackPromise::PromisereportProxyMicMsg > PromisereportProxyMicMsgPtr;

        StatFPrxCallbackPromise(const promise::Promise< StatFPrxCallbackPromise::PromisereportProxyMicMsgPtr > &promise)
        : _promise_reportProxyMicMsg(promise)
        {}
        
        virtual void callback_reportProxyMicMsg(const StatFPrxCallbackPromise::PromisereportProxyMicMsgPtr &ptr)
        {
            _promise_reportProxyMicMsg.setValue(ptr);
        }
        virtual void callback_reportProxyMicMsg_exception(taf::Int32 ret)
        {
            std::string str("");
            str += "Function:reportProxyMicMsg_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_reportProxyMicMsg.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< StatFPrxCallbackPromise::PromisereportProxyMicMsgPtr > _promise_reportProxyMicMsg;

    public:
        virtual int onDispatch(taf::ReqMessagePtr msg);
    };
    typedef taf::TC_AutoPtr<StatFPrxCallbackPromise> StatFPrxCallbackPromisePtr;

    /* callback of coroutine async proxy for client */
    class StatFCoroPrxCallback: public StatFPrxCallback
    {
    public:
        virtual ~StatFCoroPrxCallback(){}
    public:
        virtual const map<std::string, std::string> & getResponseContext() const { return _mRspContext; }

        virtual void setResponseContext(const map<std::string, std::string> &mContext) { _mRspContext = mContext; }

    public:
        virtual int onDispatch(taf::ReqMessagePtr msg);
    protected:
        map<std::string, std::string> _mRspContext;
    };
    typedef taf::TC_AutoPtr<StatFCoroPrxCallback> StatFCoroPrxCallbackPtr;

    /* proxy for client */
    class StatFProxy : public taf::ServantProxy
    {
    public:
        typedef map<string, string> TAF_CONTEXT;
        taf::Int32 reportMicMsg(const map<taf::StatMicMsgHead, taf::StatMicMsgBody> & msg,taf::Bool bFromClient,const map<string, string> &context = TAF_CONTEXT(),map<string, string> * pResponseContext = NULL);
        void async_reportMicMsg(StatFPrxCallbackPtr callback,const map<taf::StatMicMsgHead, taf::StatMicMsgBody> & msg,taf::Bool bFromClient,const map<string, string> &context = TAF_CONTEXT());

        promise::Future< StatFPrxCallbackPromise::PromisereportMicMsgPtr > promise_async_reportMicMsg(const map<taf::StatMicMsgHead, taf::StatMicMsgBody> & msg,taf::Bool bFromClient,const map<string, string> &context = TAF_CONTEXT());
        void coro_reportMicMsg(StatFCoroPrxCallbackPtr callback,const map<taf::StatMicMsgHead, taf::StatMicMsgBody> & msg,taf::Bool bFromClient,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 reportSampleMsg(const vector<taf::StatSampleMsg> & msg,const map<string, string> &context = TAF_CONTEXT(),map<string, string> * pResponseContext = NULL);
        void async_reportSampleMsg(StatFPrxCallbackPtr callback,const vector<taf::StatSampleMsg> & msg,const map<string, string> &context = TAF_CONTEXT());

        promise::Future< StatFPrxCallbackPromise::PromisereportSampleMsgPtr > promise_async_reportSampleMsg(const vector<taf::StatSampleMsg> & msg,const map<string, string> &context = TAF_CONTEXT());
        void coro_reportSampleMsg(StatFCoroPrxCallbackPtr callback,const vector<taf::StatSampleMsg> & msg,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 reportProxyMicMsg(const map<taf::StatMicMsgHead, taf::StatMicMsgBody> & msg,const taf::ProxyInfo & proxyInfo,const map<string, string> &context = TAF_CONTEXT(),map<string, string> * pResponseContext = NULL);
        void async_reportProxyMicMsg(StatFPrxCallbackPtr callback,const map<taf::StatMicMsgHead, taf::StatMicMsgBody> & msg,const taf::ProxyInfo & proxyInfo,const map<string, string> &context = TAF_CONTEXT());

        promise::Future< StatFPrxCallbackPromise::PromisereportProxyMicMsgPtr > promise_async_reportProxyMicMsg(const map<taf::StatMicMsgHead, taf::StatMicMsgBody> & msg,const taf::ProxyInfo & proxyInfo,const map<string, string> &context = TAF_CONTEXT());
        void coro_reportProxyMicMsg(StatFCoroPrxCallbackPtr callback,const map<taf::StatMicMsgHead, taf::StatMicMsgBody> & msg,const taf::ProxyInfo & proxyInfo,const map<string, string> &context = TAF_CONTEXT());

        StatFProxy* taf_hash(int64_t key);
        StatFProxy* taf_consistent_hash(int64_t key);
        StatFProxy* taf_set_timeout(int msecond);
        StatFProxy* taf_loaded();
    };
    typedef taf::TC_AutoPtr<StatFProxy> StatFPrx;

    /* servant for server */
    class StatF : public taf::Servant
    {
    public:
        virtual ~StatF(){}
        virtual taf::Int32 reportMicMsg(const map<taf::StatMicMsgHead, taf::StatMicMsgBody> & msg,taf::Bool bFromClient,taf::JceCurrentPtr current) = 0;
        static void async_response_reportMicMsg(taf::JceCurrentPtr current, taf::Int32 _ret);

        virtual taf::Int32 reportSampleMsg(const vector<taf::StatSampleMsg> & msg,taf::JceCurrentPtr current) = 0;
        static void async_response_reportSampleMsg(taf::JceCurrentPtr current, taf::Int32 _ret);

        virtual taf::Int32 reportProxyMicMsg(const map<taf::StatMicMsgHead, taf::StatMicMsgBody> & msg,const taf::ProxyInfo & proxyInfo,taf::JceCurrentPtr current) = 0;
        static void async_response_reportProxyMicMsg(taf::JceCurrentPtr current, taf::Int32 _ret);

    public:
        int onDispatch(taf::JceCurrentPtr _current, vector<char> &_sResponseBuffer);
    };

    inline taf::Int32 StatFProxy::reportMicMsg(const map<taf::StatMicMsgHead, taf::StatMicMsgBody> &msg, taf::Bool bFromClient, const map<string, string> &context,map<string, string> * pResponseContext)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(msg, 1);
        _os.write(bFromClient, 2);
        taf::ResponsePacket rep;
        std::map<string, string> _mStatus;
        taf_invoke(taf::JCENORMAL,"reportMicMsg", _os.getByteBuffer(), context, _mStatus, rep);
        if(pResponseContext)
        {
            *pResponseContext = rep.context;
        }

        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        return _ret;
    }

    inline void StatF::async_response_reportMicMsg(taf::JceCurrentPtr current, taf::Int32 _ret)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    inline void StatFProxy::async_reportMicMsg(StatFPrxCallbackPtr callback,const map<taf::StatMicMsgHead, taf::StatMicMsgBody> &msg,taf::Bool bFromClient,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(msg, 1);
        _os.write(bFromClient, 2);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"reportMicMsg", _os.getByteBuffer(), context, _mStatus, callback);
    }
    
    inline promise::Future< StatFPrxCallbackPromise::PromisereportMicMsgPtr > StatFProxy::promise_async_reportMicMsg(const map<taf::StatMicMsgHead, taf::StatMicMsgBody> &msg,taf::Bool bFromClient,const map<string, string>& context)
    {
        promise::Promise< StatFPrxCallbackPromise::PromisereportMicMsgPtr > promise;
        StatFPrxCallbackPromisePtr callback = new StatFPrxCallbackPromise(promise);

        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(msg, 1);
        _os.write(bFromClient, 2);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"reportMicMsg", _os.getByteBuffer(), context, _mStatus, callback);

        return promise.getFuture();
    }

    inline void StatFProxy::coro_reportMicMsg(StatFCoroPrxCallbackPtr callback,const map<taf::StatMicMsgHead, taf::StatMicMsgBody> &msg,taf::Bool bFromClient,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(msg, 1);
        _os.write(bFromClient, 2);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"reportMicMsg", _os.getByteBuffer(), context, _mStatus, callback, true);
    }

    inline taf::Int32 StatFProxy::reportProxyMicMsg(const map<taf::StatMicMsgHead, taf::StatMicMsgBody> &msg, const taf::ProxyInfo &proxyInfo, const map<string, string> &context,map<string, string> * pResponseContext)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(msg, 1);
        _os.write(proxyInfo, 2);
        taf::ResponsePacket rep;
        std::map<string, string> _mStatus;
        taf_invoke(taf::JCENORMAL,"reportProxyMicMsg", _os.getByteBuffer(), context, _mStatus, rep);
        if(pResponseContext)
        {
            *pResponseContext = rep.context;
        }

        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        return _ret;
    }

    inline void StatF::async_response_reportProxyMicMsg(taf::JceCurrentPtr current, taf::Int32 _ret)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    inline void StatFProxy::async_reportProxyMicMsg(StatFPrxCallbackPtr callback,const map<taf::StatMicMsgHead, taf::StatMicMsgBody> &msg,const taf::ProxyInfo &proxyInfo,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(msg, 1);
        _os.write(proxyInfo, 2);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"reportProxyMicMsg", _os.getByteBuffer(), context, _mStatus, callback);
    }
    
    inline promise::Future< StatFPrxCallbackPromise::PromisereportProxyMicMsgPtr > StatFProxy::promise_async_reportProxyMicMsg(const map<taf::StatMicMsgHead, taf::StatMicMsgBody> &msg,const taf::ProxyInfo &proxyInfo,const map<string, string>& context)
    {
        promise::Promise< StatFPrxCallbackPromise::PromisereportProxyMicMsgPtr > promise;
        StatFPrxCallbackPromisePtr callback = new StatFPrxCallbackPromise(promise);

        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(msg, 1);
        _os.write(proxyInfo, 2);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"reportProxyMicMsg", _os.getByteBuffer(), context, _mStatus, callback);

        return promise.getFuture();
    }

    inline void StatFProxy::coro_reportProxyMicMsg(StatFCoroPrxCallbackPtr callback,const map<taf::StatMicMsgHead, taf::StatMicMsgBody> &msg,const taf::ProxyInfo &proxyInfo,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(msg, 1);
        _os.write(proxyInfo, 2);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"reportProxyMicMsg", _os.getByteBuffer(), context, _mStatus, callback, true);
    }

    inline taf::Int32 StatFProxy::reportSampleMsg(const vector<taf::StatSampleMsg> &msg, const map<string, string> &context,map<string, string> * pResponseContext)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(msg, 1);
        taf::ResponsePacket rep;
        std::map<string, string> _mStatus;
        taf_invoke(taf::JCENORMAL,"reportSampleMsg", _os.getByteBuffer(), context, _mStatus, rep);
        if(pResponseContext)
        {
            *pResponseContext = rep.context;
        }

        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        return _ret;
    }

    inline void StatF::async_response_reportSampleMsg(taf::JceCurrentPtr current, taf::Int32 _ret)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    inline void StatFProxy::async_reportSampleMsg(StatFPrxCallbackPtr callback,const vector<taf::StatSampleMsg> &msg,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(msg, 1);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"reportSampleMsg", _os.getByteBuffer(), context, _mStatus, callback);
    }
    
    inline promise::Future< StatFPrxCallbackPromise::PromisereportSampleMsgPtr > StatFProxy::promise_async_reportSampleMsg(const vector<taf::StatSampleMsg> &msg,const map<string, string>& context)
    {
        promise::Promise< StatFPrxCallbackPromise::PromisereportSampleMsgPtr > promise;
        StatFPrxCallbackPromisePtr callback = new StatFPrxCallbackPromise(promise);

        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(msg, 1);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"reportSampleMsg", _os.getByteBuffer(), context, _mStatus, callback);

        return promise.getFuture();
    }

    inline void StatFProxy::coro_reportSampleMsg(StatFCoroPrxCallbackPtr callback,const vector<taf::StatSampleMsg> &msg,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(msg, 1);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"reportSampleMsg", _os.getByteBuffer(), context, _mStatus, callback, true);
    }

    inline StatFProxy* StatFProxy::taf_hash(int64_t key)
    {
        return (StatFProxy*)ServantProxy::taf_hash(key);
    }

    inline StatFProxy* StatFProxy::taf_consistent_hash(int64_t key)
    {
        return (StatFProxy*)ServantProxy::taf_consistent_hash(key);
    }

    inline StatFProxy* StatFProxy::taf_set_timeout(int msecond)
    {
        return (StatFProxy*)ServantProxy::taf_set_timeout(msecond);
    }

    inline StatFProxy* StatFProxy::taf_loaded()
    {
        return (StatFProxy*)ServantProxy::taf_loaded();
    }

    static ::std::string __taf__StatF_all[]=
    {
        "reportMicMsg",
        "reportProxyMicMsg",
        "reportSampleMsg"
    };

    inline const map<std::string, std::string> & StatFPrxCallback::getResponseContext() const
    {
        CallbackThreadData * pCbtd = CallbackThreadData::getData();
        assert(pCbtd != NULL);

        if(!pCbtd->getContextValid())
        {
            throw TC_Exception("cann't get response context");
        }
        return pCbtd->getResponseContext();
    }

    inline int StatFPrxCallback::onDispatch(taf::ReqMessagePtr msg)
    {
        pair<string*, string*> r = equal_range(__taf__StatF_all, __taf__StatF_all+3, string(msg->request.sFuncName));
        if(r.first == r.second) return taf::JCESERVERNOFUNCERR;
        switch(r.first - __taf__StatF_all)
        {
            case 0:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_reportMicMsg_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                CallbackThreadData * pCbtd = CallbackThreadData::getData();
                assert(pCbtd != NULL);

                pCbtd->setResponseContext(msg->response.context);

                callback_reportMicMsg(_ret);

                pCbtd->delResponseContext();

                return taf::JCESERVERSUCCESS;

            }
            case 1:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_reportProxyMicMsg_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                CallbackThreadData * pCbtd = CallbackThreadData::getData();
                assert(pCbtd != NULL);

                pCbtd->setResponseContext(msg->response.context);

                callback_reportProxyMicMsg(_ret);

                pCbtd->delResponseContext();

                return taf::JCESERVERSUCCESS;

            }
            case 2:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_reportSampleMsg_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                CallbackThreadData * pCbtd = CallbackThreadData::getData();
                assert(pCbtd != NULL);

                pCbtd->setResponseContext(msg->response.context);

                callback_reportSampleMsg(_ret);

                pCbtd->delResponseContext();

                return taf::JCESERVERSUCCESS;

            }
        }
        return taf::JCESERVERNOFUNCERR;
    }

    inline int StatFPrxCallbackPromise::onDispatch(taf::ReqMessagePtr msg)
    {
        pair<string*, string*> r = equal_range(__taf__StatF_all, __taf__StatF_all+3, string(msg->request.sFuncName));
        if(r.first == r.second) return taf::JCESERVERNOFUNCERR;
        switch(r.first - __taf__StatF_all)
        {
            case 0:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_reportMicMsg_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);

                StatFPrxCallbackPromise::PromisereportMicMsgPtr ptr = new StatFPrxCallbackPromise::PromisereportMicMsg();

                _is.read(ptr->_ret, 0, true);


                ptr->_mRspContext = msg->response.context;

                callback_reportMicMsg(ptr);

                return taf::JCESERVERSUCCESS;

            }
            case 1:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_reportProxyMicMsg_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);

                StatFPrxCallbackPromise::PromisereportProxyMicMsgPtr ptr = new StatFPrxCallbackPromise::PromisereportProxyMicMsg();

                _is.read(ptr->_ret, 0, true);


                ptr->_mRspContext = msg->response.context;

                callback_reportProxyMicMsg(ptr);

                return taf::JCESERVERSUCCESS;

            }
            case 2:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_reportSampleMsg_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);

                StatFPrxCallbackPromise::PromisereportSampleMsgPtr ptr = new StatFPrxCallbackPromise::PromisereportSampleMsg();

                _is.read(ptr->_ret, 0, true);


                ptr->_mRspContext = msg->response.context;

                callback_reportSampleMsg(ptr);

                return taf::JCESERVERSUCCESS;

            }
        }
        return taf::JCESERVERNOFUNCERR;
    }

    inline int StatFCoroPrxCallback::onDispatch(taf::ReqMessagePtr msg)
    {
        pair<string*, string*> r = equal_range(__taf__StatF_all, __taf__StatF_all+3, string(msg->request.sFuncName));
        if(r.first == r.second) return taf::JCESERVERNOFUNCERR;
        switch(r.first - __taf__StatF_all)
        {
            case 0:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_reportMicMsg_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                setResponseContext(msg->response.context);

                callback_reportMicMsg(_ret);

                return taf::JCESERVERSUCCESS;

            }
            case 1:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_reportProxyMicMsg_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                setResponseContext(msg->response.context);

                callback_reportProxyMicMsg(_ret);

                return taf::JCESERVERSUCCESS;

            }
            case 2:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_reportSampleMsg_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                setResponseContext(msg->response.context);

                callback_reportSampleMsg(_ret);

                return taf::JCESERVERSUCCESS;

            }
        }
        return taf::JCESERVERNOFUNCERR;
    }

    inline int StatF::onDispatch(taf::JceCurrentPtr _current, vector<char> &_sResponseBuffer)
    {
        pair<string*, string*> r = equal_range(__taf__StatF_all, __taf__StatF_all+3, _current->getFuncName());
        if(r.first == r.second) return taf::JCESERVERNOFUNCERR;
        switch(r.first - __taf__StatF_all)
        {
            case 0:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                map<taf::StatMicMsgHead, taf::StatMicMsgBody> msg;
                taf::Bool bFromClient = false;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("msg", msg);
                    tafAttr.get("bFromClient", bFromClient);
                }
                else
                {
                    _is.read(msg, 1, true);
                    _is.read(bFromClient, 2, true);
                }
                taf::Int32 _ret = reportMicMsg(msg,bFromClient, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 1:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                map<taf::StatMicMsgHead, taf::StatMicMsgBody> msg;
                taf::ProxyInfo proxyInfo;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("msg", msg);
                    tafAttr.get("proxyInfo", proxyInfo);
                }
                else
                {
                    _is.read(msg, 1, true);
                    _is.read(proxyInfo, 2, true);
                }
                taf::Int32 _ret = reportProxyMicMsg(msg,proxyInfo, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 2:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                vector<taf::StatSampleMsg> msg;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("msg", msg);
                }
                else
                {
                    _is.read(msg, 1, true);
                }
                taf::Int32 _ret = reportSampleMsg(msg, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
        }
        return taf::JCESERVERNOFUNCERR;
    }

} // end namespace taf

#define taf_StatMicMsgHead_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.masterName,b.masterName);jce_copy_struct(a.slaveName,b.slaveName);jce_copy_struct(a.interfaceName,b.interfaceName);jce_copy_struct(a.masterIp,b.masterIp);jce_copy_struct(a.slaveIp,b.slaveIp);jce_copy_struct(a.slavePort,b.slavePort);jce_copy_struct(a.returnValue,b.returnValue);jce_copy_struct(a.slaveSetName,b.slaveSetName);jce_copy_struct(a.slaveSetArea,b.slaveSetArea);jce_copy_struct(a.slaveSetID,b.slaveSetID);jce_copy_struct(a.tafVersion,b.tafVersion);jce_copy_struct(a.sMasterSetInfo,b.sMasterSetInfo);jce_copy_struct(a.sSlaveContainer,b.sSlaveContainer);jce_copy_struct(a.sMasterContainer,b.sMasterContainer);jce_copy_struct(a.iStatVer,b.iStatVer);

#define taf_StatMicMsgBody_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.count,b.count);jce_copy_struct(a.timeoutCount,b.timeoutCount);jce_copy_struct(a.execCount,b.execCount);jce_copy_struct(a.intervalCount,b.intervalCount);jce_copy_struct(a.totalRspTime,b.totalRspTime);jce_copy_struct(a.maxRspTime,b.maxRspTime);jce_copy_struct(a.minRspTime,b.minRspTime);jce_copy_struct(a.retValue,b.retValue);jce_copy_struct(a.weightValue,b.weightValue);jce_copy_struct(a.weightCount,b.weightCount);

#define taf_StatSampleMsg_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.unid,b.unid);jce_copy_struct(a.masterName,b.masterName);jce_copy_struct(a.slaveName,b.slaveName);jce_copy_struct(a.interfaceName,b.interfaceName);jce_copy_struct(a.masterIp,b.masterIp);jce_copy_struct(a.slaveIp,b.slaveIp);jce_copy_struct(a.depth,b.depth);jce_copy_struct(a.width,b.width);jce_copy_struct(a.parentWidth,b.parentWidth);

#define taf_ProxyInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.bFromClient,b.bFromClient);


#endif

