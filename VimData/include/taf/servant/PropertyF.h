// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.2.2.11 by WSRD Tencent.
// Generated from `PropertyF.jce'
// **********************************************************************

#ifndef __PROPERTYF_H_
#define __PROPERTYF_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
#include "jce/wup.h"
#include "servant/BaseF.h"

using namespace wup;
using namespace std;

#include "servant/ServantProxy.h"
#include "servant/Servant.h"
#include "promise/promise.h"


namespace taf
{
    struct StatPropMsgHead : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "taf.StatPropMsgHead";
        }
        static string MD5()
        {
            return "a9ab9ede8ca4b10b1a8d8ce6227ab9e0";
        }
        StatPropMsgHead()
        :moduleName(""),ip(""),propertyName(""),setName(""),setArea(""),setID(""),sContainer(""),iPropertyVer(1)
        {
        }
        void resetDefautlt()
        {
            moduleName = "";
            ip = "";
            propertyName = "";
            setName = "";
            setArea = "";
            setID = "";
            sContainer = "";
            iPropertyVer = 1;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(moduleName, 0);
            _os.write(ip, 1);
            _os.write(propertyName, 2);
            _os.write(setName, 3);
            _os.write(setArea, 4);
            _os.write(setID, 5);
            _os.write(sContainer, 6);
            _os.write(iPropertyVer, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(moduleName, 0, true);
            _is.read(ip, 1, true);
            _is.read(propertyName, 2, true);
            _is.read(setName, 3, false);
            _is.read(setArea, 4, false);
            _is.read(setID, 5, false);
            _is.read(sContainer, 6, false);
            _is.read(iPropertyVer, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(moduleName,"moduleName");
            _ds.display(ip,"ip");
            _ds.display(propertyName,"propertyName");
            _ds.display(setName,"setName");
            _ds.display(setArea,"setArea");
            _ds.display(setID,"setID");
            _ds.display(sContainer,"sContainer");
            _ds.display(iPropertyVer,"iPropertyVer");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(moduleName, true);
            _ds.displaySimple(ip, true);
            _ds.displaySimple(propertyName, true);
            _ds.displaySimple(setName, true);
            _ds.displaySimple(setArea, true);
            _ds.displaySimple(setID, true);
            _ds.displaySimple(sContainer, true);
            _ds.displaySimple(iPropertyVer, false);
            return _os;
        }
    public:
        std::string moduleName;
        std::string ip;
        std::string propertyName;
        std::string setName;
        std::string setArea;
        std::string setID;
        std::string sContainer;
        taf::Int32 iPropertyVer;
    };
    inline bool operator==(const StatPropMsgHead&l, const StatPropMsgHead&r)
    {
        return l.moduleName == r.moduleName && l.ip == r.ip && l.propertyName == r.propertyName && l.setName == r.setName && l.setArea == r.setArea && l.setID == r.setID && l.sContainer == r.sContainer && l.iPropertyVer == r.iPropertyVer;
    }
    inline bool operator!=(const StatPropMsgHead&l, const StatPropMsgHead&r)
    {
        return !(l == r);
    }
    inline bool operator<(const StatPropMsgHead&l, const StatPropMsgHead&r)
    {
        if(l.moduleName != r.moduleName)  return (l.moduleName < r.moduleName);
        if(l.ip != r.ip)  return (l.ip < r.ip);
        if(l.propertyName != r.propertyName)  return (l.propertyName < r.propertyName);
        if(l.setName != r.setName)  return (l.setName < r.setName);
        if(l.setArea != r.setArea)  return (l.setArea < r.setArea);
        if(l.setID != r.setID)  return (l.setID < r.setID);
        return false;
    }
    inline bool operator<=(const StatPropMsgHead&l, const StatPropMsgHead&r)
    {
        return !(r < l);
    }
    inline bool operator>(const StatPropMsgHead&l, const StatPropMsgHead&r)
    {
        return r < l;
    }
    inline bool operator>=(const StatPropMsgHead&l, const StatPropMsgHead&r)
    {
        return !(l < r);
    }

    struct StatPropInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "taf.StatPropInfo";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        StatPropInfo()
        :policy(""),value("")
        {
        }
        void resetDefautlt()
        {
            policy = "";
            value = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(policy, 0);
            _os.write(value, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(policy, 0, true);
            _is.read(value, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(policy,"policy");
            _ds.display(value,"value");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(policy, true);
            _ds.displaySimple(value, false);
            return _os;
        }
    public:
        std::string policy;
        std::string value;
    };
    inline bool operator==(const StatPropInfo&l, const StatPropInfo&r)
    {
        return l.policy == r.policy && l.value == r.value;
    }
    inline bool operator!=(const StatPropInfo&l, const StatPropInfo&r)
    {
        return !(l == r);
    }

    struct StatPropMsgBody : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "taf.StatPropMsgBody";
        }
        static string MD5()
        {
            return "f105a140519677cba2956f19804f41b9";
        }
        StatPropMsgBody()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(vInfo, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(vInfo, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(vInfo,"vInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(vInfo, false);
            return _os;
        }
    public:
        vector<taf::StatPropInfo> vInfo;
    };
    inline bool operator==(const StatPropMsgBody&l, const StatPropMsgBody&r)
    {
        return l.vInfo == r.vInfo;
    }
    inline bool operator!=(const StatPropMsgBody&l, const StatPropMsgBody&r)
    {
        return !(l == r);
    }

    /* callback of async proxy for client */
    class PropertyFPrxCallback: public taf::ServantProxyCallback
    {
    public:
        virtual ~PropertyFPrxCallback(){}
        virtual void callback_reportPropMsg(taf::Int32 ret)
        { throw std::runtime_error("callback_reportPropMsg() override incorrect."); }
        virtual void callback_reportPropMsg_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_reportPropMsg_exception() override incorrect."); }

        virtual void callback_reportTranPropMsg(taf::Int32 ret)
        { throw std::runtime_error("callback_reportTranPropMsg() override incorrect."); }
        virtual void callback_reportTranPropMsg_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_reportTranPropMsg_exception() override incorrect."); }

    public:
        virtual const map<std::string, std::string> & getResponseContext() const;

    public:
        virtual int onDispatch(taf::ReqMessagePtr msg);
    };
    typedef taf::TC_AutoPtr<PropertyFPrxCallback> PropertyFPrxCallbackPtr;

    /* callback of promise async proxy for client */
    class PropertyFPrxCallbackPromise: public taf::ServantProxyCallback
    {
    public:
        virtual ~PropertyFPrxCallbackPromise(){}
    public:
        struct PromisereportPropMsg: virtual public TC_HandleBase
        {
        public:
            taf::Int32 _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef taf::TC_AutoPtr< PropertyFPrxCallbackPromise::PromisereportPropMsg > PromisereportPropMsgPtr;

        PropertyFPrxCallbackPromise(const promise::Promise< PropertyFPrxCallbackPromise::PromisereportPropMsgPtr > &promise)
        : _promise_reportPropMsg(promise)
        {}
        
        virtual void callback_reportPropMsg(const PropertyFPrxCallbackPromise::PromisereportPropMsgPtr &ptr)
        {
            _promise_reportPropMsg.setValue(ptr);
        }
        virtual void callback_reportPropMsg_exception(taf::Int32 ret)
        {
            std::string str("");
            str += "Function:reportPropMsg_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_reportPropMsg.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< PropertyFPrxCallbackPromise::PromisereportPropMsgPtr > _promise_reportPropMsg;

    public:
        struct PromisereportTranPropMsg: virtual public TC_HandleBase
        {
        public:
            taf::Int32 _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef taf::TC_AutoPtr< PropertyFPrxCallbackPromise::PromisereportTranPropMsg > PromisereportTranPropMsgPtr;

        PropertyFPrxCallbackPromise(const promise::Promise< PropertyFPrxCallbackPromise::PromisereportTranPropMsgPtr > &promise)
        : _promise_reportTranPropMsg(promise)
        {}
        
        virtual void callback_reportTranPropMsg(const PropertyFPrxCallbackPromise::PromisereportTranPropMsgPtr &ptr)
        {
            _promise_reportTranPropMsg.setValue(ptr);
        }
        virtual void callback_reportTranPropMsg_exception(taf::Int32 ret)
        {
            std::string str("");
            str += "Function:reportTranPropMsg_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_reportTranPropMsg.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< PropertyFPrxCallbackPromise::PromisereportTranPropMsgPtr > _promise_reportTranPropMsg;

    public:
        virtual int onDispatch(taf::ReqMessagePtr msg);
    };
    typedef taf::TC_AutoPtr<PropertyFPrxCallbackPromise> PropertyFPrxCallbackPromisePtr;

    /* callback of coroutine async proxy for client */
    class PropertyFCoroPrxCallback: public PropertyFPrxCallback
    {
    public:
        virtual ~PropertyFCoroPrxCallback(){}
    public:
        virtual const map<std::string, std::string> & getResponseContext() const { return _mRspContext; }

        virtual void setResponseContext(const map<std::string, std::string> &mContext) { _mRspContext = mContext; }

    public:
        virtual int onDispatch(taf::ReqMessagePtr msg);
    protected:
        map<std::string, std::string> _mRspContext;
    };
    typedef taf::TC_AutoPtr<PropertyFCoroPrxCallback> PropertyFCoroPrxCallbackPtr;

    /* proxy for client */
    class PropertyFProxy : public taf::ServantProxy
    {
    public:
        typedef map<string, string> TAF_CONTEXT;
        taf::Int32 reportPropMsg(const map<taf::StatPropMsgHead, taf::StatPropMsgBody> & statmsg,const map<string, string> &context = TAF_CONTEXT(),map<string, string> * pResponseContext = NULL);
        void async_reportPropMsg(PropertyFPrxCallbackPtr callback,const map<taf::StatPropMsgHead, taf::StatPropMsgBody> & statmsg,const map<string, string> &context = TAF_CONTEXT());

        promise::Future< PropertyFPrxCallbackPromise::PromisereportPropMsgPtr > promise_async_reportPropMsg(const map<taf::StatPropMsgHead, taf::StatPropMsgBody> & statmsg,const map<string, string> &context = TAF_CONTEXT());
        void coro_reportPropMsg(PropertyFCoroPrxCallbackPtr callback,const map<taf::StatPropMsgHead, taf::StatPropMsgBody> & statmsg,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 reportTranPropMsg(const map<taf::StatPropMsgHead, taf::StatPropMsgBody> & statmsg,const map<string, string> &context = TAF_CONTEXT(),map<string, string> * pResponseContext = NULL);
        void async_reportTranPropMsg(PropertyFPrxCallbackPtr callback,const map<taf::StatPropMsgHead, taf::StatPropMsgBody> & statmsg,const map<string, string> &context = TAF_CONTEXT());

        promise::Future< PropertyFPrxCallbackPromise::PromisereportTranPropMsgPtr > promise_async_reportTranPropMsg(const map<taf::StatPropMsgHead, taf::StatPropMsgBody> & statmsg,const map<string, string> &context = TAF_CONTEXT());
        void coro_reportTranPropMsg(PropertyFCoroPrxCallbackPtr callback,const map<taf::StatPropMsgHead, taf::StatPropMsgBody> & statmsg,const map<string, string> &context = TAF_CONTEXT());

        PropertyFProxy* taf_hash(int64_t key);
        PropertyFProxy* taf_consistent_hash(int64_t key);
        PropertyFProxy* taf_set_timeout(int msecond);
        PropertyFProxy* taf_loaded();
    };
    typedef taf::TC_AutoPtr<PropertyFProxy> PropertyFPrx;

    /* servant for server */
    class PropertyF : public taf::Servant
    {
    public:
        virtual ~PropertyF(){}
        virtual taf::Int32 reportPropMsg(const map<taf::StatPropMsgHead, taf::StatPropMsgBody> & statmsg,taf::JceCurrentPtr current) = 0;
        static void async_response_reportPropMsg(taf::JceCurrentPtr current, taf::Int32 _ret);

        virtual taf::Int32 reportTranPropMsg(const map<taf::StatPropMsgHead, taf::StatPropMsgBody> & statmsg,taf::JceCurrentPtr current) = 0;
        static void async_response_reportTranPropMsg(taf::JceCurrentPtr current, taf::Int32 _ret);

    public:
        int onDispatch(taf::JceCurrentPtr _current, vector<char> &_sResponseBuffer);
    };

    inline taf::Int32 PropertyFProxy::reportPropMsg(const map<taf::StatPropMsgHead, taf::StatPropMsgBody> &statmsg, const map<string, string> &context,map<string, string> * pResponseContext)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(statmsg, 1);
        taf::ResponsePacket rep;
        std::map<string, string> _mStatus;
        taf_invoke(taf::JCENORMAL,"reportPropMsg", _os.getByteBuffer(), context, _mStatus, rep);
        if(pResponseContext)
        {
            *pResponseContext = rep.context;
        }

        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        return _ret;
    }

    inline void PropertyF::async_response_reportPropMsg(taf::JceCurrentPtr current, taf::Int32 _ret)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    inline void PropertyFProxy::async_reportPropMsg(PropertyFPrxCallbackPtr callback,const map<taf::StatPropMsgHead, taf::StatPropMsgBody> &statmsg,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(statmsg, 1);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"reportPropMsg", _os.getByteBuffer(), context, _mStatus, callback);
    }
    
    inline promise::Future< PropertyFPrxCallbackPromise::PromisereportPropMsgPtr > PropertyFProxy::promise_async_reportPropMsg(const map<taf::StatPropMsgHead, taf::StatPropMsgBody> &statmsg,const map<string, string>& context)
    {
        promise::Promise< PropertyFPrxCallbackPromise::PromisereportPropMsgPtr > promise;
        PropertyFPrxCallbackPromisePtr callback = new PropertyFPrxCallbackPromise(promise);

        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(statmsg, 1);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"reportPropMsg", _os.getByteBuffer(), context, _mStatus, callback);

        return promise.getFuture();
    }

    inline void PropertyFProxy::coro_reportPropMsg(PropertyFCoroPrxCallbackPtr callback,const map<taf::StatPropMsgHead, taf::StatPropMsgBody> &statmsg,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(statmsg, 1);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"reportPropMsg", _os.getByteBuffer(), context, _mStatus, callback, true);
    }

    inline taf::Int32 PropertyFProxy::reportTranPropMsg(const map<taf::StatPropMsgHead, taf::StatPropMsgBody> &statmsg, const map<string, string> &context,map<string, string> * pResponseContext)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(statmsg, 1);
        taf::ResponsePacket rep;
        std::map<string, string> _mStatus;
        taf_invoke(taf::JCENORMAL,"reportTranPropMsg", _os.getByteBuffer(), context, _mStatus, rep);
        if(pResponseContext)
        {
            *pResponseContext = rep.context;
        }

        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        return _ret;
    }

    inline void PropertyF::async_response_reportTranPropMsg(taf::JceCurrentPtr current, taf::Int32 _ret)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    inline void PropertyFProxy::async_reportTranPropMsg(PropertyFPrxCallbackPtr callback,const map<taf::StatPropMsgHead, taf::StatPropMsgBody> &statmsg,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(statmsg, 1);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"reportTranPropMsg", _os.getByteBuffer(), context, _mStatus, callback);
    }
    
    inline promise::Future< PropertyFPrxCallbackPromise::PromisereportTranPropMsgPtr > PropertyFProxy::promise_async_reportTranPropMsg(const map<taf::StatPropMsgHead, taf::StatPropMsgBody> &statmsg,const map<string, string>& context)
    {
        promise::Promise< PropertyFPrxCallbackPromise::PromisereportTranPropMsgPtr > promise;
        PropertyFPrxCallbackPromisePtr callback = new PropertyFPrxCallbackPromise(promise);

        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(statmsg, 1);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"reportTranPropMsg", _os.getByteBuffer(), context, _mStatus, callback);

        return promise.getFuture();
    }

    inline void PropertyFProxy::coro_reportTranPropMsg(PropertyFCoroPrxCallbackPtr callback,const map<taf::StatPropMsgHead, taf::StatPropMsgBody> &statmsg,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(statmsg, 1);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"reportTranPropMsg", _os.getByteBuffer(), context, _mStatus, callback, true);
    }

    inline PropertyFProxy* PropertyFProxy::taf_hash(int64_t key)
    {
        return (PropertyFProxy*)ServantProxy::taf_hash(key);
    }

    inline PropertyFProxy* PropertyFProxy::taf_consistent_hash(int64_t key)
    {
        return (PropertyFProxy*)ServantProxy::taf_consistent_hash(key);
    }

    inline PropertyFProxy* PropertyFProxy::taf_set_timeout(int msecond)
    {
        return (PropertyFProxy*)ServantProxy::taf_set_timeout(msecond);
    }

    inline PropertyFProxy* PropertyFProxy::taf_loaded()
    {
        return (PropertyFProxy*)ServantProxy::taf_loaded();
    }

    static ::std::string __taf__PropertyF_all[]=
    {
        "reportPropMsg",
        "reportTranPropMsg"
    };

    inline const map<std::string, std::string> & PropertyFPrxCallback::getResponseContext() const
    {
        CallbackThreadData * pCbtd = CallbackThreadData::getData();
        assert(pCbtd != NULL);

        if(!pCbtd->getContextValid())
        {
            throw TC_Exception("cann't get response context");
        }
        return pCbtd->getResponseContext();
    }

    inline int PropertyFPrxCallback::onDispatch(taf::ReqMessagePtr msg)
    {
        pair<string*, string*> r = equal_range(__taf__PropertyF_all, __taf__PropertyF_all+2, string(msg->request.sFuncName));
        if(r.first == r.second) return taf::JCESERVERNOFUNCERR;
        switch(r.first - __taf__PropertyF_all)
        {
            case 0:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_reportPropMsg_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                CallbackThreadData * pCbtd = CallbackThreadData::getData();
                assert(pCbtd != NULL);

                pCbtd->setResponseContext(msg->response.context);

                callback_reportPropMsg(_ret);

                pCbtd->delResponseContext();

                return taf::JCESERVERSUCCESS;

            }
            case 1:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_reportTranPropMsg_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                CallbackThreadData * pCbtd = CallbackThreadData::getData();
                assert(pCbtd != NULL);

                pCbtd->setResponseContext(msg->response.context);

                callback_reportTranPropMsg(_ret);

                pCbtd->delResponseContext();

                return taf::JCESERVERSUCCESS;

            }
        }
        return taf::JCESERVERNOFUNCERR;
    }

    inline int PropertyFPrxCallbackPromise::onDispatch(taf::ReqMessagePtr msg)
    {
        pair<string*, string*> r = equal_range(__taf__PropertyF_all, __taf__PropertyF_all+2, string(msg->request.sFuncName));
        if(r.first == r.second) return taf::JCESERVERNOFUNCERR;
        switch(r.first - __taf__PropertyF_all)
        {
            case 0:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_reportPropMsg_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);

                PropertyFPrxCallbackPromise::PromisereportPropMsgPtr ptr = new PropertyFPrxCallbackPromise::PromisereportPropMsg();

                _is.read(ptr->_ret, 0, true);


                ptr->_mRspContext = msg->response.context;

                callback_reportPropMsg(ptr);

                return taf::JCESERVERSUCCESS;

            }
            case 1:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_reportTranPropMsg_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);

                PropertyFPrxCallbackPromise::PromisereportTranPropMsgPtr ptr = new PropertyFPrxCallbackPromise::PromisereportTranPropMsg();

                _is.read(ptr->_ret, 0, true);


                ptr->_mRspContext = msg->response.context;

                callback_reportTranPropMsg(ptr);

                return taf::JCESERVERSUCCESS;

            }
        }
        return taf::JCESERVERNOFUNCERR;
    }

    inline int PropertyFCoroPrxCallback::onDispatch(taf::ReqMessagePtr msg)
    {
        pair<string*, string*> r = equal_range(__taf__PropertyF_all, __taf__PropertyF_all+2, string(msg->request.sFuncName));
        if(r.first == r.second) return taf::JCESERVERNOFUNCERR;
        switch(r.first - __taf__PropertyF_all)
        {
            case 0:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_reportPropMsg_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                setResponseContext(msg->response.context);

                callback_reportPropMsg(_ret);

                return taf::JCESERVERSUCCESS;

            }
            case 1:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_reportTranPropMsg_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                setResponseContext(msg->response.context);

                callback_reportTranPropMsg(_ret);

                return taf::JCESERVERSUCCESS;

            }
        }
        return taf::JCESERVERNOFUNCERR;
    }

    inline int PropertyF::onDispatch(taf::JceCurrentPtr _current, vector<char> &_sResponseBuffer)
    {
        pair<string*, string*> r = equal_range(__taf__PropertyF_all, __taf__PropertyF_all+2, _current->getFuncName());
        if(r.first == r.second) return taf::JCESERVERNOFUNCERR;
        switch(r.first - __taf__PropertyF_all)
        {
            case 0:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                map<taf::StatPropMsgHead, taf::StatPropMsgBody> statmsg;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("statmsg", statmsg);
                }
                else
                {
                    _is.read(statmsg, 1, true);
                }
                taf::Int32 _ret = reportPropMsg(statmsg, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 1:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                map<taf::StatPropMsgHead, taf::StatPropMsgBody> statmsg;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("statmsg", statmsg);
                }
                else
                {
                    _is.read(statmsg, 1, true);
                }
                taf::Int32 _ret = reportTranPropMsg(statmsg, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
        }
        return taf::JCESERVERNOFUNCERR;
    }

} // end namespace taf

#define taf_StatPropMsgHead_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.moduleName,b.moduleName);jce_copy_struct(a.ip,b.ip);jce_copy_struct(a.propertyName,b.propertyName);jce_copy_struct(a.setName,b.setName);jce_copy_struct(a.setArea,b.setArea);jce_copy_struct(a.setID,b.setID);jce_copy_struct(a.sContainer,b.sContainer);jce_copy_struct(a.iPropertyVer,b.iPropertyVer);

#define taf_StatPropInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.policy,b.policy);jce_copy_struct(a.value,b.value);

#define taf_StatPropMsgBody_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.vInfo,b.vInfo);


#endif

