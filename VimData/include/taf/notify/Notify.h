// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.2.2.11 by WSRD Tencent.
// Generated from `Notify.jce'
// **********************************************************************

#ifndef __NOTIFY_H_
#define __NOTIFY_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
#include "jce/wup.h"
#include "servant/BaseF.h"

using namespace wup;
using namespace std;

#include "servant/ServantProxy.h"
#include "servant/Servant.h"
#include "promise/promise.h"


namespace taf
{
    enum NOTIFYLEVEL
    {
        NOTIFYNORMAL,
        NOTIFYWARN,
        NOTIFYERROR,
    };
    inline string etos(const NOTIFYLEVEL & e)
    {
        switch(e)
        {
            case NOTIFYNORMAL: return "NOTIFYNORMAL";
            case NOTIFYWARN: return "NOTIFYWARN";
            case NOTIFYERROR: return "NOTIFYERROR";
            default: return "";
        }
    }
    inline int stoe(const string & s, NOTIFYLEVEL & e)
    {
        if(s == "NOTIFYNORMAL")  { e=NOTIFYNORMAL; return 0;}
        if(s == "NOTIFYWARN")  { e=NOTIFYWARN; return 0;}
        if(s == "NOTIFYERROR")  { e=NOTIFYERROR; return 0;}

        return -1;
    }

    enum ReportType
    {
        REPORT,
        NOTIFY,
    };
    inline string etos(const ReportType & e)
    {
        switch(e)
        {
            case REPORT: return "REPORT";
            case NOTIFY: return "NOTIFY";
            default: return "";
        }
    }
    inline int stoe(const string & s, ReportType & e)
    {
        if(s == "REPORT")  { e=REPORT; return 0;}
        if(s == "NOTIFY")  { e=NOTIFY; return 0;}

        return -1;
    }

    struct NotifyKey : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "taf.NotifyKey";
        }
        static string MD5()
        {
            return "8d61b639cda77ea57102c6b9cbb5aca2";
        }
        NotifyKey()
        :name(""),ip(""),page(0)
        {
        }
        void resetDefautlt()
        {
            name = "";
            ip = "";
            page = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(name, 1);
            _os.write(ip, 2);
            _os.write(page, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(name, 1, true);
            _is.read(ip, 2, true);
            _is.read(page, 3, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(name,"name");
            _ds.display(ip,"ip");
            _ds.display(page,"page");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(name, true);
            _ds.displaySimple(ip, true);
            _ds.displaySimple(page, false);
            return _os;
        }
    public:
        std::string name;
        std::string ip;
        taf::Int32 page;
    };
    inline bool operator==(const NotifyKey&l, const NotifyKey&r)
    {
        return l.name == r.name && l.ip == r.ip && l.page == r.page;
    }
    inline bool operator!=(const NotifyKey&l, const NotifyKey&r)
    {
        return !(l == r);
    }

    struct NotifyItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "taf.NotifyItem";
        }
        static string MD5()
        {
            return "c9a7b07e8b044d0fcbe9339d81fbbd69";
        }
        NotifyItem()
        :sTimeStamp(""),sServerId(""),iLevel(0),sMessage("")
        {
        }
        void resetDefautlt()
        {
            sTimeStamp = "";
            sServerId = "";
            iLevel = 0;
            sMessage = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(sTimeStamp, 1);
            _os.write(sServerId, 2);
            _os.write(iLevel, 3);
            _os.write(sMessage, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(sTimeStamp, 1, true);
            _is.read(sServerId, 2, true);
            _is.read(iLevel, 3, true);
            _is.read(sMessage, 4, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(sTimeStamp,"sTimeStamp");
            _ds.display(sServerId,"sServerId");
            _ds.display(iLevel,"iLevel");
            _ds.display(sMessage,"sMessage");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(sTimeStamp, true);
            _ds.displaySimple(sServerId, true);
            _ds.displaySimple(iLevel, true);
            _ds.displaySimple(sMessage, false);
            return _os;
        }
    public:
        std::string sTimeStamp;
        std::string sServerId;
        taf::Int32 iLevel;
        std::string sMessage;
    };
    inline bool operator==(const NotifyItem&l, const NotifyItem&r)
    {
        return l.sTimeStamp == r.sTimeStamp && l.sServerId == r.sServerId && l.iLevel == r.iLevel && l.sMessage == r.sMessage;
    }
    inline bool operator!=(const NotifyItem&l, const NotifyItem&r)
    {
        return !(l == r);
    }

    struct NotifyInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "taf.NotifyInfo";
        }
        static string MD5()
        {
            return "d509960be39ae76bb89d5556bc299c13";
        }
        NotifyInfo()
        :nextpage(0)
        {
        }
        void resetDefautlt()
        {
            nextpage = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(nextpage, 1);
            _os.write(notifyItems, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(nextpage, 1, true);
            _is.read(notifyItems, 2, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(nextpage,"nextpage");
            _ds.display(notifyItems,"notifyItems");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(nextpage, true);
            _ds.displaySimple(notifyItems, false);
            return _os;
        }
    public:
        taf::Int32 nextpage;
        vector<taf::NotifyItem> notifyItems;
    };
    inline bool operator==(const NotifyInfo&l, const NotifyInfo&r)
    {
        return l.nextpage == r.nextpage && l.notifyItems == r.notifyItems;
    }
    inline bool operator!=(const NotifyInfo&l, const NotifyInfo&r)
    {
        return !(l == r);
    }

    struct ReportInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "taf.ReportInfo";
        }
        static string MD5()
        {
            return "fdab96ffad6a00867b630c0cd2dea176";
        }
        ReportInfo()
        :eType(taf::REPORT),sApp(""),sSet(""),sContainer(""),sServer(""),sMessage(""),sThreadId(""),eLevel(taf::NOTIFYNORMAL)
        {
        }
        void resetDefautlt()
        {
            sApp = "";
            sSet = "";
            sContainer = "";
            sServer = "";
            sMessage = "";
            sThreadId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write((taf::Int32)eType, 1);
            _os.write(sApp, 2);
            _os.write(sSet, 3);
            _os.write(sContainer, 4);
            _os.write(sServer, 5);
            _os.write(sMessage, 6);
            _os.write(sThreadId, 7);
            _os.write((taf::Int32)eLevel, 8);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            taf::Int32 eTemp1 = taf::REPORT;
            _is.read(eTemp1, 1, true);
            eType = (taf::ReportType)eTemp1;
            _is.read(sApp, 2, true);
            _is.read(sSet, 3, true);
            _is.read(sContainer, 4, true);
            _is.read(sServer, 5, true);
            _is.read(sMessage, 6, true);
            _is.read(sThreadId, 7, false);
            taf::Int32 eTemp8 = taf::NOTIFYNORMAL;
            _is.read(eTemp8, 8, false);
            eLevel = (taf::NOTIFYLEVEL)eTemp8;
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display((taf::Int32)eType,"eType");
            _ds.display(sApp,"sApp");
            _ds.display(sSet,"sSet");
            _ds.display(sContainer,"sContainer");
            _ds.display(sServer,"sServer");
            _ds.display(sMessage,"sMessage");
            _ds.display(sThreadId,"sThreadId");
            _ds.display((taf::Int32)eLevel,"eLevel");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple((taf::Int32)eType, true);
            _ds.displaySimple(sApp, true);
            _ds.displaySimple(sSet, true);
            _ds.displaySimple(sContainer, true);
            _ds.displaySimple(sServer, true);
            _ds.displaySimple(sMessage, true);
            _ds.displaySimple(sThreadId, true);
            _ds.displaySimple((taf::Int32)eLevel, false);
            return _os;
        }
    public:
        taf::ReportType eType;
        std::string sApp;
        std::string sSet;
        std::string sContainer;
        std::string sServer;
        std::string sMessage;
        std::string sThreadId;
        taf::NOTIFYLEVEL eLevel;
    };
    inline bool operator==(const ReportInfo&l, const ReportInfo&r)
    {
        return l.eType == r.eType && l.sApp == r.sApp && l.sSet == r.sSet && l.sContainer == r.sContainer && l.sServer == r.sServer && l.sMessage == r.sMessage && l.sThreadId == r.sThreadId && l.eLevel == r.eLevel;
    }
    inline bool operator!=(const ReportInfo&l, const ReportInfo&r)
    {
        return !(l == r);
    }

    /* callback of async proxy for client */
    class NotifyPrxCallback: public taf::ServantProxyCallback
    {
    public:
        virtual ~NotifyPrxCallback(){}
        virtual void callback_reportServer()
        { throw std::runtime_error("callback_reportServer() override incorrect."); }
        virtual void callback_reportServer_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_reportServer_exception() override incorrect."); }

        virtual void callback_notifyServer()
        { throw std::runtime_error("callback_notifyServer() override incorrect."); }
        virtual void callback_notifyServer_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_notifyServer_exception() override incorrect."); }

        virtual void callback_getNotifyInfo(taf::Int32 ret,  const taf::NotifyInfo& stInfo)
        { throw std::runtime_error("callback_getNotifyInfo() override incorrect."); }
        virtual void callback_getNotifyInfo_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_getNotifyInfo_exception() override incorrect."); }

        virtual void callback_reportNotifyInfo()
        { throw std::runtime_error("callback_reportNotifyInfo() override incorrect."); }
        virtual void callback_reportNotifyInfo_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_reportNotifyInfo_exception() override incorrect."); }

    public:
        virtual const map<std::string, std::string> & getResponseContext() const;

    public:
        virtual int onDispatch(taf::ReqMessagePtr msg);
    };
    typedef taf::TC_AutoPtr<NotifyPrxCallback> NotifyPrxCallbackPtr;

    /* callback of promise async proxy for client */
    class NotifyPrxCallbackPromise: public taf::ServantProxyCallback
    {
    public:
        virtual ~NotifyPrxCallbackPromise(){}
    public:
        struct PromisereportServer: virtual public TC_HandleBase
        {
        public:
            map<std::string, std::string> _mRspContext;
        };
        
        typedef taf::TC_AutoPtr< NotifyPrxCallbackPromise::PromisereportServer > PromisereportServerPtr;

        NotifyPrxCallbackPromise(const promise::Promise< NotifyPrxCallbackPromise::PromisereportServerPtr > &promise)
        : _promise_reportServer(promise)
        {}
        
        virtual void callback_reportServer(const NotifyPrxCallbackPromise::PromisereportServerPtr &ptr)
        {
            _promise_reportServer.setValue(ptr);
        }
        virtual void callback_reportServer_exception(taf::Int32 ret)
        {
            std::string str("");
            str += "Function:reportServer_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_reportServer.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< NotifyPrxCallbackPromise::PromisereportServerPtr > _promise_reportServer;

    public:
        struct PromisenotifyServer: virtual public TC_HandleBase
        {
        public:
            map<std::string, std::string> _mRspContext;
        };
        
        typedef taf::TC_AutoPtr< NotifyPrxCallbackPromise::PromisenotifyServer > PromisenotifyServerPtr;

        NotifyPrxCallbackPromise(const promise::Promise< NotifyPrxCallbackPromise::PromisenotifyServerPtr > &promise)
        : _promise_notifyServer(promise)
        {}
        
        virtual void callback_notifyServer(const NotifyPrxCallbackPromise::PromisenotifyServerPtr &ptr)
        {
            _promise_notifyServer.setValue(ptr);
        }
        virtual void callback_notifyServer_exception(taf::Int32 ret)
        {
            std::string str("");
            str += "Function:notifyServer_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_notifyServer.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< NotifyPrxCallbackPromise::PromisenotifyServerPtr > _promise_notifyServer;

    public:
        struct PromisegetNotifyInfo: virtual public TC_HandleBase
        {
        public:
            taf::Int32 _ret;
            taf::NotifyInfo stInfo;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef taf::TC_AutoPtr< NotifyPrxCallbackPromise::PromisegetNotifyInfo > PromisegetNotifyInfoPtr;

        NotifyPrxCallbackPromise(const promise::Promise< NotifyPrxCallbackPromise::PromisegetNotifyInfoPtr > &promise)
        : _promise_getNotifyInfo(promise)
        {}
        
        virtual void callback_getNotifyInfo(const NotifyPrxCallbackPromise::PromisegetNotifyInfoPtr &ptr)
        {
            _promise_getNotifyInfo.setValue(ptr);
        }
        virtual void callback_getNotifyInfo_exception(taf::Int32 ret)
        {
            std::string str("");
            str += "Function:getNotifyInfo_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_getNotifyInfo.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< NotifyPrxCallbackPromise::PromisegetNotifyInfoPtr > _promise_getNotifyInfo;

    public:
        struct PromisereportNotifyInfo: virtual public TC_HandleBase
        {
        public:
            map<std::string, std::string> _mRspContext;
        };
        
        typedef taf::TC_AutoPtr< NotifyPrxCallbackPromise::PromisereportNotifyInfo > PromisereportNotifyInfoPtr;

        NotifyPrxCallbackPromise(const promise::Promise< NotifyPrxCallbackPromise::PromisereportNotifyInfoPtr > &promise)
        : _promise_reportNotifyInfo(promise)
        {}
        
        virtual void callback_reportNotifyInfo(const NotifyPrxCallbackPromise::PromisereportNotifyInfoPtr &ptr)
        {
            _promise_reportNotifyInfo.setValue(ptr);
        }
        virtual void callback_reportNotifyInfo_exception(taf::Int32 ret)
        {
            std::string str("");
            str += "Function:reportNotifyInfo_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_reportNotifyInfo.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< NotifyPrxCallbackPromise::PromisereportNotifyInfoPtr > _promise_reportNotifyInfo;

    public:
        virtual int onDispatch(taf::ReqMessagePtr msg);
    };
    typedef taf::TC_AutoPtr<NotifyPrxCallbackPromise> NotifyPrxCallbackPromisePtr;

    /* callback of coroutine async proxy for client */
    class NotifyCoroPrxCallback: public NotifyPrxCallback
    {
    public:
        virtual ~NotifyCoroPrxCallback(){}
    public:
        virtual const map<std::string, std::string> & getResponseContext() const { return _mRspContext; }

        virtual void setResponseContext(const map<std::string, std::string> &mContext) { _mRspContext = mContext; }

    public:
        virtual int onDispatch(taf::ReqMessagePtr msg);
    protected:
        map<std::string, std::string> _mRspContext;
    };
    typedef taf::TC_AutoPtr<NotifyCoroPrxCallback> NotifyCoroPrxCallbackPtr;

    /* proxy for client */
    class NotifyProxy : public taf::ServantProxy
    {
    public:
        typedef map<string, string> TAF_CONTEXT;
        void reportServer(const std::string & sServerName,const std::string & sThreadId,const std::string & sMessage,const map<string, string> &context = TAF_CONTEXT(),map<string, string> * pResponseContext = NULL);
        void async_reportServer(NotifyPrxCallbackPtr callback,const std::string & sServerName,const std::string & sThreadId,const std::string & sMessage,const map<string, string> &context = TAF_CONTEXT());

        promise::Future< NotifyPrxCallbackPromise::PromisereportServerPtr > promise_async_reportServer(const std::string & sServerName,const std::string & sThreadId,const std::string & sMessage,const map<string, string> &context = TAF_CONTEXT());
        void coro_reportServer(NotifyCoroPrxCallbackPtr callback,const std::string & sServerName,const std::string & sThreadId,const std::string & sMessage,const map<string, string> &context = TAF_CONTEXT());

        void notifyServer(const std::string & sServerName,taf::NOTIFYLEVEL level,const std::string & sMessage,const map<string, string> &context = TAF_CONTEXT(),map<string, string> * pResponseContext = NULL);
        void async_notifyServer(NotifyPrxCallbackPtr callback,const std::string & sServerName,taf::NOTIFYLEVEL level,const std::string & sMessage,const map<string, string> &context = TAF_CONTEXT());

        promise::Future< NotifyPrxCallbackPromise::PromisenotifyServerPtr > promise_async_notifyServer(const std::string & sServerName,taf::NOTIFYLEVEL level,const std::string & sMessage,const map<string, string> &context = TAF_CONTEXT());
        void coro_notifyServer(NotifyCoroPrxCallbackPtr callback,const std::string & sServerName,taf::NOTIFYLEVEL level,const std::string & sMessage,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 getNotifyInfo(const taf::NotifyKey & stKey,taf::NotifyInfo &stInfo,const map<string, string> &context = TAF_CONTEXT(),map<string, string> * pResponseContext = NULL);
        void async_getNotifyInfo(NotifyPrxCallbackPtr callback,const taf::NotifyKey & stKey,const map<string, string> &context = TAF_CONTEXT());

        promise::Future< NotifyPrxCallbackPromise::PromisegetNotifyInfoPtr > promise_async_getNotifyInfo(const taf::NotifyKey & stKey,const map<string, string> &context = TAF_CONTEXT());
        void coro_getNotifyInfo(NotifyCoroPrxCallbackPtr callback,const taf::NotifyKey & stKey,const map<string, string> &context = TAF_CONTEXT());

        void reportNotifyInfo(const taf::ReportInfo & info,const map<string, string> &context = TAF_CONTEXT(),map<string, string> * pResponseContext = NULL);
        void async_reportNotifyInfo(NotifyPrxCallbackPtr callback,const taf::ReportInfo & info,const map<string, string> &context = TAF_CONTEXT());

        promise::Future< NotifyPrxCallbackPromise::PromisereportNotifyInfoPtr > promise_async_reportNotifyInfo(const taf::ReportInfo & info,const map<string, string> &context = TAF_CONTEXT());
        void coro_reportNotifyInfo(NotifyCoroPrxCallbackPtr callback,const taf::ReportInfo & info,const map<string, string> &context = TAF_CONTEXT());

        NotifyProxy* taf_hash(int64_t key);
        NotifyProxy* taf_consistent_hash(int64_t key);
        NotifyProxy* taf_set_timeout(int msecond);
        NotifyProxy* taf_loaded();
    };
    typedef taf::TC_AutoPtr<NotifyProxy> NotifyPrx;

    /* servant for server */
    class Notify : public taf::Servant
    {
    public:
        virtual ~Notify(){}
        virtual void reportServer(const std::string & sServerName,const std::string & sThreadId,const std::string & sMessage,taf::JceCurrentPtr current) = 0;
        static void async_response_reportServer(taf::JceCurrentPtr current);

        virtual void notifyServer(const std::string & sServerName,taf::NOTIFYLEVEL level,const std::string & sMessage,taf::JceCurrentPtr current) = 0;
        static void async_response_notifyServer(taf::JceCurrentPtr current);

        virtual taf::Int32 getNotifyInfo(const taf::NotifyKey & stKey,taf::NotifyInfo &stInfo,taf::JceCurrentPtr current) = 0;
        static void async_response_getNotifyInfo(taf::JceCurrentPtr current, taf::Int32 _ret, const taf::NotifyInfo &stInfo);

        virtual void reportNotifyInfo(const taf::ReportInfo & info,taf::JceCurrentPtr current) = 0;
        static void async_response_reportNotifyInfo(taf::JceCurrentPtr current);

    public:
        int onDispatch(taf::JceCurrentPtr _current, vector<char> &_sResponseBuffer);
    };

    inline taf::Int32 NotifyProxy::getNotifyInfo(const taf::NotifyKey &stKey, taf::NotifyInfo &stInfo, const map<string, string> &context,map<string, string> * pResponseContext)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(stKey, 1);
        _os.write(stInfo, 2);
        taf::ResponsePacket rep;
        std::map<string, string> _mStatus;
        taf_invoke(taf::JCENORMAL,"getNotifyInfo", _os.getByteBuffer(), context, _mStatus, rep);
        if(pResponseContext)
        {
            *pResponseContext = rep.context;
        }

        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(stInfo, 2, true);
        return _ret;
    }

    inline void Notify::async_response_getNotifyInfo(taf::JceCurrentPtr current, taf::Int32 _ret, const taf::NotifyInfo &stInfo)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("stInfo", stInfo);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(stInfo, 2);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    inline void NotifyProxy::async_getNotifyInfo(NotifyPrxCallbackPtr callback,const taf::NotifyKey &stKey,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(stKey, 1);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"getNotifyInfo", _os.getByteBuffer(), context, _mStatus, callback);
    }
    
    inline promise::Future< NotifyPrxCallbackPromise::PromisegetNotifyInfoPtr > NotifyProxy::promise_async_getNotifyInfo(const taf::NotifyKey &stKey,const map<string, string>& context)
    {
        promise::Promise< NotifyPrxCallbackPromise::PromisegetNotifyInfoPtr > promise;
        NotifyPrxCallbackPromisePtr callback = new NotifyPrxCallbackPromise(promise);

        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(stKey, 1);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"getNotifyInfo", _os.getByteBuffer(), context, _mStatus, callback);

        return promise.getFuture();
    }

    inline void NotifyProxy::coro_getNotifyInfo(NotifyCoroPrxCallbackPtr callback,const taf::NotifyKey &stKey,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(stKey, 1);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"getNotifyInfo", _os.getByteBuffer(), context, _mStatus, callback, true);
    }

    inline void NotifyProxy::notifyServer(const std::string &sServerName, taf::NOTIFYLEVEL level, const std::string &sMessage, const map<string, string> &context,map<string, string> * pResponseContext)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(sServerName, 1);
        _os.write((taf::Int32)level, 2);
        _os.write(sMessage, 3);
        taf::ResponsePacket rep;
        std::map<string, string> _mStatus;
        taf_invoke(taf::JCENORMAL,"notifyServer", _os.getByteBuffer(), context, _mStatus, rep);
        if(pResponseContext)
        {
            *pResponseContext = rep.context;
        }

        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
    }

    inline void Notify::async_response_notifyServer(taf::JceCurrentPtr current)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    inline void NotifyProxy::async_notifyServer(NotifyPrxCallbackPtr callback,const std::string &sServerName,taf::NOTIFYLEVEL level,const std::string &sMessage,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(sServerName, 1);
        _os.write((taf::Int32)level, 2);
        _os.write(sMessage, 3);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"notifyServer", _os.getByteBuffer(), context, _mStatus, callback);
    }
    
    inline promise::Future< NotifyPrxCallbackPromise::PromisenotifyServerPtr > NotifyProxy::promise_async_notifyServer(const std::string &sServerName,taf::NOTIFYLEVEL level,const std::string &sMessage,const map<string, string>& context)
    {
        promise::Promise< NotifyPrxCallbackPromise::PromisenotifyServerPtr > promise;
        NotifyPrxCallbackPromisePtr callback = new NotifyPrxCallbackPromise(promise);

        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(sServerName, 1);
        _os.write((taf::Int32)level, 2);
        _os.write(sMessage, 3);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"notifyServer", _os.getByteBuffer(), context, _mStatus, callback);

        return promise.getFuture();
    }

    inline void NotifyProxy::coro_notifyServer(NotifyCoroPrxCallbackPtr callback,const std::string &sServerName,taf::NOTIFYLEVEL level,const std::string &sMessage,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(sServerName, 1);
        _os.write((taf::Int32)level, 2);
        _os.write(sMessage, 3);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"notifyServer", _os.getByteBuffer(), context, _mStatus, callback, true);
    }

    inline void NotifyProxy::reportNotifyInfo(const taf::ReportInfo &info, const map<string, string> &context,map<string, string> * pResponseContext)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(info, 1);
        taf::ResponsePacket rep;
        std::map<string, string> _mStatus;
        taf_invoke(taf::JCENORMAL,"reportNotifyInfo", _os.getByteBuffer(), context, _mStatus, rep);
        if(pResponseContext)
        {
            *pResponseContext = rep.context;
        }

        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
    }

    inline void Notify::async_response_reportNotifyInfo(taf::JceCurrentPtr current)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    inline void NotifyProxy::async_reportNotifyInfo(NotifyPrxCallbackPtr callback,const taf::ReportInfo &info,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(info, 1);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"reportNotifyInfo", _os.getByteBuffer(), context, _mStatus, callback);
    }
    
    inline promise::Future< NotifyPrxCallbackPromise::PromisereportNotifyInfoPtr > NotifyProxy::promise_async_reportNotifyInfo(const taf::ReportInfo &info,const map<string, string>& context)
    {
        promise::Promise< NotifyPrxCallbackPromise::PromisereportNotifyInfoPtr > promise;
        NotifyPrxCallbackPromisePtr callback = new NotifyPrxCallbackPromise(promise);

        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(info, 1);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"reportNotifyInfo", _os.getByteBuffer(), context, _mStatus, callback);

        return promise.getFuture();
    }

    inline void NotifyProxy::coro_reportNotifyInfo(NotifyCoroPrxCallbackPtr callback,const taf::ReportInfo &info,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(info, 1);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"reportNotifyInfo", _os.getByteBuffer(), context, _mStatus, callback, true);
    }

    inline void NotifyProxy::reportServer(const std::string &sServerName, const std::string &sThreadId, const std::string &sMessage, const map<string, string> &context,map<string, string> * pResponseContext)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(sServerName, 1);
        _os.write(sThreadId, 2);
        _os.write(sMessage, 3);
        taf::ResponsePacket rep;
        std::map<string, string> _mStatus;
        taf_invoke(taf::JCENORMAL,"reportServer", _os.getByteBuffer(), context, _mStatus, rep);
        if(pResponseContext)
        {
            *pResponseContext = rep.context;
        }

        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
    }

    inline void Notify::async_response_reportServer(taf::JceCurrentPtr current)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    inline void NotifyProxy::async_reportServer(NotifyPrxCallbackPtr callback,const std::string &sServerName,const std::string &sThreadId,const std::string &sMessage,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(sServerName, 1);
        _os.write(sThreadId, 2);
        _os.write(sMessage, 3);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"reportServer", _os.getByteBuffer(), context, _mStatus, callback);
    }
    
    inline promise::Future< NotifyPrxCallbackPromise::PromisereportServerPtr > NotifyProxy::promise_async_reportServer(const std::string &sServerName,const std::string &sThreadId,const std::string &sMessage,const map<string, string>& context)
    {
        promise::Promise< NotifyPrxCallbackPromise::PromisereportServerPtr > promise;
        NotifyPrxCallbackPromisePtr callback = new NotifyPrxCallbackPromise(promise);

        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(sServerName, 1);
        _os.write(sThreadId, 2);
        _os.write(sMessage, 3);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"reportServer", _os.getByteBuffer(), context, _mStatus, callback);

        return promise.getFuture();
    }

    inline void NotifyProxy::coro_reportServer(NotifyCoroPrxCallbackPtr callback,const std::string &sServerName,const std::string &sThreadId,const std::string &sMessage,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(sServerName, 1);
        _os.write(sThreadId, 2);
        _os.write(sMessage, 3);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"reportServer", _os.getByteBuffer(), context, _mStatus, callback, true);
    }

    inline NotifyProxy* NotifyProxy::taf_hash(int64_t key)
    {
        return (NotifyProxy*)ServantProxy::taf_hash(key);
    }

    inline NotifyProxy* NotifyProxy::taf_consistent_hash(int64_t key)
    {
        return (NotifyProxy*)ServantProxy::taf_consistent_hash(key);
    }

    inline NotifyProxy* NotifyProxy::taf_set_timeout(int msecond)
    {
        return (NotifyProxy*)ServantProxy::taf_set_timeout(msecond);
    }

    inline NotifyProxy* NotifyProxy::taf_loaded()
    {
        return (NotifyProxy*)ServantProxy::taf_loaded();
    }

    static ::std::string __taf__Notify_all[]=
    {
        "getNotifyInfo",
        "notifyServer",
        "reportNotifyInfo",
        "reportServer"
    };

    inline const map<std::string, std::string> & NotifyPrxCallback::getResponseContext() const
    {
        CallbackThreadData * pCbtd = CallbackThreadData::getData();
        assert(pCbtd != NULL);

        if(!pCbtd->getContextValid())
        {
            throw TC_Exception("cann't get response context");
        }
        return pCbtd->getResponseContext();
    }

    inline int NotifyPrxCallback::onDispatch(taf::ReqMessagePtr msg)
    {
        pair<string*, string*> r = equal_range(__taf__Notify_all, __taf__Notify_all+4, string(msg->request.sFuncName));
        if(r.first == r.second) return taf::JCESERVERNOFUNCERR;
        switch(r.first - __taf__Notify_all)
        {
            case 0:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_getNotifyInfo_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                taf::NotifyInfo stInfo;
                _is.read(stInfo, 2, true);
                CallbackThreadData * pCbtd = CallbackThreadData::getData();
                assert(pCbtd != NULL);

                pCbtd->setResponseContext(msg->response.context);

                callback_getNotifyInfo(_ret, stInfo);

                pCbtd->delResponseContext();

                return taf::JCESERVERSUCCESS;

            }
            case 1:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_notifyServer_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                CallbackThreadData * pCbtd = CallbackThreadData::getData();
                assert(pCbtd != NULL);

                pCbtd->setResponseContext(msg->response.context);

                callback_notifyServer();

                pCbtd->delResponseContext();

                return taf::JCESERVERSUCCESS;

            }
            case 2:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_reportNotifyInfo_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                CallbackThreadData * pCbtd = CallbackThreadData::getData();
                assert(pCbtd != NULL);

                pCbtd->setResponseContext(msg->response.context);

                callback_reportNotifyInfo();

                pCbtd->delResponseContext();

                return taf::JCESERVERSUCCESS;

            }
            case 3:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_reportServer_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                CallbackThreadData * pCbtd = CallbackThreadData::getData();
                assert(pCbtd != NULL);

                pCbtd->setResponseContext(msg->response.context);

                callback_reportServer();

                pCbtd->delResponseContext();

                return taf::JCESERVERSUCCESS;

            }
        }
        return taf::JCESERVERNOFUNCERR;
    }

    inline int NotifyPrxCallbackPromise::onDispatch(taf::ReqMessagePtr msg)
    {
        pair<string*, string*> r = equal_range(__taf__Notify_all, __taf__Notify_all+4, string(msg->request.sFuncName));
        if(r.first == r.second) return taf::JCESERVERNOFUNCERR;
        switch(r.first - __taf__Notify_all)
        {
            case 0:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_getNotifyInfo_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);

                NotifyPrxCallbackPromise::PromisegetNotifyInfoPtr ptr = new NotifyPrxCallbackPromise::PromisegetNotifyInfo();

                _is.read(ptr->_ret, 0, true);

                _is.read(ptr->stInfo, 2, true);

                ptr->_mRspContext = msg->response.context;

                callback_getNotifyInfo(ptr);

                return taf::JCESERVERSUCCESS;

            }
            case 1:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_notifyServer_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);

                NotifyPrxCallbackPromise::PromisenotifyServerPtr ptr = new NotifyPrxCallbackPromise::PromisenotifyServer();


                ptr->_mRspContext = msg->response.context;

                callback_notifyServer(ptr);

                return taf::JCESERVERSUCCESS;

            }
            case 2:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_reportNotifyInfo_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);

                NotifyPrxCallbackPromise::PromisereportNotifyInfoPtr ptr = new NotifyPrxCallbackPromise::PromisereportNotifyInfo();


                ptr->_mRspContext = msg->response.context;

                callback_reportNotifyInfo(ptr);

                return taf::JCESERVERSUCCESS;

            }
            case 3:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_reportServer_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);

                NotifyPrxCallbackPromise::PromisereportServerPtr ptr = new NotifyPrxCallbackPromise::PromisereportServer();


                ptr->_mRspContext = msg->response.context;

                callback_reportServer(ptr);

                return taf::JCESERVERSUCCESS;

            }
        }
        return taf::JCESERVERNOFUNCERR;
    }

    inline int NotifyCoroPrxCallback::onDispatch(taf::ReqMessagePtr msg)
    {
        pair<string*, string*> r = equal_range(__taf__Notify_all, __taf__Notify_all+4, string(msg->request.sFuncName));
        if(r.first == r.second) return taf::JCESERVERNOFUNCERR;
        switch(r.first - __taf__Notify_all)
        {
            case 0:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_getNotifyInfo_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                taf::NotifyInfo stInfo;
                _is.read(stInfo, 2, true);
                setResponseContext(msg->response.context);

                callback_getNotifyInfo(_ret, stInfo);

                return taf::JCESERVERSUCCESS;

            }
            case 1:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_notifyServer_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                setResponseContext(msg->response.context);

                callback_notifyServer();

                return taf::JCESERVERSUCCESS;

            }
            case 2:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_reportNotifyInfo_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                setResponseContext(msg->response.context);

                callback_reportNotifyInfo();

                return taf::JCESERVERSUCCESS;

            }
            case 3:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_reportServer_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                setResponseContext(msg->response.context);

                callback_reportServer();

                return taf::JCESERVERSUCCESS;

            }
        }
        return taf::JCESERVERNOFUNCERR;
    }

    inline int Notify::onDispatch(taf::JceCurrentPtr _current, vector<char> &_sResponseBuffer)
    {
        pair<string*, string*> r = equal_range(__taf__Notify_all, __taf__Notify_all+4, _current->getFuncName());
        if(r.first == r.second) return taf::JCESERVERNOFUNCERR;
        switch(r.first - __taf__Notify_all)
        {
            case 0:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                taf::NotifyKey stKey;
                taf::NotifyInfo stInfo;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("stKey", stKey);
                    tafAttr.getByDefault("stInfo", stInfo, stInfo);
                }
                else
                {
                    _is.read(stKey, 1, true);
                    _is.read(stInfo, 2, false);
                }
                taf::Int32 _ret = getNotifyInfo(stKey,stInfo, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("stInfo", stInfo);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(stInfo, 2);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 1:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                std::string sServerName;
                taf::NOTIFYLEVEL level = taf::NOTIFYNORMAL;;
                std::string sMessage;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("sServerName", sServerName);
                    level = (taf::NOTIFYLEVEL) tafAttr.get<taf::Int32>("level");
                    tafAttr.get("sMessage", sMessage);
                }
                else
                {
                    _is.read(sServerName, 1, true);
                    taf::Int32 eTemp2 = taf::NOTIFYNORMAL;
                    _is.read(eTemp2, 2, true);
                    level = (taf::NOTIFYLEVEL)eTemp2;
                    _is.read(sMessage, 3, true);
                }
                notifyServer(sServerName,level,sMessage, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 2:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                taf::ReportInfo info;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("info", info);
                }
                else
                {
                    _is.read(info, 1, true);
                }
                reportNotifyInfo(info, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 3:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                std::string sServerName;
                std::string sThreadId;
                std::string sMessage;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("sServerName", sServerName);
                    tafAttr.get("sThreadId", sThreadId);
                    tafAttr.get("sMessage", sMessage);
                }
                else
                {
                    _is.read(sServerName, 1, true);
                    _is.read(sThreadId, 2, true);
                    _is.read(sMessage, 3, true);
                }
                reportServer(sServerName,sThreadId,sMessage, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
        }
        return taf::JCESERVERNOFUNCERR;
    }

} // end namespace taf

#define taf_NotifyKey_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.name,b.name);jce_copy_struct(a.ip,b.ip);jce_copy_struct(a.page,b.page);

#define taf_NotifyItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.sTimeStamp,b.sTimeStamp);jce_copy_struct(a.sServerId,b.sServerId);jce_copy_struct(a.iLevel,b.iLevel);jce_copy_struct(a.sMessage,b.sMessage);

#define taf_NotifyInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.nextpage,b.nextpage);jce_copy_struct(a.notifyItems,b.notifyItems);

#define taf_ReportInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.eType,b.eType);jce_copy_struct(a.sApp,b.sApp);jce_copy_struct(a.sSet,b.sSet);jce_copy_struct(a.sContainer,b.sContainer);jce_copy_struct(a.sServer,b.sServer);jce_copy_struct(a.sMessage,b.sMessage);jce_copy_struct(a.sThreadId,b.sThreadId);jce_copy_struct(a.eLevel,b.eLevel);


#endif

